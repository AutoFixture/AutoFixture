using System;
using Xunit;
using Xunit.Sdk;

namespace AutoFixture.Xunit2
{
    /// <summary>
    /// Provides a data source for a data theory, with the data coming from a class
    /// which must implement IEnumerable&lt;object[]&gt;,
    /// with auto-generated data specimens generated by AutoFixture.
    /// </summary>
    [DataDiscoverer(
        typeName: "AutoFixture.Xunit2.NoPreDiscoveryDataDiscoverer",
        assemblyName: "AutoFixture.Xunit2")]
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    [CLSCompliant(false)]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes",
        Justification = "This attribute is the root of a potential attribute hierarchy.")]
    public class ClassAutoDataAttribute : CompositeDataAttribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassAutoDataAttribute"/> class.
        /// </summary>
        /// <param name="class">The class that provides the data.</param>
        public ClassAutoDataAttribute(Type @class)
            : this(new AutoDataAttribute(), @class)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassAutoDataAttribute"/> class.
        /// </summary>
        /// <param name="autoDataAttribute">An <see cref="DataAttribute"/>.</param>
        /// <param name="class">The class that provides the data.</param>
        /// <remarks>
        /// <para>
        /// This constructor overload exists to enable a derived attribute to
        /// supply a custom <see cref="DataAttribute" /> that again may
        /// contain custom behavior.
        /// </para>
        /// </remarks>
        protected ClassAutoDataAttribute(DataAttribute autoDataAttribute, Type @class)
            : base(new ClassDataAttribute(@class), autoDataAttribute)
        {
            this.AutoDataAttribute = autoDataAttribute ?? throw new ArgumentNullException(nameof(autoDataAttribute));
            this.Class = @class ?? throw new ArgumentNullException(nameof(@class));
        }

        /// <summary>
        /// Gets the attribute used to automatically generate the remaining theory parameters, which are not fixed.
        /// </summary>
        public DataAttribute AutoDataAttribute { get; }

        /// <summary>
        /// Gets the type of the class that provides the data.
        /// </summary>
        public Type Class { get; }
    }
}
