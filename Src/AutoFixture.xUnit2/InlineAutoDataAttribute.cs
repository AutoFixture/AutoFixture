using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using AutoFixture.Xunit2.Internal;
using Xunit.Sdk;

namespace AutoFixture.Xunit2
{
    /// <summary>
    /// Provides a data source for a data theory, with the data coming from inline
    /// values combined with auto-generated data specimens generated by AutoFixture.
    /// </summary>
    [DataDiscoverer(
        "AutoFixture.Xunit2.NoPreDiscoveryDataDiscoverer",
        "AutoFixture.Xunit2")]
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    [CLSCompliant(false)]
    [SuppressMessage("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes",
        Justification = "This attribute is the root of a potential attribute hierarchy.")]
    public class InlineAutoDataAttribute : DataAttribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineAutoDataAttribute" /> class.
        /// </summary>
        /// <param name="values">The data values to pass to the theory.</param>
        public InlineAutoDataAttribute(params object[] values)
            : this(() => new Fixture(), values)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineAutoDataAttribute" /> class.
        /// </summary>
        /// <param name="fixtureFactory">The fixture factory.</param>
        /// <param name="values">The data values to pass to the theory.</param>
        /// <exception cref="ArgumentNullException"></exception>
        protected InlineAutoDataAttribute(Func<IFixture> fixtureFactory, params object[] values)
        {
            this.FixtureFactory = fixtureFactory ?? throw new ArgumentNullException(nameof(fixtureFactory));
            this.Values = values ?? throw new ArgumentNullException(nameof(values));
        }

        /// <summary>
        /// Gets the fixture factory.
        /// </summary>
        public Func<IFixture> FixtureFactory { get; }

        /// <summary>
        /// Gets the data values to pass to the theory.
        /// </summary>
        public object[] Values { get; }

        /// <inheritdoc />
        public override IEnumerable<object[]> GetData(MethodInfo testMethod)
        {
            return new AutoTestCaseSource(this.FixtureFactory, new InlineTestCaseSource(this.Values))
                .GetTestCases(testMethod).Select(x => x.ToArray());
        }
    }
}