using System;
using System.Collections.Generic;
using System.Linq;
using AutoFixture.Kernel;
using AutoFixture.Xunit3.Internal;
using AutoFixture.Xunit3.UnitTest.TestTypes;
using Xunit;

namespace AutoFixture.Xunit3.UnitTest.Internal
{
    public class AutoDataSourceTests
    {
        [Fact]
        public void SutIsTestDataSource()
        {
            // Arrange & Act
            var sut = new AutoDataSource(() => new DelegatingFixture());

            // Assert
            Assert.IsAssignableFrom<IDataSource>(sut);
        }

        [Fact]
        public void SetsPropertiesToExpectedValues()
        {
            // Arrange
            var fixtureFactory = () => new DelegatingFixture();
            var source = new DelegatingDataSource();

            // Act
            var sut = new AutoDataSource(fixtureFactory, source);

            // Assert
            Assert.Same(fixtureFactory, sut.CreateFixture);
            Assert.Same(source, sut.Source);
        }

        [Fact]
        public void GeneratesTestDataUsingFixture()
        {
            // Arrange
            var builder = new CompositeSpecimenBuilder(
                new FixedParameterBuilder<string>("a", "value"),
                new FixedParameterBuilder<int>("b", 1),
                new FixedParameterBuilder<double>("c", 12.2));
            var fixture = new DelegatingFixture
            {
                OnCreate = (r, c) => builder.Create(r, c),
            };
            var sut = new AutoDataSource(() => fixture);
            var method = typeof(SampleTestType).GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

            // Act
            var result = sut.GetData(method!).ToArray();

            // Assert
            Assert.NotNull(result);
            var item = Assert.Single(result);
            Assert.NotNull(item);
            Assert.Equal(3, item.Length);
            Assert.Equal("value", item[0]);
            Assert.Equal(1, item[1]);
            Assert.Equal(12.2, item[2]);
        }

        [Fact]
        public void CombinesTestDataFromSourceWithAutoGeneratedValues()
        {
            // Arrange
            var source = new DelegatingDataSource
            {
                TestData = new[]
                {
                    new object[] { "a", 15 },
                    new object[] { "b", 123 },
                    new object[] { "c", 999 },
                },
            };
            var builder = new FixedParameterBuilder<double>("c", 13.3);
            var fixture = new DelegatingFixture
            {
                OnCreate = (r, c) => builder.Create(r, c),
            };
            var sut = new AutoDataSource(() => fixture, source);
            var method = typeof(SampleTestType)
                .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

            // Act
            var result = sut.GetData(method!).ToArray();

            // Assert
            Assert.NotNull(result);
            Assert.Equal(3, result.Length);
            Assert.Equal(new object[] { "a", 15, 13.3 }, result[0]);
            Assert.Equal(new object[] { "b", 123, 13.3 }, result[1]);
            Assert.Equal(new object[] { "c", 999, 13.3 }, result[2]);
        }

        [Fact]
        public void DoesNotGenerateValuesWhenAllValuesProvidedBySource()
        {
            // Arrange
            var source = new DelegatingDataSource
            {
                TestData = new[]
                {
                    new object[] { "a", 85, 913.12 },
                    new object[] { "b", 519, 73.1 },
                    new object[] { "c", 411, 529.6 },
                },
            };
            var fixture = new DelegatingFixture
            {
                OnCreate = (_, _) => throw new InvalidOperationException("Fixture should not be called"),
            };
            var sut = new AutoDataSource(() => fixture, source);
            var method = typeof(SampleTestType)
                .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

            // Act
            var result = sut.GetData(method!).ToArray();

            // Assert
            Assert.NotNull(result);
            Assert.Equal(3, result.Length);
            Assert.Equal(new object[] { "a", 85, 913.12 }, result[0]);
            Assert.Equal(new object[] { "b", 519, 73.1 }, result[1]);
            Assert.Equal(new object[] { "c", 411, 529.6 }, result[2]);
        }

        [Fact]
        public void ReturnsNoTestDataWhenSourceReturnsNoTestData()
        {
            // Arrange
            var source = new DelegatingDataSource
            {
                TestData = Array.Empty<object[]>(),
            };
            var fixture = new DelegatingFixture();
            var sut = new AutoDataSource(() => fixture, source);
            var method = typeof(SampleTestType)
                .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

            // Act
            var result = sut.GetData(method!).ToArray();

            // Assert
            Assert.Empty(result);
        }

        [Fact]
        public void ThrowsWhenSourceReturnsNull()
        {
            // Arrange
            var source = new DelegatingDataSource { TestData = null };
            var fixture = new DelegatingFixture();
            var sut = new AutoDataSource(() => fixture, source);
            var method = typeof(SampleTestType)
                .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

            // Act & Assert
            Assert.Throws<InvalidOperationException>(
                () => sut.GetData(method!).ToArray());
        }

        [Fact]
        public void DoesNotCustomizeFixtureWhenParametersNotCustomized()
        {
            // Arrange
            var customizations = new List<ICustomization>();
            var fixture = new DelegatingFixture
            {
                OnCustomize = (c) => customizations.Add(c)
            };
            var sut = new AutoDataSource(() => fixture);
            var method = typeof(SampleTestType)
                .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

            // Act
            _ = sut.GetData(method!).ToArray();

            // Assert
            Assert.Empty(customizations);
        }

        [Fact]
        public void CustomizesFixtureUsingParameterCustomizations()
        {
            // Arrange
            var customizations = new List<ICustomization>();
            var fixture = new DelegatingFixture
            {
                OnCustomize = (c) => customizations.Add(c)
            };
            var sut = new AutoDataSource(() => fixture);
            var method = typeof(SampleTestType)
                .GetMethod(nameof(SampleTestType.TestMethodWithCustomizedParameter));

            // Act
            _ = sut.GetData(method!).ToArray();

            // Assert
            Assert.NotEmpty(customizations);
        }

        [Fact]
        public void CustomizationsAreAppliedInExpectedOrder()
        {
            // Arrange
            var customizations = new List<ICustomization>();
            var fixture = new DelegatingFixture
            {
                OnCustomize = (c) => customizations.Add(c)
            };
            var sut = new AutoDataSource(() => fixture);
            var method = typeof(SampleTestType)
                .GetMethod(nameof(SampleTestType.TestMethodWithMultipleCustomizations));

            // Act
            _ = sut.GetData(method!).ToArray();

            // Assert
            Assert.Collection(customizations,
                c => Assert.IsType<FreezeOnMatchCustomization>(c),
                c => Assert.IsType<FreezeOnMatchCustomization>(c),
                c =>
                {
                    var composite = Assert.IsType<CompositeCustomization>(c);
                    var compositeCustomizations = composite.Customizations.ToArray();
                    Assert.Equal(2, compositeCustomizations.Length);
                    Assert.IsType<ConstructorCustomization>(compositeCustomizations[0]);
                    Assert.IsType<FreezeOnMatchCustomization>(compositeCustomizations[1]);
                });
        }
    }
}