using System;
using System.Reflection;
using Ploeh.AutoFixture.Kernel;

namespace Ploeh.AutoFixture.AutoNSubstitute
{
    /// <summary>
    /// An attribute that can be applied to code elements to indicate they should be auto-generated by creating a 
    /// substitute.
    /// </summary>
    /// <remarks>
    /// When this attribute is applied to a parameter in a data-driven test, such as xUnit's <code>[Theory]</code>, 
    /// the test must also have a test conventions attribute that enables automatic generation of the 
    /// <see cref="Fixture"/> with the <see cref="AutoNSubstituteCustomization"/>. For xUnit, this is done by deriving 
    /// the test conventions attribute from the <code>AutoDataAttribute</code> supplied by the AutoFixture for xUnit.net.
    /// </remarks>
    [AttributeUsage(
        AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.Field,
        AllowMultiple = false)]
    public sealed class SubstituteAttribute : CustomizeAttribute
    {
        public override ICustomization GetCustomization(ParameterInfo parameter)
        {
            var type = parameter.ParameterType;
            return new ConcreteSubstituteCustomization(type);
        }

        private class ConcreteSubstituteCustomization : ICustomization
        {
            private readonly Type type;

            public ConcreteSubstituteCustomization(Type type)
            {
                this.type = type;
            }

            public void Customize(IFixture fixture)
            {
                var builder = new FilteringSpecimenBuilder(
                    new MethodInvoker(new NSubstituteMethodQuery()),
                    new ExactTypeSpecification(type));

                fixture.Customizations.Insert(0, builder);
            }
        }
    }
}
