using System;
using System.Reflection;

namespace Ploeh.AutoFixture.AutoNSubstitute
{
    /// <summary>
    /// An attribute that can be applied to code elements to indicate they should be auto-generated by creating a 
    /// substitute.
    /// </summary>
    /// <remarks>
    /// When this attribute is applied to a parameter in a data-driven test, such as xUnit's <code>[Theory]</code>, 
    /// the test must also have a test conventions attribute that enables automatic generation of the 
    /// <see cref="Fixture"/> with the <see cref="AutoNSubstituteCustomization"/>. For xUnit, this is done by deriving 
    /// the test conventions attribute from the <code>AutoDataAttribute</code> supplied by the AutoFixture for xUnit.net.
    /// </remarks>
    [AttributeUsage(
        AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.Field,
        AllowMultiple = false)]
    public sealed class SubstituteAttribute : CustomizeAttribute
    {
        /// <summary>
        /// Gets a <see cref="ConcreteClassNSubstituteCustomization"/> configured
        /// to match requests based on the <see cref="Type"/>.
        /// </summary>
        /// <param name="parameter">The parameter for which the customization is requested.</param>
        /// <returns>The instance of the <see cref="ConcreteClassNSubstituteCustomization"/> class.</returns>
        public override ICustomization GetCustomization(ParameterInfo parameter)
        {
            if (parameter == null)
            {
                throw new ArgumentNullException(nameof(parameter));
            }

            var type = parameter.ParameterType;
            return new ConcreteClassNSubstituteCustomization(type);
        }
    }
}
