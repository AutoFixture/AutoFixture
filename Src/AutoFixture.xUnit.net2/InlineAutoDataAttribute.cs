using System;
using System.Collections.Generic;
using System.Reflection;
using Xunit.Sdk;

namespace Ploeh.AutoFixture.Xunit2
{
    internal class InlineDataAttribute : DataAttribute
    {
        private readonly object[] dataValues;

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineDataAttribute"/> class.
        /// </summary>
        /// <param name="dataValues">The data values to pass to the theory</param>
        public InlineDataAttribute(params object[] dataValues)
        {
            this.dataValues = dataValues ?? new object[] { null };
        }

        /// <summary>
        /// Gets the data values.
        /// </summary>
        public object[] DataValues
        {
            get { return dataValues; }
        }

        /// <summary>
        /// Returns the data to be used to test the theory.
        /// </summary>
        /// <param name="methodUnderTest">The method that is being tested</param>
        /// <returns>The theory data, in table form</returns>
        public override IEnumerable<object[]> GetData(MethodInfo methodUnderTest)
        {
            yield return dataValues;
        }
    }

    /// <summary>
    /// Provides a data source for a data theory, with the data coming from inline
    /// values combined with auto-generated data specimens generated by AutoFixture.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    [CLSCompliant(false)]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes", Justification = "This attribute is the root of a potential attribute hierarchy.")]
    public class InlineAutoDataAttribute : CompositeDataAttribute
    {
        private readonly AutoDataAttribute autoDataAttribute;
        private readonly IEnumerable<object> values;

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineAutoDataAttribute"/> class.
        /// </summary>
        /// <param name="values">The data values to pass to the theory.</param>
        public InlineAutoDataAttribute(params object[] values)
            : this(new AutoDataAttribute(), values)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineAutoDataAttribute"/> class.
        /// </summary>
        /// <param name="autoDataAttribute">An <see cref="AutoDataAttribute"/>.</param>
        /// <param name="values">The data values to pass to the theory.</param>
        public InlineAutoDataAttribute(AutoDataAttribute autoDataAttribute, params object[] values)
            : base(new DataAttribute[] { new InlineDataAttribute(values), autoDataAttribute })
        {
            this.autoDataAttribute = autoDataAttribute;
            this.values = values;
        }

        /// <summary>
        /// Gets the data values to pass to the theory.
        /// </summary>
        public IEnumerable<object> Values
        {
            get { return this.values; }
        }

        /// <summary>
        /// Gets the <see cref="AutoDataAttribute"/> encapsulated by this instance.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If the constructor overload wich takes an explicit instance of
        /// <see cref="AutoDataAttribute" /> is used, this property exposes that instance.
        /// </para>
        /// </remarks>
        /// <seealso cref="InlineAutoDataAttribute(AutoDataAttribute, object[])"/>
        public AutoDataAttribute AutoDataAttribute
        {
            get { return this.autoDataAttribute; }
        }
    }
}