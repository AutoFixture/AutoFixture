<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FakeItEasy</name>
    </assembly>
    <members>
        <member name="T:FakeItEasy.A">
            <summary>
            Provides methods for generating fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.A.Fake``1">
            <summary>
            Creates a fake object of the type T.
            </summary>
            <typeparam name="T">The type of fake object to create.</typeparam>
            <returns>A fake object.</returns>
        </member>
        <member name="M:FakeItEasy.A.Fake``1(System.Action{FakeItEasy.Creation.IFakeOptionsBuilder{``0}})">
            <summary>
            Creates a fake object of the type T.
            </summary>
            <typeparam name="T">The type of fake object to create.</typeparam>
            <param name="options">A lambda where options for the built fake object cna be specified.</param>
            <returns>A fake object.</returns>
        </member>
        <member name="M:FakeItEasy.A.CollectionOfFake``1(System.Int32)">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <typeparam name="T">The type of fakes to create.</typeparam>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <returns>A collection of fake objects of the specified type.</returns>
        </member>
        <member name="M:FakeItEasy.A.Dummy``1">
            <summary>
            Gets a dummy object of the specified type. The value of a dummy object
            should be irrelevant. Dummy objects should not be configured.
            </summary>
            <typeparam name="T">The type of dummy to return.</typeparam>
            <returns>A dummy object of the specified type.</returns>
            <exception cref="T:System.ArgumentException">Dummies of the specified type can not be created.</exception>
        </member>
        <member name="M:FakeItEasy.A.Equals(System.Object,System.Object)">
            <summary>
            Gets a value indicating if the two objects are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns>True if the two objects are equal.</returns>
        </member>
        <member name="M:FakeItEasy.A.ReferenceEquals(System.Object,System.Object)">
            <summary>
            Gets a value indicating if the two objects are the same reference.
            </summary>
            <param name="objA">The obj A.</param>
            <param name="objB">The obj B.</param>
            <returns>True if the objects are the same reference.</returns>
        </member>
        <member name="M:FakeItEasy.A.CallTo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Configures a call to a faked object.
            </summary>
            <param name="callSpecification">An expression where the configured memeber is called.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.A.CallTo(System.Object)">
            <summary>
            Gets a configuration object allowing for further configuration of
            any calll to the specified faked object.
            </summary>
            <param name="fake">
            The fake to configure.
            </param>
            <returns>
            A configuration object.
            </returns>
        </member>
        <member name="M:FakeItEasy.A.CallTo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Configures a call to a faked object.
            </summary>
            <typeparam name="T">The type of member on the faked object to configure.</typeparam>
            <param name="callSpecification">An expression where the configured memeber is called.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.A`1">
            <summary>
            Provides an api entry point for constraining arguments of fake object calls.
            </summary>
            <typeparam name="T">The type of argument to validate.</typeparam>
        </member>
        <member name="P:FakeItEasy.A`1.That">
            <summary>
            Gets an argument constraint object that will be used to constrain a method call argument.
            </summary>
        </member>
        <member name="P:FakeItEasy.A`1._">
            <summary>
            Gets a constraint that considers any value of an argument as valid. (This is a shortcut for the "Ignored"-property.)
            </summary>
        </member>
        <member name="P:FakeItEasy.A`1.Ignored">
            <summary>
            Gets a constraint that considers any value of an argument as valid.
            </summary>
        </member>
        <member name="T:FakeItEasy.Any">
            <summary>
            Provides configuration for any (not a specific) call on a faked object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Any.CallTo(System.Object)">
            <summary>
            Gets a configuration object allowing for further configuration of
            any calll to the specified faked object.
            </summary>
            <param name="fakedObject">The faked object to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Any.Equals(System.Object,System.Object)">
            <summary>
            Gets a value indicating if the two objects are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns>True if the two objects are equal.</returns>
        </member>
        <member name="M:FakeItEasy.Any.ReferenceEquals(System.Object,System.Object)">
            <summary>
            Gets a value indicating if the two objects are the same reference.
            </summary>
            <param name="objA">The obj A.</param>
            <param name="objB">The obj B.</param>
            <returns>True if the objects are the same reference.</returns>
        </member>
        <member name="T:FakeItEasy.ArgumentValueFormatter`1">
            <summary>
            Provides string formatting for arguments of type T when written in 
            call lists.
            </summary>
        </member>
        <member name="T:FakeItEasy.IArgumentValueFormatter">
            <summary>
            Provides string formatting for arguments when written in 
            call lists.
            </summary>
        </member>
        <member name="M:FakeItEasy.IArgumentValueFormatter.GetArgumentValueAsString(System.Object)">
            <summary>
            Gets a string representing the specified argument value.
            </summary>
            <param name="argumentValue">The argument value to get as a string.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="P:FakeItEasy.IArgumentValueFormatter.ForType">
            <summary>
            The type of arguments this formatter works on.
            </summary>
        </member>
        <member name="P:FakeItEasy.IArgumentValueFormatter.Priority">
            <summary>
            The priority of the formatter, when two formatters are
            registered for the same type the one with the highest
            priority is used.
            </summary>
        </member>
        <member name="M:FakeItEasy.ArgumentValueFormatter`1.GetArgumentValueAsString(System.Object)">
            <summary>
            Gets a string representing the specified argument value.
            </summary>
            <param name="argumentValue">The argument value to get as a string.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValueFormatter`1.GetStringValue(`0)">
            <summary>
            Gets a string representing the specified argument value.
            </summary>
            <param name="argumentValue">The argument value to get as a string.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="P:FakeItEasy.ArgumentValueFormatter`1.ForType">
            <summary>
            The type of arguments this formatter works on.
            </summary>
            <value></value>
        </member>
        <member name="P:FakeItEasy.ArgumentValueFormatter`1.Priority">
            <summary>
            The priority of the formatter, when two formatters are
            registered for the same type the one with the highest
            priority is used.
            </summary>
            <value></value>
        </member>
        <member name="T:FakeItEasy.Configuration.BuildableCallRule">
            <summary>
            Provides the base for rules that can be built using the FakeConfiguration.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectCallRuleWithDescription">
            <summary>
            Represents a call rule that has a description of the calls the
            rule is applicable to.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectCallRule">
            <summary>
            Allows for intercepting call to a fake object and
            act upon them.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectCallRule.IsApplicableTo(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets wether this interceptor is applicable to the specified
            call, if true is returned the Apply-method of the interceptor will
            be called.
            </summary>
            <param name="fakeObjectCall">The call to check for applicability.</param>
            <returns>True if the interceptor is applicable.</returns>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectCallRule.Apply(FakeItEasy.Core.IInterceptedFakeObjectCall)">
            <summary>
            Applies an action to the call, might set a return value or throw
            an exception.
            </summary>
            <param name="fakeObjectCall">The call to apply the interceptor to.</param>
        </member>
        <member name="P:FakeItEasy.Core.IFakeObjectCallRule.NumberOfTimesToCall">
            <summary>
            Gets the number of times this call rule is valid, if it's set
            to null its infinitely valid.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectCallRuleWithDescription.WriteDescriptionOfValidCall(FakeItEasy.IOutputWriter)">
            <summary>
            Writes a description of calls the rule is applicable to.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.IsApplicableTo(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets if this rule is applicable to the specified call.
            </summary>
            <param name="fakeObjectCall">The call to validate.</param>
            <returns>True if the rule applies to the call.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.WriteDescriptionOfValidCall(FakeItEasy.IOutputWriter)">
            <summary>
            Writes a description of calls the rule is applicable to.
            </summary>
            <param name="writer">The writer to write the description to.</param>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.Applicator">
            <summary>
            An action that is called by the Apply method to apply this
            rule to a fake object call.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.Actions">
            <summary>
            A collection of actions that should be invoked when the configured
            call is made.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.OutAndRefParametersValues">
            <summary>
            Values to apply to output and reference variables.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.CallBaseMethod">
            <summary>
            Gets or sets wether the base mehtod of the fake object call should be
            called when the fake object call is made.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.NumberOfTimesToCall">
            <summary>
            The number of times the configured rule should be used.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.DescriptionOfValidCall">
            <summary>
            Gets a description of calls the rule is applicable to.
            </summary>
            <value></value>
        </member>
        <member name="T:FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified">
            <summary>
            Configuration for any call to a faked object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IWhereConfiguration`1.Where(System.Func{FakeItEasy.Core.IFakeObjectCall,System.Boolean},System.Action{FakeItEasy.IOutputWriter})">
            <summary>
            Applies a predicate to constrain which calls will be considered for interception.
            </summary>
            <param name="predicate">A predicate for a fake object call.</param>
            <param name="descriptionWriter">An action that writes a description of the predicate
            to the output.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IVoidArgumentValidationConfiguration">
            <summary>
            Provides configuration methods for methods that does not have a return value and
            allows the use to specify validations for arguments.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IVoidConfiguration">
            <summary>
            Provides configuration methods for methods that does not have a return value.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IExceptionThrowerConfiguration">
            <summary>
            Configuration that lets the developer specify that an exception should be
            thrown by a fake object call.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IHideObjectMembers">
            <summary>
            Hides standard Object members to make fluent interfaces
            easier to read. Found in the source of Autofac: http://code.google.com/p/autofac/
            Based on blog post by @kzu here:
            http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IHideObjectMembers.ToString">
            <summary>
            Hides the ToString-method.
            </summary>
            <returns>A string representation of the implementing object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IHideObjectMembers.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IHideObjectMembers.GetType">
            <summary>
            Gets the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration.Throws(System.Exception)">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exception">The exception to throw.</param>
            <returns>Configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.ICallbackConfiguration`1">
            <summary>
            Configuration for callbacks of fake object calls.
            </summary>
            <typeparam name="TInterface">The type of interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.ICallbackConfiguration`1.Invokes(System.Action{FakeItEasy.Core.IFakeObjectCall})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.ICallBaseConfiguration">
            <summary>
            Configuration that lets you specify that a fake object call should call it's base method.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.ICallBaseConfiguration.CallsBaseMethod">
            <summary>
            When the configured method or methods are called the call
            will be delegated to the base method of the faked method.
            </summary>
            <returns>A configuration object.</returns>
            <exception cref="T:System.InvalidOperationException">The fake object is of an abstract type or an interface
            and no base method exists.</exception>
        </member>
        <member name="T:FakeItEasy.Configuration.IOutAndRefParametersConfiguration">
            <summary>
            Lets the developer configure output values of out and ref parameters.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration.AssignsOutAndRefParameters(System.Object[])">
            <summary>
            Specifies output values for out and ref parameters. Specify the values in the order
            the ref and out parameters has in the configured call, any non out and ref parameters are ignored.
            </summary>
            <param name="values">The values.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IAssertConfiguration">
            <summary>
            Allows the developer to assert on a call that's configured.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IAssertConfiguration.MustHaveHappened(FakeItEasy.Repeated)">
            <summary>
            Asserts that the configured call has happened the number of times
            constrained by the repeatConstraint parameter.
            </summary>
            <param name="repeatConstraint">A constraint for how many times the call
            must have happened.</param>
            <exception cref="T:FakeItEasy.ExpectationException">The call has not been called a number of times
            that passes the repeat constraint.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IVoidConfiguration.DoesNothing">
            <summary>
            Configures the specified call to do nothing when called.
            </summary>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IArgumentValidationConfiguration`1">
            <summary>
            Provides configurations to validate arguments of a fake object call.
            </summary>
            <typeparam name="TInterface">The type of interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IArgumentValidationConfiguration`1.WhenArgumentsMatch(System.Func{FakeItEasy.ArgumentCollection,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified.WithReturnType``1">
            <summary>
            Matches calls that has the return type specified in the generic type parameter.
            </summary>
            <typeparam name="TMember">The return type of the members to configure.</typeparam>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.IoC.Module">
            <summary>
            Manages registration of a set of components in a DictionaryContainer.
            </summary>
        </member>
        <member name="M:FakeItEasy.IoC.Module.RegisterDependencies(FakeItEasy.IoC.DictionaryContainer)">
            <summary>
            Registers the components of this module.
            </summary>
            <param name="container">The container to register components in.</param>
        </member>
        <member name="T:FakeItEasy.Configuration.IRecordingCallRuleFactory">
            <summary>
            A factory that creates instances of the RecordingCallRuleType.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IRecordingCallRuleFactory.Create``1(FakeItEasy.Core.FakeManager,FakeItEasy.Configuration.RecordedCallRule)">
            <summary>
            Creates the specified fake object.
            </summary>
            <typeparam name="TFake">The type of the fake.</typeparam>
            <param name="fakeObject">The fake object the rule belongs to.</param>
            <param name="recordedRule">The rule that's being recorded.</param>
            <returns>A RecordingCallRule instance.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IStartConfigurationFactory">
            <summary>
            A factory responsible for creating start configuration for fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfigurationFactory.CreateConfiguration``1(FakeItEasy.Core.FakeManager)">
            <summary>
            Creates a start configuration for the specified fake object that fakes the
            specified type.
            </summary>
            <typeparam name="TFake">The type of the fake object.</typeparam>
            <param name="fakeObject">The fake object to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.FakeConfigurationException">
            <summary>
            An exception that can be thrown when something goes wrong with the configuration
            of a fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.FakeConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Configuration.FakeConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.FakeConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Configuration.FakeConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.Configuration.FakeConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Configuration.FakeConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:FakeItEasy.Configuration.FakeConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Configuration.FakeConfigurationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:FakeItEasy.Configuration.IFakeConfigurationManager">
            <summary>
            Handles the configuration of fake object given an expression specifying
            a call on a faked object.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IAfterCallSpecifiedConfiguration">
            <summary>
            Lets you set up expectations and configure repeat for the configured call.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IRepeatConfiguration">
            <summary>
            Provides configuration for method calls that has a return value.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IRepeatConfiguration.NumberOfTimes(System.Int32)">
            <summary>
            Specifies the number of times for the configured event.
            </summary>
            <param name="numberOfTimesToRepeat">The number of times to repeat.</param>
        </member>
        <member name="T:FakeItEasy.Configuration.IAfterCallSpecifiedWithOutAndRefParametersConfiguration">
            <summary>
            A combination of the IAfterCallSpecifiedConfiguration and IOutAndRefParametersConfiguration
            interfaces.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IReturnValueArgumentValidationConfiguration`1">
            <summary>
            Configures a call that returns a value and allows the use to
            specify validations for arguments.
            </summary>
            <typeparam name="TMember">The type of the member.</typeparam>
        </member>
        <member name="T:FakeItEasy.Configuration.IReturnValueConfiguration`1">
            <summary>
            Configures a call that returns a value.
            </summary>
            <typeparam name="TMember">The type of the member.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IReturnValueConfiguration`1.ReturnsLazily(System.Func{FakeItEasy.Core.IFakeObjectCall,`0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IRecordingConfiguration">
            <summary>
            Configurations for when a configured call is recorded.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IRecordingConfigurationWithArgumentValidation">
            <summary>
            Provides configuration from VisualBasic.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IStartConfiguration`1">
            <summary>
            Provides methods for configuring a fake object.
            </summary>
            <typeparam name="TFake">The type of fake object.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfiguration`1.CallsTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the behavior of the fake object when a call that matches the specified
            call happens.
            </summary>
            <typeparam name="TMember">The type of the return value of the member.</typeparam>
            <param name="callSpecification">An expression that specifies the calls to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfiguration`1.CallsTo(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Configures the behavior of the fake object when a call that matches the specified
            call happens.
            </summary>
            <param name="callSpecification">An expression that specifies the calls to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfiguration`1.AnyCall">
            <summary>
            Configures the behavior of the fake object whan a call is made to any method on the
            object.
            </summary>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.RecordedCallRule">
            <summary>
            A call rule that has been recorded.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.RecordingCallRule`1">
            <summary>
            A call rule that "sits and waits" for the next call, when
            that call occurs the recorded rule is added for that call.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.ICallCollectionAndCallMatcherAccessor">
            <summary>
            Provides access to a set of calls and a call matcher for these calls.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.ICallMatcherAccessor">
            <summary>
            Provides access to a call matcher.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.ICallMatcherAccessor.Matcher">
            <summary>
            Gets a call predicate that can be used to check if a fake object call matches
            the specified constraint.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.ICallCollectionAndCallMatcherAccessor.Calls">
            <summary>
            A set of calls.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.RuleBuilder.Factory">
            <summary>
            Represents a delegate that creates a configuration object from
            a fake object and the rule to build.
            </summary>
            <param name="fakeObject">The fake object the rule is for.</param>
            <param name="ruleBeingBuilt">The rule that's being built.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Core.ICallMatcher">
            <summary>
            Represents a predicate that matches a fake object call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.ICallMatcher.Matches(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets a value indicating whether the call matches the predicate.
            </summary>
            <param name="fakeObjectCall">The call to match.</param>
            <returns>True if the call matches the predicate.</returns>
        </member>
        <member name="T:FakeItEasy.Core.ArgumentInfo">
            <summary>
            Represents an argument and a dummy value to use for that argument.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.ArgumentInfo.#ctor(System.Boolean,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.ArgumentInfo"/> class.
            </summary>
            <param name="wasSuccessfullyResolved">A value indicating if the dummy value was successfully resolved.</param>
            <param name="typeOfArgument">The type of argument.</param>
            <param name="resolvedValue">The resolved value.</param>
        </member>
        <member name="P:FakeItEasy.Core.ArgumentInfo.WasSuccessfullyResolved">
            <summary>
            Gets a value indicating if a dummy argument value was successfully
            resolved.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.ArgumentInfo.TypeOfArgument">
            <summary>
            Gets the type of the argument.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.ArgumentInfo.ResolvedValue">
            <summary>
            Gets the resolved value.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.CallInterceptedEventArgs">
            <summary>
            Represents an event that happens when a call has been intercepted by a proxy.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.CallInterceptedEventArgs.#ctor(FakeItEasy.Core.IWritableFakeObjectCall)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.CallInterceptedEventArgs"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="P:FakeItEasy.Core.CallInterceptedEventArgs.Call">
            <summary>
            Gets the call that was intercepted.
            </summary>
            <value>The call.</value>
        </member>
        <member name="T:FakeItEasy.Core.CallRuleMetadata">
            <summary>
            Keeps track of metadata for interceptions.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.CallRuleMetadata.HasNotBeenCalledSpecifiedNumberOfTimes">
            <summary>
            Gets whether the rule has been called the number of times specified or not.
            </summary>
            <returns>True if the rule has not been called the number of times specified.</returns>
        </member>
        <member name="P:FakeItEasy.Core.CallRuleMetadata.CalledNumberOfTimes">
            <summary>
            Gets or sets the number of times the rule has been used.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.CallRuleMetadata.Rule">
            <summary>
            Gets or sets the rule this metadata object is tracking.
            </summary>
        </member>
        <member name="T:FakeItEasy.IArgumentConstraintManager`1">
            <summary>
            Manages attaching of argument constraints.
            </summary>
            <typeparam name="T">The type of argument to constrain.</typeparam>
        </member>
        <member name="M:FakeItEasy.IArgumentConstraintManager`1.Matches(System.Func{`0,System.Boolean},System.Action{FakeItEasy.IOutputWriter})">
            <summary>
            Constrains the argument with a predicate.
            </summary>
            <param name="predicate">The predicate that should constrain the argument.</param>
            <param name="descriptionWriter">An action that will be write a description of the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="P:FakeItEasy.IArgumentConstraintManager`1.Not">
            <summary>
            Inverts the logic of the matches method.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IArgumentConstraint">
            <summary>
            Validates an argument, checks that it's valid in a specific fake call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IArgumentConstraint.WriteDescription(FakeItEasy.IOutputWriter)">
            <summary>
            Writes a description of the arguemnt constraint to the specified writer.
            </summary>
            <param name="writer">
            The writer.
            </param>
        </member>
        <member name="M:FakeItEasy.Core.IArgumentConstraint.IsValid(System.Object)">
            <summary>
            Gets whether the argument is valid.
            </summary>
            <param name="argument">The argument to validate.</param>
            <returns>True if the argument is valid.</returns>
        </member>
        <member name="T:FakeItEasy.Core.DefaultFakeManagerAccessor">
            <summary>
            Default implementation of the fake manager attacher.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeManagerAccessor">
            <summary>
            Attaches a fake manager to the proxy so that intercepted
            calls can be configured.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeManagerAccessor.AttachFakeManagerToProxy(System.Type,System.Object,FakeItEasy.Creation.ICallInterceptedEventRaiser)">
            <summary>
            Attaches a fakemanager to the specified proxy, listening to
            the event raiser.
            </summary>
            <param name="proxy">The proxy to attach to.</param>
            <param name="typeOfFake">The type of the fake object proxy.</param>
            <param name="eventRaiser">The event raiser to listen to.</param>
        </member>
        <member name="M:FakeItEasy.Core.IFakeManagerAccessor.GetFakeManager(System.Object)">
            <summary>
            Gets the fake manager associated with the proxy.
            </summary>
            <param name="proxy">The proxy to get the manager from.</param>
            <returns>A fake manager</returns>
        </member>
        <member name="M:FakeItEasy.Core.DefaultFakeManagerAccessor.AttachFakeManagerToProxy(System.Type,System.Object,FakeItEasy.Creation.ICallInterceptedEventRaiser)">
            <summary>
            Attaches a fakemanager to the specified proxy, listening to
            the event raiser.
            </summary>
            <param name="typeOfFake">The type of the fake object proxy.</param>
            <param name="proxy">The proxy to attach to.</param>
            <param name="eventRaiser">The event raiser to listen to.</param>
        </member>
        <member name="M:FakeItEasy.Core.DefaultFakeManagerAccessor.GetFakeManager(System.Object)">
            <summary>
            Gets the fake manager associated with the proxy.
            </summary>
            <param name="proxy">The proxy to get the manager from.</param>
            <returns>A fake manager</returns>
        </member>
        <member name="T:FakeItEasy.Creation.ITaggable">
            <summary>
            Represents an object that can be tagged with another object. When implemented
            by a proxy returned from an <see cref="T:FakeItEasy.Creation.IProxyGenerator"/> FakeItEasy uses the tag
            to store a reference to the <see cref="T:FakeItEasy.Core.FakeManager"/> that handles that proxy.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.ITaggable.Tag">
            <summary>
            Gets or sets the tag for the taggable object.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.DefaultFakeObjectCallFormatter">
            <summary>
            The default implementation of the IFakeObjectCallFormatter interface.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectCallFormatter">
            <summary>
            Provides string formatting for fake object calls.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectCallFormatter.GetDescription(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets a human readable description of the specified
            fake object call.
            </summary>
            <param name="call">The call to get a description for.</param>
            <returns>A description of the call.</returns>
        </member>
        <member name="M:FakeItEasy.Core.DefaultFakeObjectCallFormatter.GetDescription(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets a human readable description of the specified
            fake object call.
            </summary>
            <param name="call">The call to get a description for.</param>
            <returns>A description of the call.</returns>
        </member>
        <member name="T:FakeItEasy.Core.DefaultFakeWrapperConfigurer">
            <summary>
            Handles configuring of fake objects to delegate all their calls to a wrapped instance.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeWrapperConfigurer">
            <summary>
            Manages configuration of fake objects to wrap instances.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeWrapperConfigurer.ConfigureFakeToWrap(System.Object,System.Object,FakeItEasy.SelfInitializedFakes.ISelfInitializingFakeRecorder)">
            <summary>
            Configures the specified faked object to wrap the specified instance.
            </summary>
            <param name="fakedObject">The faked object to configure.</param>
            <param name="wrappedInstance">The instance to wrap.</param>
            <param name="recorder">The recorder to use, null if no recording should be made.</param>
        </member>
        <member name="M:FakeItEasy.Core.DefaultFakeWrapperConfigurer.ConfigureFakeToWrap(System.Object,System.Object,FakeItEasy.SelfInitializedFakes.ISelfInitializingFakeRecorder)">
            <summary>
            Configures the specified faked object to wrap the specified instance.
            </summary>
            <param name="fakedObject">The faked object to configure.</param>
            <param name="wrappedInstance">The instance to wrap.</param>
            <param name="recorder">The recorder to use, null if no recording should be made.</param>
        </member>
        <member name="T:FakeItEasy.Core.DelegateFakeObjectContainer">
            <summary>
            A fake object container where delegates can be registered that are used to
            resolve fake objects.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectContainer">
            <summary>
            A container that can create fake objects.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectConfigurator">
            <summary>
            Handles global configuration of fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectConfigurator.ConfigureFake(System.Type,System.Object)">
            <summary>
            Applies base configuration to a fake object.
            </summary>
            <param name="typeOfFake">The type the fake object represents.</param>
            <param name="fakeObject">The fake object to configure.</param>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectContainer.TryCreateDummyObject(System.Type,System.Object@)">
            <summary>
            Creates a dummy object of the specified type using the specified arguments if it's
            supported by the container, returns a value indicating if it's supported or not.
            </summary>
            <param name="typeOfDummy">The type of dummy object to create.</param>
            <param name="fakeObject">The dummy object that was created if the method returns true.</param>
            <returns>True if a dummy object can be created.</returns>
        </member>
        <member name="M:FakeItEasy.Core.DelegateFakeObjectContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.DelegateFakeObjectContainer"/> class. 
            Creates a new instance of the DelegateFakeObjectContainer.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.DelegateFakeObjectContainer.TryCreateDummyObject(System.Type,System.Object@)">
            <summary>
            Creates a fake object of the specified type using the specified arguments if it's
            supported by the container, returns a value indicating if it's supported or not.
            </summary>
            <param name="typeOfDummy">The type of dummy object to create.</param>
            <param name="fakeObject">The fake object that was created if the method returns true.</param>
            <returns>True if a fake object can be created.</returns>
        </member>
        <member name="M:FakeItEasy.Core.DelegateFakeObjectContainer.ConfigureFake(System.Type,System.Object)">
            <summary>
            Configures the fake.
            </summary>
            <param name="typeOfFake">The type of fake.</param>
            <param name="fakeObject">The fake object.</param>
        </member>
        <member name="M:FakeItEasy.Core.DelegateFakeObjectContainer.Register``1(System.Func{``0})">
            <summary>
            Registers the specified fake delegate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fakeDelegate">The fake delegate.</param>
        </member>
        <member name="T:FakeItEasy.Core.DynamicContainer">
            <summary>
            A IFakeObjectContainer implementation that uses mef to load IFakeDefinitions and
            IFakeConfigurations.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.DynamicContainer.#ctor(System.Collections.Generic.IEnumerable{FakeItEasy.IDummyDefinition},System.Collections.Generic.IEnumerable{FakeItEasy.IFakeConfigurator})">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.DynamicContainer"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.DynamicContainer.TryCreateDummyObject(System.Type,System.Object@)">
            <summary>
            Creates a fake object of the specified type using the specified arguments if it's
            supported by the container, returns a value indicating if it's supported or not.
            </summary>
            <param name="typeOfDummy">The type of fake object to create.</param>
            <param name="fakeObject">The fake object that was created if the method returns true.</param>
            <returns>True if a fake object can be created.</returns>
        </member>
        <member name="M:FakeItEasy.Core.DynamicContainer.ConfigureFake(System.Type,System.Object)">
            <summary>
            Applies base configuration to a fake object.
            </summary>
            <param name="typeOfFake">The type the fake object represents.</param>
            <param name="fakeObject">The fake object to configure.</param>
        </member>
        <member name="T:FakeItEasy.Core.FakeCreationException">
            <summary>
            An exception that is thrown when there was an error creating a fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeCreationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeCreationException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeCreationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeCreationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeCreationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:FakeItEasy.Core.FakeManager">
            <summary>
            The central point in the API for proxied fake objects handles interception
            of fake object calls by using a set of rules. User defined rules can be inserted
            by using the AddRule-method.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeManager"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.AddRuleFirst(FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Adds a call rule to the fake object.
            </summary>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.AddRuleLast(FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Adds a call rule last in the list of user rules, meaning it has the lowest priority possible.
            </summary>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.RemoveRule(FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Removes the specified rule for the fake object.
            </summary>
            <param name="rule">The rule to remove.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.AddInterceptionListener(FakeItEasy.Core.IInterceptionListener)">
            <summary>
            Adds an interception listener to the manager.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.ClearUserRules">
            <summary>
            Removes any specified user rules.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.FakeManager.Object">
            <summary>
            Gets the faked object.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.FakeManager.FakeObjectType">
            <summary>
            Gets the faked type.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.FakeManager.Rules">
            <summary>
            Gets the interceptions that are currently registered with the fake object.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.FakeManager.RecordedCallsInScope">
            <summary>
            Gets a collection of all the calls made to the fake object within the current scope.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.FakeManager.Factory">
            <summary>
            A delegate responsible for creating FakeObject instances.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FakeItEasy.Core.IInterceptedFakeObjectCall">
            <summary>
            Represents a call to a fake object at interception time.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IWritableFakeObjectCall">
            <summary>
            Represents a fake object call that can be edited.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectCall">
            <summary>
            Represents a call to a fake object.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IFakeObjectCall.Method">
            <summary>
            The method that's called.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IFakeObjectCall.Arguments">
            <summary>
            The arguments used in the call.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IFakeObjectCall.FakedObject">
            <summary>
            The faked object the call is performed on.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IWritableFakeObjectCall.SetReturnValue(System.Object)">
            <summary>
            Sets the return value of the call.
            </summary>
            <param name="value">The return value to set.</param>
        </member>
        <member name="M:FakeItEasy.Core.IWritableFakeObjectCall.CallBaseMethod">
            <summary>
            Calls the base method of the faked type.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IWritableFakeObjectCall.SetArgumentValue(System.Int32,System.Object)">
            <summary>
            Sets the value of the argument at the specified index in the parameters list.
            </summary>
            <param name="index">The index of the argument to set the value of.</param>
            <param name="value">The value to set to the argument.</param>
        </member>
        <member name="M:FakeItEasy.Core.IWritableFakeObjectCall.AsReadOnly">
            <summary>
            Freezes the call so that it can no longer be modified.
            </summary>
            <returns>A completed fake object call.</returns>
        </member>
        <member name="M:FakeItEasy.Core.IInterceptedFakeObjectCall.DoNotRecordCall">
            <summary>
            Sets that the call should not be recorded by the fake manager.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.FakeScope">
            <summary>
            Represents a scope for fake objects, calls configured within a scope
            are only valid within that scope. Only calls made wihtin a scope
            are accessible from within a scope so for example asserts will only
            assert on those calls done within the scope.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeScope">
            <summary>
            Provides access to all calls made to fake objects within a scope.
            Scopes calls so that only calls made within the scope are visible.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeScope.Create">
            <summary>
            Creates a new scope and sets it as the current scope.
            </summary>
            <returns>The created scope.</returns>
        </member>
        <member name="M:FakeItEasy.Core.FakeScope.Create(FakeItEasy.Core.IFakeObjectContainer)">
            <summary>
            Creates a new scope and sets it as the current scope, using the specified
            container as the container for the new scope.
            </summary>
            <param name="container">The container to usee for the new scope.</param>
            <returns>The created scope.</returns>
        </member>
        <member name="M:FakeItEasy.Core.FakeScope.Dispose">
            <summary>
            Closes the scope.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeScope.AddInterceptedCall(FakeItEasy.Core.FakeManager,FakeItEasy.Core.ICompletedFakeObjectCall)">
            <summary>
            Adds an intercepted call to the current scope.
            </summary>
            <param name="fakeManager">The fake object.</param>
            <param name="call">The call that is intercepted.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeScope.AddRuleFirst(FakeItEasy.Core.FakeManager,FakeItEasy.Core.CallRuleMetadata)">
            <summary>
            Adds a fake object call to the current scope.
            </summary>
            <param name="fakeManager">The fake object.</param>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="T:FakeItEasy.Core.IInterceptionListener">
            <summary>
            Represents a listener for fake object calls, can be plugged into a
            FakeManager instance to listen to all intercepted calls.
            </summary>
            <remarks>The OnBeforeCallIntercepted method will be invoked before the OnBeforeCallIntercepted method of any
            previously added listener. The OnAfterCallIntercepted method will be invoked after the OnAfterCallIntercepted
            method of any previously added listener.</remarks>
        </member>
        <member name="M:FakeItEasy.Core.IInterceptionListener.OnBeforeCallIntercepted(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Called when the interception begins but before any call rules
            has been applied.
            </summary>
            <param name="call">The intercepted call.</param>
        </member>
        <member name="M:FakeItEasy.Core.IInterceptionListener.OnAfterCallIntercepted(FakeItEasy.Core.ICompletedFakeObjectCall,FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Called when the interception has been completed and rules has been
            applied.
            </summary>
            <param name="ruleThatWasApplied">The rule that was applied to the call.</param>
            <param name="call">The intercepted call.</param>
        </member>
        <member name="T:FakeItEasy.Creation.IProxyGenerator">
            <summary>
            An interface to be implemented by classes that can generate proxies for FakeItEasy.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.IProxyGenerator.GenerateProxy(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Generates a proxy of the specifed type and returns a result object containing information
            about the success of the generation and the proxy if it was generated.
            </summary>
            <param name="typeOfProxy">The type of proxy to generate.</param>
            <param name="additionalInterfacesToImplement">Interfaces to be implemented by the proxy.</param>
            <param name="argumentsForConstructor">Arguments to pass to the constructor of the type in <paramref name="typeOfProxy" />.</param>
            <returns>A result containging the generated proxy.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IProxyGenerator.MethodCanBeInterceptedOnInstance(System.Reflection.MethodInfo,System.Object,System.String@)">
            <summary>
            Gets a value indicating if the specified member can be intercepted by the proxy generator.
            </summary>
            <param name="method">The member to test.</param>
            <param name="callTarget">The instance the method will be called on.</param>
            <param name="failReason">The reason the method can not be intercepted.</param>
            <returns>True if the member can be intercepted.</returns>
        </member>
        <member name="T:FakeItEasy.Creation.ICallInterceptedEventRaiser">
            <summary>
            An object that raises an event every time a call to a proxy has been intercepted.
            </summary>
        </member>
        <member name="E:FakeItEasy.Creation.ICallInterceptedEventRaiser.CallWasIntercepted">
            <summary>
            Raised when a call is intercepted.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.ICompletedFakeObjectCall">
            <summary>
            Represents a completed call to a fake object.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.ICompletedFakeObjectCall.ReturnValue">
            <summary>
            The value set to be returned from the call.
            </summary>
        </member>
        <member name="T:FakeItEasy.IOutputWriter">
            <summary>
            Represents a text writer that writes to the output.
            </summary>
        </member>
        <member name="M:FakeItEasy.IOutputWriter.Write(System.String)">
            <summary>
            Writes the specified value to the output.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The writer for method chaining.</returns>
        </member>
        <member name="M:FakeItEasy.IOutputWriter.WriteArgumentValue(System.Object)">
            <summary>
            Formats the specified argument value as a string and writes
            it to the output.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The writer for method chainging.</returns>
        </member>
        <member name="T:FakeItEasy.Core.IEventRaiserArguments">
            <summary>
            Used by the event raising rule of fake objects to get the event arguments used in
            a call to Raise.With.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IEventRaiserArguments.Sender">
            <summary>
            The sender of the event.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IEventRaiserArguments.EventArguments">
            <summary>
            The event arguments of the event.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.MethodInfoManager">
            <summary>
            Handles comparisons of MethodInfos.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.MethodInfoManager.WillInvokeSameMethodOnTarget(System.Type,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Gets a value indicating if the two method infos would invoke the same method
            if invoked on an instance of the target type.
            </summary>
            <param name="target">The type of target for invokation.</param>
            <param name="first">The first MethodInfo.</param>
            <param name="second">The second MethodInfo.</param>
            <returns>True if the same method would be invoked.</returns>
        </member>
        <member name="T:FakeItEasy.Core.NullFakeObjectContainer">
            <summary>
            A null implementation for the IFakeObjectContainer interface.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.NullFakeObjectContainer.TryCreateDummyObject(System.Type,System.Object@)">
            <summary>
            Always returns false and sets the fakeObject to null.
            </summary>
            <param name="typeOfDummy">The type of dummy object to create.</param>
            <param name="fakeObject">Output variable for the fake object that will always be set to null.</param>
            <returns>Always return false.</returns>
        </member>
        <member name="M:FakeItEasy.Core.NullFakeObjectContainer.ConfigureFake(System.Type,System.Object)">
            <summary>
            Applies base configuration to a fake object.
            </summary>
            <param name="typeOfFake">The type the fake object represents.</param>
            <param name="fakeObject">The fake object to configure.</param>
        </member>
        <member name="M:FakeItEasy.Core.OrderedFakeAsserter.#ctor(System.Collections.Generic.IEnumerable{FakeItEasy.Core.IFakeObjectCall},FakeItEasy.Core.CallWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.OrderedFakeAsserter"/> class.
            </summary>
            <param name="calls">The calls.</param>
            <param name="callWriter">The call writer.</param>
        </member>
        <member name="M:FakeItEasy.Core.OrderedFakeAsserter.AssertWasCalled(System.Func{FakeItEasy.Core.IFakeObjectCall,System.Boolean},System.String,System.Func{System.Int32,System.Boolean},System.String)">
            <summary>
            Asserts the was called.
            </summary>
            <param name="callPredicate">The call predicate.</param>
            <param name="callDescription">The call description.</param>
            <param name="repeatPredicate">The repeat predicate.</param>
            <param name="repeatDescription">The repeat description.</param>
        </member>
        <member name="T:FakeItEasy.Core.WrappedObjectRule">
            <summary>
            A call rule that applies to any call and just delegates the
            call to the wrapped object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.WrappedObjectRule.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.WrappedObjectRule"/> class. 
            Creates a new instance.
            </summary>
            <param name="wrappedInstance">
            The object to wrap.
            </param>
        </member>
        <member name="M:FakeItEasy.Core.WrappedObjectRule.IsApplicableTo(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets wether this interceptor is applicable to the specified
            call, if true is returned the Apply-method of the interceptor will
            be called.
            </summary>
            <param name="fakeObjectCall">The call to check for applicability.</param>
            <returns>True if the interceptor is applicable.</returns>
        </member>
        <member name="M:FakeItEasy.Core.WrappedObjectRule.Apply(FakeItEasy.Core.IInterceptedFakeObjectCall)">
            <summary>
            Applies an action to the call, might set a return value or throw
            an exception.
            </summary>
            <param name="fakeObjectCall">The call to apply the interceptor to.</param>
        </member>
        <member name="P:FakeItEasy.Core.WrappedObjectRule.NumberOfTimesToCall">
            <summary>
            Gets the number of times this call rule is valid, if it's set
            to null its infinitely valid.
            </summary>
            <value></value>
        </member>
        <member name="T:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter">
            <summary>
            An adapter that adapts an <see cref="T:Castle.DynamicProxy.IInvocation"/> to a <see cref="T:FakeItEasy.Core.IFakeObjectCall"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.#ctor(Castle.DynamicProxy.IInvocation)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter"/> class.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.AsReadOnly">
            <summary>
            Freezes the call so that it can no longer be modified.
            </summary>
            <returns>A completed fake object call.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.CallBaseMethod">
            <summary>
            Calls the base method, should not be used with interface types.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.SetArgumentValue(System.Int32,System.Object)">
            <summary>
            Sets the specified value to the argument at the specified index.
            </summary>
            <param name="index">The index of the argument to set the value to.</param>
            <param name="value">The value to set to the argument.</param>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.SetReturnValue(System.Object)">
            <summary>
            Sets the return value of the call.
            </summary>
            <param name="returnValue">The return value.</param>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.ToString">
            <summary>
            Returns a description of the call.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.Description">
            <summary>
            A human readable description of the call.
            </summary>
            <value></value>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.ReturnValue">
            <summary>
            The value set to be returned from the call.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.Method">
            <summary>
            The method that's called.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.Arguments">
            <summary>
            The arguments used in the call.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.FakedObject">
            <summary>
            The faked object the call is performed on.
            </summary>
        </member>
        <member name="T:FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyResources.ArgumentsForConstructorDoesNotMatchAnyConstructorMessage">
            <summary>
              Looks up a localized string similar to No constructor matches the passed arguments for constructor..
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyResources.ArgumentsForConstructorOnInterfaceTypeMessage">
            <summary>
              Looks up a localized string similar to Arguments for constructor specified for interface type..
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyResources.ProxyIsSealedTypeMessage">
            <summary>
              Looks up a localized string similar to The type of proxy &quot;{0}&quot; is sealed..
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyResources.ProxyIsValueTypeMessage">
            <summary>
              Looks up a localized string similar to The type of proxy must be an interface or a class but it was {0}..
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyResources.ProxyTypeWithNoDefaultConstructorMessage">
            <summary>
              Looks up a localized string similar to No default constructor was found on the type {0}..
            </summary>
        </member>
        <member name="T:FakeItEasy.Creation.DefaultFakeAndDummyManager">
            <summary>
            The default implementation of the IFakeAndDummyManager interface.
            </summary>
        </member>
        <member name="T:FakeItEasy.Creation.IFakeAndDummyManager">
            <summary>
            Handles the creation of fake and dummy objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeAndDummyManager.CreateDummy(System.Type)">
            <summary>
            Creates a dummy of the specified type.
            </summary>
            <param name="typeOfDummy">The type of dummy to create.</param>
            <returns>The created dummy.</returns>
            <exception cref="T:FakeItEasy.Core.FakeCreationException">The current IProxyGenerator is not able to generate a fake of the specified type and
            the current IFakeObjectContainer does not contain the specified type.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeAndDummyManager.CreateFake(System.Type,FakeItEasy.Creation.FakeOptions)">
            <summary>
            Creates a fake object of the specified type.
            </summary>
            <param name="typeOfFake">The type of fake object to generate.</param>
            <param name="options">Options for building the fake object.</param>
            <returns>A fake object.</returns>
            <exception cref="T:FakeItEasy.Core.FakeCreationException">The current IProxyGenerator is not able to generate a fake of the specified type.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeAndDummyManager.TryCreateDummy(System.Type,System.Object@)">
            <summary>
            Tries to create a dummy of the specified type.
            </summary>
            <param name="typeOfDummy">The type of dummy to create.</param>
            <param name="result">Outputs the result dummy when creation is successful.</param>
            <returns>A value indicating whether the creation was successful.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeAndDummyManager.TryCreateFake(System.Type,FakeItEasy.Creation.FakeOptions,System.Object@)">
            <summary>
            Tries to create a fake object of the specified type.
            </summary>
            <param name="typeOfFake">The type of fake to create.</param>
            <param name="options">Options for the creation of the fake.</param>
            <param name="result">The created fake object when creation is successful.</param>
            <returns>A value indicating whether the creation was successful.</returns>
        </member>
        <member name="T:FakeItEasy.Creation.DefaultFakeCreatorFacade">
            <summary>
            Default implementation ofthe IFakeCreator-interface.
            </summary>
        </member>
        <member name="T:FakeItEasy.Creation.IFakeCreatorFacade">
            <summary>
            A facade used by the public api for testability.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeCreatorFacade.CreateFake``1(System.Action{FakeItEasy.Creation.IFakeOptionsBuilder{``0}})">
            <summary>
            Creates a fake object of the specified type.
            </summary>
            <typeparam name="T">The type of fake to create.</typeparam>
            <param name="options">Options for the created fake object.</param>
            <returns>The created fake object.</returns>
            <exception cref="T:FakeItEasy.Core.FakeCreationException">Was unable to generate the fake in the current configuration.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeCreatorFacade.CreateDummy``1">
            <summary>
            Creates a dummy object, this can be a fake object or an object resolved
            from the current IFakeObjectContainer.
            </summary>
            <typeparam name="T">The type of dummy to create.</typeparam>
            <returns>The created dummy.</returns>
            <exception cref="T:FakeItEasy.Core.FakeCreationException">Was unable to generate the fake in the current configuration and
            no dummy was registered in the container for the specifed type..</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeCreatorFacade.CollectionOfFake``1(System.Int32)">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <typeparam name="T">The type of fakes to create.</typeparam>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <returns>A collection of fake objects of the specified type.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.DefaultFakeCreatorFacade.#ctor(FakeItEasy.Creation.IFakeAndDummyManager)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.DefaultFakeCreatorFacade"/> class.
            </summary>
            <param name="fakeAndDummyManager">The fake and dummy manager.</param>
        </member>
        <member name="M:FakeItEasy.Creation.DefaultFakeCreatorFacade.CreateFake``1(System.Action{FakeItEasy.Creation.IFakeOptionsBuilder{``0}})">
            <summary>
            Creates a fake object of the specified type.
            </summary>
            <typeparam name="T">The type of fake to create.</typeparam>
            <param name="options">Options for the created fake object.</param>
            <returns>The created fake object.</returns>
            <exception cref="T:FakeItEasy.Core.FakeCreationException">Was unable to generate the fake in the current configuration.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.DefaultFakeCreatorFacade.CollectionOfFake``1(System.Int32)">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <typeparam name="T">The type of fakes to create.</typeparam>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <returns>
            A collection of fake objects of the specified type.
            </returns>
        </member>
        <member name="M:FakeItEasy.Creation.DefaultFakeCreatorFacade.CreateDummy``1">
            <summary>
            Creates a dummy object, this can be a fake object or an object resolved
            from the current IFakeObjectContainer.
            </summary>
            <typeparam name="T">The type of dummy to create.</typeparam>
            <returns>The created dummy.</returns>
            <exception cref="T:FakeItEasy.Core.FakeCreationException">Was unable to generate the fake in the current configuration and
            no dummy was registered in the container for the specifed type..</exception>
        </member>
        <member name="T:FakeItEasy.Creation.IFakeOptionsBuilderForWrappers`1">
            <summary>
            Provides options for fake wrappers.
            </summary>
            <typeparam name="T">The type of the fake object generated.</typeparam>
        </member>
        <member name="T:FakeItEasy.Creation.IFakeOptionsBuilder`1">
            <summary>
            Provides options for generating fake object.
            </summary>
            <typeparam name="T">The type of fake object generated.</typeparam>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptionsBuilder`1.WithArgumentsForConstructor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Specifies arguments for the constructor of the faked class.
            </summary>
            <param name="argumentsForConstructor">The arguments to pass to the consturctor of the faked class.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptionsBuilder`1.WithArgumentsForConstructor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Specifies arguments for the constructor of the faked class by giving an expression with the call to
            the desired constructor using the arguments to be passed to the constructor.
            </summary>
            <param name="constructorCall">The constructor call to use when creating a class proxy.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptionsBuilder`1.Wrapping(`0)">
            <summary>
            Specifies that the fake should delegate calls to the specified instance.
            </summary>
            <param name="wrappedInstance">The object to delegate calls to.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptionsBuilder`1.Implements(System.Type)">
            <summary>
            Sets up the fake to implement the specified interface in addition to the
            originally faked class.
            </summary>
            <param name="interfaceType">The type of interface to implement.</param>
            <returns>Options object.</returns>
            <exception cref="T:System.ArgumentException">The specified type is not an interface.</exception>
            <exception cref="T:System.ArgumentNullException">The specified type is null.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptionsBuilder`1.OnFakeCreated(System.Action{`0})">
            <summary>
            Specifies an action that should be run over the fake object
            once it's created.
            </summary>
            <param name="action">An action to perform.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptionsBuilderForWrappers`1.RecordedBy(FakeItEasy.SelfInitializedFakes.ISelfInitializingFakeRecorder)">
            <summary>
            Specifies a fake recorder to use.
            </summary>
            <param name="recorder">The recorder to use.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.DummyValueCreationSession.#ctor(FakeItEasy.Core.IFakeObjectContainer,FakeItEasy.Creation.IFakeObjectCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.DummyValueCreationSession"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="fakeObjectCreator">The fake object creator.</param>
        </member>
        <member name="T:FakeItEasy.Creation.ProxyGeneratorResult">
            <summary>
            Contains the result of a call to TryCreateProxy of IProxyGenerator.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.ProxyGeneratorResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.ProxyGeneratorResult"/> class. 
            Creates a new instance representing a failed proxy
            generation attempt.
            </summary>
            <param name="reasonForFailure">
            The reason the proxy generation failed.
            </param>
        </member>
        <member name="M:FakeItEasy.Creation.ProxyGeneratorResult.#ctor(System.Object,FakeItEasy.Creation.ICallInterceptedEventRaiser)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.ProxyGeneratorResult"/> class. 
            Creates a new instance representing a successful proxy
            generation.
            </summary>
            <param name="generatedProxy">
            The proxy that was generated.
            </param>
            <param name="callInterceptedEventRaiser">
            An event raiser that raises
            events when calls are intercepted to the proxy.
            </param>
        </member>
        <member name="P:FakeItEasy.Creation.ProxyGeneratorResult.ProxyWasSuccessfullyGenerated">
            <summary>
            Gets a value indicating if the proxy was successfully created.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.ProxyGeneratorResult.GeneratedProxy">
            <summary>
            Gets the generated proxy when it was successfully created.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.ProxyGeneratorResult.CallInterceptedEventRaiser">
            <summary>
            Gets the event raiser that raises events when calls to the proxy are
            intercepted.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.ProxyGeneratorResult.ReasonForFailure">
            <summary>
            Gets the reason for failure when the generation was not successful.
            </summary>
        </member>
        <member name="T:FakeItEasy.Expressions.ICallExpressionParser">
            <summary>
            Represents a class that can parse a lambda expression
            that represents a method or property call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.ICallExpressionParser.Parse(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses the specified expression.
            </summary>
            <param name="callExpression">The expression to parse.</param>
            <returns>The parsed expression.</returns>
        </member>
        <member name="T:FakeItEasy.Expressions.ExpressionCallMatcher">
            <summary>
            Handles the matching of fake object calls to expressions.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallMatcher.#ctor(System.Linq.Expressions.LambdaExpression,FakeItEasy.Expressions.ExpressionArgumentConstraintFactory,FakeItEasy.Core.MethodInfoManager,FakeItEasy.Expressions.ICallExpressionParser)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Expressions.ExpressionCallMatcher"/> class.
            </summary>
            <param name="callSpecification">The call specification.</param>
            <param name="constraintFactory">The constraint factory.</param>
            <param name="callExpressionParser">A parser to use to parse call expressions.</param>
            <param name="methodInfoManager">The method infor manager to use.</param>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallMatcher.Matches(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Matcheses the specified call against the expression.
            </summary>
            <param name="call">The call to match.</param>
            <returns>True if the call is matched by the expression.</returns>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallMatcher.ToString">
            <summary>
            Gets a description of the call.
            </summary>
            <returns>Description of the call.</returns>
        </member>
        <member name="P:FakeItEasy.Expressions.ExpressionCallMatcher.DescriptionOfMatchingCall">
            <summary>
            Gets a human readable description of calls that will be matched by this
            matcher.
            </summary>
        </member>
        <member name="T:FakeItEasy.Expressions.ExpressionCallRule">
            <summary>
            An implementation of the <see cref="T:FakeItEasy.Core.IFakeObjectCallRule"/> interface that uses
            expressions for evaluating if the rule is applicable to a specific call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallRule.#ctor(FakeItEasy.Expressions.ExpressionCallMatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Expressions.ExpressionCallRule"/> class.
            </summary>
            <param name="expressionMatcher">The expression matcher to use.</param>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallRule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:FakeItEasy.Expressions.ExpressionCallRule.Factory">
            <summary>
            Handles the instantiation of ExpressionCallRule instance.
            </summary>
            <param name="callSpecification">An expression specifying the call.</param>
            <returns>A rule instance.</returns>
        </member>
        <member name="T:FakeItEasy.Expressions.ExpressionParser">
            <summary>
            Manages breaking call specification expression into their various parts.
            </summary>
        </member>
        <member name="T:FakeItEasy.Expressions.IExpressionParser">
            <summary>
            Manages breaking call specification expression into their various parts.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.IExpressionParser.GetFakeManagerCallIsMadeOn(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the fake object an expression is called on.
            </summary>
            <param name="fakeObjectCall">The call expression.</param>
            <returns>The FakeManager instance that manages the faked object the call is made on.</returns>
            <exception cref="T:System.ArgumentNullException">The fakeObjectCall is null.</exception>
            <exception cref="T:System.ArgumentException">The specified expression is not an expression where a call is made to a faked object.</exception>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionParser.GetFakeManagerCallIsMadeOn(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the fake object an expression is called on.
            </summary>
            <param name="fakeObjectCall">The call expression.</param>
            <returns>A FakeObject.</returns>
            <exception cref="T:System.ArgumentNullException">The fakeObjectCall is null.</exception>
            <exception cref="T:System.ArgumentException">The specified expression is not an expression where a call is made to a faked object.</exception>
        </member>
        <member name="T:FakeItEasy.ExtensionSyntax.Full.FullExtensionSyntax">
            <summary>
            Provides extension methods for configuring and asserting on faked objects
            without going through the static methods of the Fake-class.
            </summary>
        </member>
        <member name="M:FakeItEasy.ExtensionSyntax.Full.FullExtensionSyntax.CallsTo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Configures the behavior of the fake object when a call that matches the specified
            call happens.
            </summary>
            <typeparam name="TMember">The type of the return value of the member.</typeparam>
            <param name="callSpecification">An expression that specifies the calls to configure.</param>
            <param name="fakedObject">The faked object to configure.</param>
            <typeparam name="TFake">The type of fake object to configure.</typeparam>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ExtensionSyntax.Full.FullExtensionSyntax.CallsTo``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Configures the behavior of the fake object when a call that matches the specified
            call happens.
            </summary>
            <param name="fakedObject">The faked object to configure.</param>
            <typeparam name="TFake">The type of fake object to configure.</typeparam>
            <param name="callSpecification">An expression that specifies the calls to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ExtensionSyntax.Full.FullExtensionSyntax.AnyCall``1(``0)">
            <summary>
            Configures the behavior of the fake object when a call is made to any method on the
            object.
            </summary>
            <typeparam name="TFake">The type of the fake.</typeparam>
            <param name="fakedObject">The faked object.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.ExtensionSyntax.Syntax">
            <summary>
            Provides an extension method for configuring fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.ExtensionSyntax.Syntax.Configure``1(``0)">
            <summary>
            Gets an object that provides a fluent interface syntax for configuring
            the fake object.
            </summary>
            <typeparam name="TFake">The type of the fake object.</typeparam>
            <param name="fakedObject">The fake object to configure.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:System.ArgumentNullException">The fakedObject was null.</exception>
            <exception cref="T:System.ArgumentException">The object passed in is not a faked object.</exception>
        </member>
        <member name="T:FakeItEasy.FakeAttribute">
            <summary>
            Used to tag fields and properties that will be initialized through the
            Fake.Initialize-method.
            </summary>
        </member>
        <member name="T:FakeItEasy.IoC.DictionaryContainer">
            <summary>
            A simple implementation of an IoC container.
            </summary>
        </member>
        <member name="F:FakeItEasy.IoC.DictionaryContainer.registeredServices">
            <summary>
            The dictionary that stores the registered services.
            </summary>
        </member>
        <member name="M:FakeItEasy.IoC.DictionaryContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.IoC.DictionaryContainer"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.IoC.DictionaryContainer.Resolve(System.Type)">
            <summary>
            Resolves an instance of the specified component type.
            </summary>
            <param name="componentType">Type of the component.</param>
            <returns>An instance of the component type.</returns>
        </member>
        <member name="M:FakeItEasy.IoC.DictionaryContainer.Register``1(System.Func{FakeItEasy.IoC.DictionaryContainer,``0})">
            <summary>
            Registers the specified resolver.
            </summary>
            <typeparam name="T">The type of component to register.</typeparam>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:FakeItEasy.IoC.DictionaryContainer.RegisterSingleton``1(System.Func{FakeItEasy.IoC.DictionaryContainer,``0})">
            <summary>
            Registers the specified resolver as a singleton.
            </summary>
            <typeparam name="T">The type of component to register.</typeparam>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="T:FakeItEasy.IRepeatSpecification">
            <summary>
            Provides properties and methods to specify repeat.
            </summary>
        </member>
        <member name="M:FakeItEasy.IRepeatSpecification.Times(System.Int32)">
            <summary>
            Specifies the number of times as repeat.
            </summary>
            <param name="numberOfTimes">The number of times expected.</param>
            <returns>A Repeated instance.</returns>
        </member>
        <member name="P:FakeItEasy.IRepeatSpecification.Once">
            <summary>
            Specifies once as the repeat.
            </summary>
        </member>
        <member name="P:FakeItEasy.IRepeatSpecification.Twice">
            <summary>
            Specifies twice as the repeat.
            </summary>
        </member>
        <member name="M:FakeItEasy.Logger.Debug(System.Func{System.String})">
            <summary>
            Writes the specified message to the logger.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="T:FakeItEasy.OrderedAssertion">
            <summary>
            Provides functionality for making ordered assertions on fakes.
            </summary>
        </member>
        <member name="M:FakeItEasy.OrderedAssertion.OrderedAssertions(System.Collections.Generic.IEnumerable{FakeItEasy.Core.ICompletedFakeObjectCall})">
            <summary>
            Creates a scope that changes the behavior on asserts so that all asserts within
            the scope must be to calls in the specified collection of calls. Calls must have happened
            in the order that the asserts are specified or the asserts will fail.
            </summary>
            <param name="calls">The calls to assert among.</param>
            <returns>A disposable used to close the scope.</returns>
        </member>
        <member name="T:FakeItEasy.FakeConfigurator`1">
            <summary>
            Provides the base implementation for the IFakeConfigurator-interface.
            </summary>
            <typeparam name="T">The type of fakes the configurator can configure.</typeparam>
        </member>
        <member name="T:FakeItEasy.IFakeConfigurator">
            <summary>
            Provides configurations for fake objects of a specific type.
            </summary>
        </member>
        <member name="M:FakeItEasy.IFakeConfigurator.ConfigureFake(System.Object)">
            <summary>
            Applies the configuration for the specified fake object.
            </summary>
            <param name="fakeObject">The fake object to configure.</param>
        </member>
        <member name="P:FakeItEasy.IFakeConfigurator.ForType">
            <summary>
            The type the instance provides configuration for.
            </summary>
        </member>
        <member name="M:FakeItEasy.FakeConfigurator`1.ConfigureFake(`0)">
            <summary>
            Configures the fake.
            </summary>
            <param name="fakeObject">The fake object.</param>
        </member>
        <member name="M:FakeItEasy.FakeConfigurator`1.FakeItEasy#IFakeConfigurator#ConfigureFake(System.Object)">
            <summary>
            Applies the configuration for the specified fake object.
            </summary>
            <param name="fakeObject">The fake object to configure.</param>
        </member>
        <member name="M:FakeItEasy.FakeConfigurator`1.AssertThatFakeIsOfCorrectType(System.Object)">
            <summary>
            Asserts the type of the that fake is of correct.
            </summary>
            <param name="fakeObject">The fake object.</param>
        </member>
        <member name="P:FakeItEasy.FakeConfigurator`1.ForType">
            <summary>
            The type the instance provides configuration for.
            </summary>
            <value></value>
        </member>
        <member name="T:FakeItEasy.DummyDefinition`1">
            <summary>
            Represents a definition of how a fake object of the type T should
            be created.
            </summary>
            <typeparam name="T">The type of fake.</typeparam>
        </member>
        <member name="T:FakeItEasy.IDummyDefinition">
            <summary>
            Represents a definition of how dummies of the specified type should be created.
            </summary>
        </member>
        <member name="M:FakeItEasy.IDummyDefinition.CreateDummy">
            <summary>
            Creates the fake.
            </summary>
            <returns>The fake object.</returns>
        </member>
        <member name="P:FakeItEasy.IDummyDefinition.ForType">
            <summary>
            The type of fake object the definition is for.
            </summary>
        </member>
        <member name="M:FakeItEasy.DummyDefinition`1.FakeItEasy#IDummyDefinition#CreateDummy">
            <summary>
            Creates the dummy.
            </summary>
            <returns>The dummy object.</returns>
        </member>
        <member name="M:FakeItEasy.DummyDefinition`1.CreateDummy">
            <summary>
            Creates the dummy.
            </summary>
            <returns>The dummy object.</returns>
        </member>
        <member name="P:FakeItEasy.DummyDefinition`1.ForType">
            <summary>
            Gets the type the definition is for.
            </summary>
            <value>For type.</value>
        </member>
        <member name="T:FakeItEasy.ArgumentConstraintExtensions">
            <summary>
            Provides validation extension to the Argumentscope{T} class.
            </summary>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.IsNull``1(FakeItEasy.IArgumentConstraintManager{``0})">
            <summary>
            Constrains an argument so that it must be null (Nothing in VB).
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.Contains(FakeItEasy.IArgumentConstraintManager{System.String},System.String)">
            <summary>
            Constrains the string argument to contain the specified text.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The string the argument string should contain.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.Contains``1(FakeItEasy.IArgumentConstraintManager{``0},System.Object)">
            <summary>
            Constrains the sequence so that it must contain the specified value.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the collection should contain.</param>
            <typeparam name="T">The type of sequence.</typeparam>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.StartsWith(FakeItEasy.IArgumentConstraintManager{System.String},System.String)">
            <summary>
            Constrains the string so that it must start with the specified value.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the string should start with.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.IsNullOrEmpty(FakeItEasy.IArgumentConstraintManager{System.String})">
            <summary>
            Constrains the string so that it must be null or empty.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.IsGreaterThan``1(FakeItEasy.IArgumentConstraintManager{``0},``0)">
            <summary>
            Constrains argument value so that it must be greater than the specified value.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the string should start with.</param>
            <typeparam name="T">The type of argument to constrain.</typeparam>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.IsSameSequenceAs``1(FakeItEasy.IArgumentConstraintManager{``0},System.Collections.IEnumerable)">
            <summary>
            The tested argument collection should contain the same elements as the
            as the specified collection.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The sequence to test against.</param>
            <typeparam name="T">The type of argument to constrain.</typeparam>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.IsEmpty``1(FakeItEasy.IArgumentConstraintManager{``0})">
            <summary>
            Tests that the IEnumerable contains no items.
            </summary>
            <typeparam name="T">The type of argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.IsEqualTo``1(FakeItEasy.IArgumentConstraintManager{``0},``0)">
            <summary>
            Tests that the passed in argument is equal to the specified value.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value to compare to.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.IsInstanceOf``1(FakeItEasy.IArgumentConstraintManager{``0},System.Type)">
            <summary>
            Constrains the argument to be of the specified type.
            </summary>
            <typeparam name="T">The type of argument in the method signature.</typeparam>
            <param name="manager">The constraint manager.</param>
            <param name="type">The type to constrain the argument with.</param>
            <returns>A dummy value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.Matches``1(FakeItEasy.IArgumentConstraintManager{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
            Constrains the argument with a predicate.
            </summary>
            <param name="scope">
            The constraint manager.
            </param>
            <param name="predicate">
            The predicate that should constrain the argument.
            </param>
            <param name="description">
            A human readable description of the constraint.
            </param>
            <typeparam name="T">
            The type of argument in the method signature.
            </typeparam>
            <returns>
            A dummy argument value.
            </returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.Matches``1(FakeItEasy.IArgumentConstraintManager{``0},System.Func{``0,System.Boolean},System.String,System.Object[])">
            <summary>
            Constrains the argument with a predicate.
            </summary>
            <param name="manager">
            The constraint manager.
            </param>
            <param name="predicate">
            The predicate that should constrain the argument.
            </param>
            <param name="descriptionFormat">
            A human readable description of the constraint format string.
            </param>
            <param name="args">
            Arguments for the format string.
            </param>
            <typeparam name="T">
            The type of argument in the method signature.
            </typeparam>
            <returns>
            A dummy argument value.
            </returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.Matches``1(FakeItEasy.IArgumentConstraintManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Constrains the argument with a predicate.
            </summary>
            <param name="scope">
            The constraint manager.
            </param>
            <param name="predicate">
            The predicate that should constrain the argument.
            </param>
            <typeparam name="T">
            The type of argument in the method signature.
            </typeparam>
            <returns>
            A dummy argument value.
            </returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintExtensions.NullCheckedMatches``1(FakeItEasy.IArgumentConstraintManager{``0},System.Func{``0,System.Boolean},System.Action{FakeItEasy.IOutputWriter})">
            <summary>
            Constrains the argument to be not null (Nothing in VB) and to match
            the specified predicate.
            </summary>
            <typeparam name="T">The type of the argument to constrain.</typeparam>
            <param name="manager">The constraint manager.</param>
            <param name="predicate">The predicate that constrains non null values.</param>
            <param name="descriptionWriter">An action that writes a description of the constraint
            to the output.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="T:FakeItEasy.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.ApplicatorNotSetExceptionMessage">
            <summary>
              Looks up a localized string similar to The Apply method of the ExpressionInterceptor may no be called before the Applicator property has been set..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.ArgumentNameDoesNotExist">
            <summary>
              Looks up a localized string similar to The specified argument name does not exist in the ArgumentList..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.ArgumentsForConstructorOnInterfaceType">
            <summary>
              Looks up a localized string similar to Arguments for constructor was specified when generating proxy of interface type..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.ArgumentValidationDefaultMessage">
            <summary>
              Looks up a localized string similar to An argument validation was not configured correctly..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.CalledTooFewTimesMessage">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; was called too few times, expected #{1} times but was called #{2} times..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.CalledTooManyTimesMessage">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; was called too many times, expected #{1} times but was called #{2} times..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.CanNotGenerateFakeMessage">
             <summary>
               Looks up a localized string similar to Can not create fake of the type &apos;{0}&apos;, it&apos;s not registered in the current container and the current IProxyGenerator can not generate the fake.
            
            The following constructors failed:
            {1}.
             </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.ConfiguringNonFakeObjectExceptionMessage">
            <summary>
              Looks up a localized string similar to Error when accessing FakeObject, the specified argument is of the type &apos;{0}&apos; which is not faked..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.CreatingExpressionCallMatcherWithNonMethodOrPropertyExpression">
            <summary>
              Looks up a localized string similar to An ExpressionCallMatcher can only be created for expressions that represents a method call or a property getter..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.FailedToGenerateFakeWithArgumentsForConstructorPattern">
             <summary>
               Looks up a localized string similar to The current proxy generator failed to create a proxy with the specified arguments for the constructor:
            
              Reason for failure:
                - {0}.
             </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.FailedToGenerateProxyPattern">
             <summary>
               Looks up a localized string similar to FakeItEasy failed to create fake object of type &quot;{0}&quot;.
            
            1. The type is not registered in the current IFakeObjectContainer.
            2. The current IProxyGenerator failed to generate a proxy for the following reason:
            
            {1}.
             </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.FakeCreationExceptionDefaultMessage">
            <summary>
              Looks up a localized string similar to Unable to create fake object..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.FakingNonAbstractClassWithArgumentsForConstructor">
            <summary>
              Looks up a localized string similar to Only abstract classes can be faked using the A.Fake-method that takes an enumerable of objects as arguments for constructor, use the overload that takes an expression instead..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.MemberAccessorNotCorrectExpressionType">
            <summary>
              Looks up a localized string similar to The member accessor expression must be a lambda expression with a MethodCallExpression or MemberAccessExpression as its body..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.MemberCanNotBeIntercepted">
            <summary>
              Looks up a localized string similar to The specified method can not be configured since it can not be intercepted by the current IProxyGenerator..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.MethodMissmatchWhenPlayingBackRecording">
            <summary>
              Looks up a localized string similar to The method of the call did not match the method of the recorded call, the recorded sequence is no longer valid..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.NoConstructorMatchingArguments">
            <summary>
              Looks up a localized string similar to No constructor matching the specified arguments was found on the type {0}..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.NoDefaultConstructorMessage">
            <summary>
              Looks up a localized string similar to Can not generate fake object for the class since no default constructor was found, specify a constructor call..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.NoMoreRecordedCalls">
            <summary>
              Looks up a localized string similar to All the recorded calls has been applied, the recorded sequence is no longer valid..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.NonConstructorExpressionMessage">
            <summary>
              Looks up a localized string similar to Only expression of the type ExpressionType.New (constructor calls) are accepted..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.NowCalledDirectly">
            <summary>
              Looks up a localized string similar to The Now-method on the event raise is not meant to be called directly, only use it to register to an event on a fake object that you want to be raised..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.NumberOfOutAndRefParametersDoesNotMatchCall">
            <summary>
              Looks up a localized string similar to The number of values for out and ref parameters specified does not match the number of out and ref parameters in the call..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.OrderedAssertionsAlreadyOpen">
            <summary>
              Looks up a localized string similar to A scope for ordered assertions is already opened, close that scope before opening another one..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.SpecifiedCallIsNotToFakedObject">
            <summary>
              Looks up a localized string similar to The specified call is not made on a fake object..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.TypeCanNotBeProxied">
            <summary>
              Looks up a localized string similar to The current fake proxy generator can not create proxies of the type {0}..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.UnableToCreateDummyPattern">
            <summary>
              Looks up a localized string similar to FakeItEasy was unable to create dummy of type &quot;{0}&quot;, register it in the current IFakeObjectContainer to enable this..
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.WasCalledWrongNumberOfTimes">
            <summary>
              Looks up a localized string similar to Expected to find call {0} the number of times specified by the predicate &apos;{1}&apos; but found it {2} times among the calls:.
            </summary>
        </member>
        <member name="P:FakeItEasy.ExceptionMessages.WrongNumberOfArgumentNamesMessage">
            <summary>
              Looks up a localized string similar to The number of argument names does not match the number of arguments..
            </summary>
        </member>
        <member name="T:FakeItEasy.Repeated">
            <summary>
            Provides syntax for specifying the number of times a call must have been repeated when asserting on 
            fake object calls.
            </summary>
            <example>A.CallTo(() => foo.Bar()).Assert(Happened.Once.Exactly);</example>
        </member>
        <member name="M:FakeItEasy.Repeated.Like(System.Linq.Expressions.Expression{System.Func{System.Int32,System.Boolean}})">
            <summary>
            Specifies that a call must have been repeated a number of times
            that is validated by the specified repeatValidation argument.
            </summary>
            <param name="repeatValidation">A predicate that specifies the number of times
            a call must have been made.</param>
            <returns>A Repeated-instance.</returns>
        </member>
        <member name="M:FakeItEasy.Repeated.Matches(System.Int32)">
            <summary>
            When implemented gets a value indicating if the repeat is matched
            by the Happened-instance.
            </summary>
            <param name="repeat">The repeat of a call.</param>
            <returns>True if the repeat is a match.</returns>
        </member>
        <member name="P:FakeItEasy.Repeated.Never">
            <summary>
            Asserts that a call has not happened at all.
            </summary>
        </member>
        <member name="P:FakeItEasy.Repeated.Exactly">
            <summary>
            The call must have happened exactly the number of times that is specified in the next step.
            </summary>
        </member>
        <member name="P:FakeItEasy.Repeated.AtLeast">
            <summary>
            The call must have happened any number of times greater than or equal to the number of times that is specified
            in the next step.
            </summary>
        </member>
        <member name="P:FakeItEasy.Repeated.NoMoreThan">
            <summary>
            The call must have happened any number of times less than or equal to the number of times that is specified
            in the next step.
            </summary>
        </member>
        <member name="T:FakeItEasy.Recorders">
            <summary>
            Provides methods for creating recorders for self initializing fakes.
            </summary>
        </member>
        <member name="M:FakeItEasy.Recorders.FileRecorder(System.String)">
            <summary>
            Gets a recorder that records to and loads calls from the specified file.
            </summary>
            <param name="fileName">The file to use for recording.</param>
            <returns>A recorder instance.</returns>
        </member>
        <member name="T:FakeItEasy.IFileSystem">
            <summary>
            Provides access to the file system.
            </summary>
        </member>
        <member name="M:FakeItEasy.IFileSystem.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file in the specified mode.
            </summary>
            <param name="fileName">The full path and name of the file to open.</param>
            <param name="mode">The mode to open the file in.</param>
            <returns>A stream for reading and writing the file.</returns>
        </member>
        <member name="M:FakeItEasy.IFileSystem.FileExists(System.String)">
            <summary>
            Gets a value indicating if the specified file exists.
            </summary>
            <param name="fileName">The path and name of the file to check.</param>
            <returns>True if the file exists.</returns>
        </member>
        <member name="M:FakeItEasy.IFileSystem.Create(System.String)">
            <summary>
            Creates a file with the specified name.
            </summary>
            <param name="fileName">The name of the file to create.</param>
        </member>
        <member name="M:FakeItEasy.Helpers.GetValueProducedByExpression(System.Linq.Expressions.Expression)">
            <summary>
            Gets the value produced by the specified expression when compiled and invoked.
            </summary>
            <param name="expression">The expression to get the value from.</param>
            <returns>The value produced by the expression.</returns>
        </member>
        <member name="T:FakeItEasy.ExpectationException">
            <summary>
            An exception thrown when an expection is not met (when asserting on fake object calls).
            </summary>
        </member>
        <member name="M:FakeItEasy.ExpectationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.ExpectationException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.ExpectationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.ExpectationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.ExpectationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.ExpectationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:FakeItEasy.ExpectationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.ExpectationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:FakeItEasy.FakeExtensions">
            <summary>
            Provides extension methods for fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.Once(FakeItEasy.Configuration.IRepeatConfiguration)">
            <summary>
            Specifies NumberOfTimes(1) to the IRepeatConfiguration{TFake}.
            </summary>
            <param name="configuration">The configuration to set repeat 1 to.</param>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.Twice(FakeItEasy.Configuration.IRepeatConfiguration)">
            <summary>
            Specifies NumberOfTimes(2) to the IRepeatConfiguration{TFake}.
            </summary>
            <param name="configuration">The configuration to set repeat 2 to.</param>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.WithAnyArguments``1(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0})">
            <summary>
            Specifies that a call to the configured call should be applied no matter what arguments
            are used in the call to the faked object.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>A configuration object</returns>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.Matching``1(System.Collections.Generic.IEnumerable{FakeItEasy.Core.ICompletedFakeObjectCall},System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Filters to contain only the calls that matches the call specification.
            </summary>
            <typeparam name="TFake">The type of fake the call is made on.</typeparam>
            <param name="calls">The calls to filter.</param>
            <param name="callSpecification">The call to match on.</param>
            <returns>A collection of the calls that matches the call specification.</returns>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.MustHaveHappened(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call must have happened once or more.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.MustNotHaveHappened(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified has not happened.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.ReturnsNextFromSequence``1(FakeItEasy.Configuration.IReturnValueConfiguration{``0},``0[])">
            <summary>
            Configures the call to return the next value from the specified sequence each time it's called. Null will
            be returned when all the values in the sequence has been returned.
            </summary>
            <typeparam name="T">
            The type of return value.
            </typeparam>
            <param name="configuration">
            The call configuration to extend.
            </param>
            <param name="values">
            The values to return in sequence.
            </param>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.Returns``1(FakeItEasy.Configuration.IReturnValueConfiguration{``0},``0)">
            <summary>
            Specifies the value to return when the configured call is made.
            </summary>
            <param name="value">The value to return.</param>
            <param name="configuration">The configuration to extend.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.ReturnsLazily``1(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <param name="valueProducer">A function that produces the return value.</param>
            <param name="configuration">The configuration to extend.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.Write``1(System.Collections.Generic.IEnumerable{``0},FakeItEasy.IOutputWriter)">
            <summary>
            Writes the calls in the collection to the specified text writer.
            </summary>
            <param name="calls">The calls to write.</param>
            <param name="writer">The writer to write the calls to.</param>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.WriteToConsole``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes all calls in the collection to the console.
            </summary>
            <param name="calls">The calls to write.</param>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.GetArgument``1(FakeItEasy.Core.IFakeObjectCall,System.Int32)">
            <summary>
            Gets the argument at the specified index in the arguments collection
            for the call.
            </summary>
            <typeparam name="T">The type of the argument to get.</typeparam>
            <param name="call">The call to get the argument from.</param>
            <param name="argumentIndex">The index of the argument.</param>
            <returns>The value of the argument with the specified index.</returns>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.GetArgument``1(FakeItEasy.Core.IFakeObjectCall,System.String)">
            <summary>
            Gets the argument with the specified name in the arguments collection
            for the call.
            </summary>
            <typeparam name="T">The type of the argument to get.</typeparam>
            <param name="call">The call to get the argument from.</param>
            <param name="argumentName">The name of the argument.</param>
            <returns>The value of the argument with the specified name.</returns>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.Strict``1(FakeItEasy.Creation.IFakeOptionsBuilder{``0})">
            <summary>
            Makes the fake strict, this means that any call to the fake
            that has not been explicitly configured will throw an exception.
            </summary>
            <typeparam name="T">The type of fake object.</typeparam>
            <param name="options">The configuration.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.FakeExtensions.Where``1(FakeItEasy.Configuration.IWhereConfiguration{``0},System.Linq.Expressions.Expression{System.Func{FakeItEasy.Core.IFakeObjectCall,System.Boolean}})">
            <summary>
            Applies a predicate to constrain which calls will be considered for interception.
            </summary>
            <typeparam name="T">
            The return type of the where method.
            </typeparam>
            <param name="configuration">
            The configuration object to extend.
            </param>
            <param name="predicate">
            A predicate for a fake object call.
            </param>
            to the output.
            <returns>
            The configuration object.
            </returns>
        </member>
        <member name="T:FakeItEasy.ArgumentCollection">
            <summary>
              A collection of method arguments.
            </summary>
        </member>
        <member name="F:FakeItEasy.ArgumentCollection.arguments">
            <summary>
              The arguments this collection contains.
            </summary>
        </member>
        <member name="M:FakeItEasy.ArgumentCollection.#ctor(System.Object[],System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Initializes a new instance of the <see cref="T:FakeItEasy.ArgumentCollection"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="argumentNames">The argument names.</param>
        </member>
        <member name="M:FakeItEasy.ArgumentCollection.#ctor(System.Object[],System.Reflection.MethodInfo)">
            <summary>
              Initializes a new instance of the <see cref="T:FakeItEasy.ArgumentCollection"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:FakeItEasy.ArgumentCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection or arguments.
            </summary>
            <returns>
              A <see cref = "T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FakeItEasy.ArgumentCollection.Get``1(System.Int32)">
            <summary>
              Gets the argument at the specified index.
            </summary>
            <typeparam name = "T">The type of the argument to get.</typeparam>
            <param name = "index">The index of the argument.</param>
            <returns>The argument at the specified index.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentCollection.Get``1(System.String)">
            <summary>
              Gets the argument with the specified name.
            </summary>
            <typeparam name = "T">The type of the argument to get.</typeparam>
            <param name = "argumentName">The name of the argument.</param>
            <returns>The argument with the specified name.</returns>
        </member>
        <member name="P:FakeItEasy.ArgumentCollection.Empty">
            <summary>
              Gets an empty ArgumentList.
            </summary>
        </member>
        <member name="P:FakeItEasy.ArgumentCollection.Count">
            <summary>
              Gets the number of arguments in the list.
            </summary>
        </member>
        <member name="P:FakeItEasy.ArgumentCollection.ArgumentNames">
            <summary>
              Gets the names of the arguments in the list.
            </summary>
        </member>
        <member name="P:FakeItEasy.ArgumentCollection.Item(System.Int32)">
            <summary>
              Gets the argument at the specified index.
            </summary>
            <param name = "argumentIndex">The index of the argument to get.</param>
            <returns>The argument at the specified index.</returns>
        </member>
        <member name="T:FakeItEasy.Guard">
            <summary>
            Provides methods for guarding method arguments.
            </summary>
        </member>
        <member name="M:FakeItEasy.Guard.AgainstNull(System.Object,System.String)">
            <summary>
            Throws an exception if the specified argument is null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument was null.</exception>
        </member>
        <member name="M:FakeItEasy.Guard.IsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws an exception if the specified argument is not in the given range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified argument was not in the given range.</exception>
        </member>
        <member name="M:FakeItEasy.Guard.AgainstNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an ArgumentNullException if the specified string is null or empty.
            </summary>
            <param name="value">The value to guard.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="T:FakeItEasy.Fake">
            <summary>
            Provides static methods for accessing fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.Fake.GetFakeManager(System.Object)">
            <summary>
            Gets the fake object that manages the faked object.
            </summary>
            <param name="fakedObject">The faked object to get the manager object for.</param>
            <returns>The fake object manager.</returns>
        </member>
        <member name="M:FakeItEasy.Fake.CreateScope">
            <summary>
            Creates a new scope and sets it as the current scope. When inside a scope the
            getting the calls made to a fake will return only the calls within that scope and when
            asserting that calls were made, the calls must have been made within that scope.
            </summary>
            <returns>The created scope.</returns>
        </member>
        <member name="M:FakeItEasy.Fake.CreateScope(FakeItEasy.Core.IFakeObjectContainer)">
            <summary>
            Creates a new scope and sets it as the current scope. When inside a scope the
            getting the calls made to a fake will return only the calls within that scope and when
            asserting that calls were made, the calls must have been made within that scope.
            </summary>
            <param name="container">The container to use within the specified scope.</param>
            <returns>The created scope.</returns>
        </member>
        <member name="M:FakeItEasy.Fake.Equals(System.Object,System.Object)">
            <summary>
            Gets a value indicating if the two objects are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns>True if the two objects are equal.</returns>
        </member>
        <member name="M:FakeItEasy.Fake.ReferenceEquals(System.Object,System.Object)">
            <summary>
            Gets a value indicating if the two objects are the same reference.
            </summary>
            <param name="objA">The obj A.</param>
            <param name="objB">The obj B.</param>
            <returns>True if the objects are the same reference.</returns>
        </member>
        <member name="M:FakeItEasy.Fake.GetCalls(System.Object)">
            <summary>
            Gets all the calls made to the specified fake object.
            </summary>
            <param name="fakedObject">The faked object.</param>
            <returns>A collection containing the calls to the object.</returns>
            <exception cref="T:System.ArgumentException">The object passed in is not a faked object.</exception>
        </member>
        <member name="M:FakeItEasy.Fake.ClearConfiguration(System.Object)">
            <summary>
            Cleares the configuration of the faked object.
            </summary>
            <param name="fakedObject">The faked object to clear the configuration of.</param>
        </member>
        <member name="M:FakeItEasy.Fake.InitializeFixture(System.Object)">
            <summary>
            Sets a new fake to each property or field that is tagged with the FakeAttribute in the specified
            fixture.
            </summary>
            <param name="fixture">The object to initialize.</param>
        </member>
        <member name="T:FakeItEasy.Fake`1">
            <summary>
            Represents a fake object that provides an api for configuring a faked object, exposed by the
            FakedObject-property.
            </summary>
            <typeparam name="T">The type of the faked object.</typeparam>
        </member>
        <member name="M:FakeItEasy.Fake`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Fake`1"/> class. 
            Creates a new fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Fake`1.#ctor(System.Action{FakeItEasy.Creation.IFakeOptionsBuilder{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Fake`1"/> class. 
            Creates a new fake object using the specified options.
            </summary>
            <param name="options">
            Options used to create the fake object.
            </param>
        </member>
        <member name="M:FakeItEasy.Fake`1.CallsTo(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Configures calls to the specified member.
            </summary>
            <param name="callSpecification">An expression specifying the call to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Fake`1.CallsTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures calls to the specified member.
            </summary>
            <typeparam name="TMember">The type of value the member returns.</typeparam>
            <param name="callSpecification">An expression specifying the call to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Fake`1.AnyCall">
            <summary>
            Configures any call to the fake object.
            </summary>
            <returns>A configuration object.</returns>
        </member>
        <member name="P:FakeItEasy.Fake`1.FakedObject">
            <summary>
            Gets the faked object.
            </summary>
        </member>
        <member name="P:FakeItEasy.Fake`1.RecordedCalls">
            <summary>
            Gets all calls made to the faked object.
            </summary>
        </member>
        <member name="T:FakeItEasy.Raise">
            <summary>
            Allows the developer to raise an event on a faked object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Raise.With``1(System.Object,``0)">
            <summary>
            Raises an event on a faked object by attatching the event handler produced by the method
            to the event that is to be raised.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <returns>A Raise(TEventArgs)-object that exposes the eventhandler to attatch.</returns>
        </member>
        <member name="M:FakeItEasy.Raise.With``1(``0)">
            <summary>
            Raises an event on a faked object by attatching the event handler produced by the method
            to the event that is to be raised.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <returns>
            A Raise(TEventArgs)-object that exposes the eventhandler to attatch.
            </returns>
        </member>
        <member name="M:FakeItEasy.Raise.WithEmpty">
            <summary>
            Raises an event with empty event arguments on a faked object by attatching the event handler produced by the method
            to the event that is to be raised.
            </summary>
            <returns>
            A Raise(TEventArgs)-object that exposes the eventhandler to attatch.
            </returns>
        </member>
        <member name="T:FakeItEasy.Raise`1">
            <summary>
            A class exposing an event handler to attatch to an event of a faked object
            in order to raise that event.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="M:FakeItEasy.Raise`1.Now(System.Object,`0)">
            <summary>
            Register this event handler to an event on a faked object in order to raise that event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">Event args for the event.</param>
        </member>
        <member name="P:FakeItEasy.Raise`1.Go">
            <summary>
            Gets a generic event handler to attatch to the event to raise.
            </summary>
        </member>
        <member name="T:FakeItEasy.RootModule">
            <summary>
            Handles the registration of root dependencies in an IoC-container.
            </summary>
        </member>
        <member name="M:FakeItEasy.RootModule.RegisterDependencies(FakeItEasy.IoC.DictionaryContainer)">
            <summary>
            Registers the dependencies.
            </summary>
            <param name="container">The container to register the dependencies in.</param>
        </member>
        <member name="T:FakeItEasy.SelfInitializedFakes.CallData">
            <summary>
            DTO for recorded calls.
            </summary>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.CallData.#ctor(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Object},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.SelfInitializedFakes.CallData"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="outputArguments">The output arguments.</param>
            <param name="returnValue">The return value.</param>
        </member>
        <member name="P:FakeItEasy.SelfInitializedFakes.CallData.Method">
            <summary>
            Gets the method that was called.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:FakeItEasy.SelfInitializedFakes.CallData.OutputArguments">
            <summary>
            Gets the output arguments of the call.
            </summary>
            <value>The output arguments.</value>
        </member>
        <member name="P:FakeItEasy.SelfInitializedFakes.CallData.ReturnValue">
            <summary>
            Gets the return value of the call.
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:FakeItEasy.SelfInitializedFakes.ICallStorage">
            <summary>
            Represents storage for recorded calls for self initializing
            fakes.
            </summary>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.ICallStorage.Load">
            <summary>
            Loads the recorded calls for the specified recording.
            </summary>
            <returns>The recorded calls for the recording with the specified id.</returns>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.ICallStorage.Save(System.Collections.Generic.IEnumerable{FakeItEasy.SelfInitializedFakes.CallData})">
            <summary>
            Saves the specified calls as the recording with the specified id,
            overwriting any previous recording.
            </summary>
            <param name="calls">The calls to save.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.FileStorage.#ctor(System.String,FakeItEasy.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.SelfInitializedFakes.FileStorage"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.FileStorage.Load">
            <summary>
            Loads the recorded calls for the specified recording.
            </summary>
            <returns>
            The recorded calls for the recording with the specified id.
            </returns>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.FileStorage.Save(System.Collections.Generic.IEnumerable{FakeItEasy.SelfInitializedFakes.CallData})">
            <summary>
            Saves the specified calls as the recording with the specified id,
            overwriting any previous recording.
            </summary>
            <param name="calls">The calls to save.</param>
        </member>
        <member name="T:FakeItEasy.SelfInitializedFakes.FileStorage.Factory">
            <summary>
            A factory responsible for creating instances of FileStorage.
            </summary>
            <param name="fileName">The file name of the storage.</param>
            <returns>A FileStorage instance.</returns>
        </member>
        <member name="T:FakeItEasy.SelfInitializedFakes.ISelfInitializingFakeRecorder">
            <summary>
            An interface for recorders that provides stored responses for self initializing fakes.
            </summary>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.ISelfInitializingFakeRecorder.ApplyNext(FakeItEasy.Core.IInterceptedFakeObjectCall)">
            <summary>
            Applies the call if the call has been recorded.
            </summary>
            <param name="fakeObjectCall">The call to apply to from recording.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.ISelfInitializingFakeRecorder.RecordCall(FakeItEasy.Core.ICompletedFakeObjectCall)">
            <summary>
            Records the specified call.
            </summary>
            <param name="fakeObjectCall">The call to record.</param>
        </member>
        <member name="P:FakeItEasy.SelfInitializedFakes.ISelfInitializingFakeRecorder.IsRecording">
            <summary>
            Gets a value indicating if the recorder is currently recording.
            </summary>
        </member>
        <member name="T:FakeItEasy.SelfInitializedFakes.RecordingException">
            <summary>
            An exception that can be thrown when recording for self initialized
            fakes fails or when playback fails.
            </summary>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.RecordingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.SelfInitializedFakes.RecordingException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.RecordingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.SelfInitializedFakes.RecordingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.RecordingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.SelfInitializedFakes.RecordingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.RecordingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.SelfInitializedFakes.RecordingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:FakeItEasy.SelfInitializedFakes.RecordingManager">
            <summary>
            Manages the applying of recorded calls and recording of new calls when
            using self initialized fakes.
            </summary>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.RecordingManager.#ctor(FakeItEasy.SelfInitializedFakes.ICallStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.SelfInitializedFakes.RecordingManager"/> class.
            </summary>
            <param name="storage">The storage.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.RecordingManager.ApplyNext(FakeItEasy.Core.IInterceptedFakeObjectCall)">
            <summary>
            Applies the call if the call has been recorded.
            </summary>
            <param name="fakeObjectCall">The call to apply to from recording.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.RecordingManager.RecordCall(FakeItEasy.Core.ICompletedFakeObjectCall)">
            <summary>
            Records the specified call.
            </summary>
            <param name="fakeObjectCall">The call to record.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.RecordingManager.Dispose">
            <summary>
            Saves all recorded calls to the storage.
            </summary>
        </member>
        <member name="P:FakeItEasy.SelfInitializedFakes.RecordingManager.IsRecording">
            <summary>
            Gets a value indicating if the recorder is currently recording.
            </summary>
            <value></value>
        </member>
        <member name="T:FakeItEasy.SelfInitializedFakes.RecordingManager.Factory">
            <summary>
            Represents a factory responsible for creating recording manager
            instances.
            </summary>
            <param name="storage">The storage the manager should use.</param>
            <returns>A RecordingManager instance.</returns>
        </member>
        <member name="T:FakeItEasy.SelfInitializedFakes.SelfInitializationRule">
            <summary>
            A call rule use for self initializing fakes, delegates call to
            be applied by the recorder.
            </summary>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.SelfInitializationRule.#ctor(FakeItEasy.Core.IFakeObjectCallRule,FakeItEasy.SelfInitializedFakes.ISelfInitializingFakeRecorder)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.SelfInitializedFakes.SelfInitializationRule"/> class.
            </summary>
            <param name="wrappedRule">The wrapped rule.</param>
            <param name="recorder">The recorder.</param>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.SelfInitializationRule.IsApplicableTo(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets wether this interceptor is applicable to the specified
            call, if true is returned the Apply-method of the interceptor will
            be called.
            </summary>
            <param name="fakeObjectCall">The call to check for applicability.</param>
            <returns>True if the interceptor is applicable.</returns>
        </member>
        <member name="M:FakeItEasy.SelfInitializedFakes.SelfInitializationRule.Apply(FakeItEasy.Core.IInterceptedFakeObjectCall)">
            <summary>
            Applies an action to the call, might set a return value or throw
            an exception.
            </summary>
            <param name="fakeObjectCall">The call to apply the interceptor to.</param>
        </member>
        <member name="P:FakeItEasy.SelfInitializedFakes.SelfInitializationRule.NumberOfTimesToCall">
            <summary>
            Gets the number of times this call rule is valid, if it's set
            to null its infinitely valid.
            </summary>
            <value></value>
        </member>
        <member name="T:FakeItEasy.CommonExtensions">
            <summary>
            Provides extension methods for the common uses.
            </summary>
        </member>
        <member name="M:FakeItEasy.CommonExtensions.FormatInvariant(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified System.String with the text equivalent
            of the value of a corresponding System.Object instance in a specified array using
            invariant culture as <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arguments">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:FakeItEasy.CommonExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Gets an enumerable of tuples where the first value of each tuple is a value
            from the first collection and the second value of each tuple is the value at the same postion
            from the second collection.
            </summary>
            <typeparam name="TFirst">The type of values in the first collection.</typeparam>
            <typeparam name="TSecond">The type of values in the second collection.</typeparam>
            <param name="firstCollection">The first of the collections to combine.</param>
            <param name="secondCollection">The second of the collections to combine.</param>
            <returns>An enumerable of tuples.</returns>
        </member>
        <member name="M:FakeItEasy.CommonExtensions.ToCollectionString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Joins the collection to a string.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="items">The items to join.</param>
            <param name="separator">Separator to insert between each item.</param>
            <param name="stringConverter">A function that converts from an item to a string value.</param>
            <returns>A string representation of the collection.</returns>
        </member>
        <member name="M:FakeItEasy.CommonExtensions.FirstFromEachKey``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets a dictionary containing the first element from the sequence that has a key specified by the key selector.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="keySelector">The key selector.</param>
            <returns>A dictionary.</returns>
        </member>
        <member name="T:FakeItEasy.SmellyAttribute">
            <summary>
            An attribute that can be applied to code that should be fixed becuase theres a
            code smell.
            </summary>
        </member>
        <member name="P:FakeItEasy.SmellyAttribute.Description">
            <summary>
            A description of the smell.
            </summary>
        </member>
        <member name="T:FakeItEasy.NextCall">
            <summary>
            Lets you specify options for the next call to a fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.NextCall.To``1(``0)">
            <summary>
            Specifies options for the next call to the specified fake object. The next call will
            be recorded as a call configuration.
            </summary>
            <typeparam name="TFake">The type of the faked object.</typeparam>
            <param name="fake">The faked object to configure.</param>
            <returns>A call configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.UnderTestAttribute">
            <summary>
            Used to tag fields and properties that will be initialized as a SUT through the Fake.Initialize-mehtod.
            </summary>
        </member>
    </members>
</doc>
