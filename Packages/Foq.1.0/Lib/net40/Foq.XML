<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Foq</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.EventBuilder`2.Publishes(`1)">
<summary>
 Specifies the published event value
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.EventBuilder`2">
<summary>
 Generic builder for specifying event values
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.IMockObject">
<summary>
 Mock object interface for verification
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.Invocation">
<summary>
 Member invocation record
</summary>
</member>
<member name="T:Foq.Invocations">
<summary>
 List of invocations
</summary>
</member>
<member name="M:Foq.It.IsAny``1">
<summary>
 Marks argument as matching any value
</summary>
</member>
<member name="M:Foq.It.Is``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})">
<summary>
 Marks argument as matching specific values
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Mock.VerifyAll(System.Object)">
<summary>
 Verifies all expectations
</summary>
</member>
<member name="M:Foq.Mock.Verify(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Verifies expression was invoked at least once
</summary>
</member>
<member name="M:Foq.Mock.Verify(Microsoft.FSharp.Quotations.FSharpExpr,Foq.Times)">
<summary>
 Verifies expected call count against instance member invocations on specified mock
</summary>
</member>
<member name="M:Foq.Mock.Of``1">
<summary>
 Creates a mocked instance of the abstract type
</summary>
</member>
<member name="M:Foq.Mock.Expect(Microsoft.FSharp.Quotations.FSharpExpr,Foq.Times)">
<summary>
 Verifies expected expression call count on invocation
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.MockMode">
<summary>
 Mock mode
</summary>
</member>
<member name="F:Foq.Foq.Mock`1.abstractType">
<summary>
 Abstract type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Mock`1.With``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Quotations.FSharpExpr{``0}})">
<summary>
 Creates a mocked instance of the abstract type
</summary>
</member>
<member name="M:Foq.Mock`1.SetupMethod``2(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,``1}}})">
<summary>
 Specifies an event of the abstract type as a quotation
</summary>
</member>
<member name="M:Foq.Mock`1.SetupEvent``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Quotations.FSharpExpr{``0}})">
<summary>
 Specifies an event of the abstract type as a quotation
</summary>
</member>
<member name="M:Foq.Mock`1.SetupByName``1(System.String)">
<summary>
 Specifies a method or property of the abstract type by name
</summary>
</member>
<member name="M:Foq.Mock`1.Setup``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Quotations.FSharpExpr{``0}})">
<summary>
 Specifies a method or property of the abstract type as a quotation
</summary>
</member>
<member name="M:Foq.Mock`1.Property``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Quotations.FSharpExpr{``0}})">
<summary>
 Specifies a mock of a type with a given property
</summary>
</member>
<member name="M:Foq.Mock`1.Method``2(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,``1}}})">
<summary>
 Specifies a mock of a type with a given method
</summary>
</member>
<member name="M:Foq.Mock`1.ExpectSequence``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Quotations.FSharpExpr{``0}})">
<summary>
 Verifies expected expression sequence
</summary>
</member>
<member name="M:Foq.Mock`1.Create(System.Type)">
<summary>
 Creates a boxed instance of the abstract type
</summary>
</member>
<member name="M:Foq.Mock`1.Create(System.Object[])">
<summary>
 Creates a mocked instance of a class using the specified constructor arguments
</summary>
</member>
<member name="M:Foq.Mock`1.Create">
<summary>
 Creates a mocked instance of the abstract type
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.Mock`1.#ctor">
<summary>
 Constructs mock builder
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.Mock`1">
<summary>
 Generic mock type over abstract types and interfaces
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.PredicateAttribute">
<summary>
 Predicate attribute
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.RaisesAttribute">
<summary>
 Raises attribute
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.ResultBuilder`2.Returns``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Specifies a computed return value of a method or property
</summary>
</member>
<member name="M:Foq.ResultBuilder`2.Returns(`1)">
<summary>
 Specifies the return value of a method or property
</summary>
</member>
<member name="M:Foq.ResultBuilder`2.Raises(System.Exception)">
<summary>
 Specifies the exception value a method or property raises
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.ResultBuilder`2.Calls``1(Microsoft.FSharp.Core.FSharpFunc{``0,`1})">
<summary>
 Calls the specified function to compute the return value
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.ResultBuilder`2">
<summary>
 Generic builder for specifying method or property results
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.ReturnBuilder`2.Returns``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Specifies a computed return value of a method or property
</summary>
</member>
<member name="M:Foq.ReturnBuilder`2.Returns(`1)">
<summary>
 Specifies the return value of a method or property
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.ReturnBuilder`2">
<summary>
 Generic builder for specifying method result
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.ReturnsAttribute">
<summary>
 Returns attribute
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.Times">
<summary>
 Specifies valid invocation count
</summary>
</member>
<member name="T:Foq.Verifiers">
<summary>
 List of verifiers
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.WildcardAttribute">
<summary>
 Wildcard attribute
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.Emit.Result">
<summary>
 Method result type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.Emit.Arg">
<summary>
 Method argument type
</summary>
</member>
<member name="T:Foq.Emit.PublishedEvent">
<summary>
 Boxed event
</summary>
</member>
<member name="T:Foq.Emit.Func">
<summary>
 Boxed function
</summary>
</member>
<member name="T:Foq.Emit.Value">
<summary>
 Boxed value
</summary>
</member>
<member name="M:Foq.Emit.mock(System.Boolean,System.Type,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Reflection.MethodInfo,System.Tuple{Foq.Emit.Arg[],Foq.Emit.Result}}},System.Object[])">
<summary>
 Builds a mock from the specified calls
</summary>
</member>
<member name="M:Foq.Emit.generateOverload(System.Reflection.Emit.ILGenerator,System.Collections.Generic.List{System.Object[]},System.Reflection.Emit.FieldBuilder,System.Collections.Generic.List{System.Object},System.Reflection.Emit.FieldBuilder,System.Reflection.MethodInfo,System.Tuple{Foq.Emit.Arg[],Foq.Emit.Result})">
<summary>
 Generates method overload
</summary>
</member>
<member name="M:Foq.Emit.generateTrigger(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder)">
<summary>
 Generates trigger
</summary>
</member>
<member name="M:Foq.Emit.generateAddInvocation(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder,System.Reflection.MethodInfo)">
<summary>
 Generates invocation add
</summary>
</member>
<member name="M:Foq.Emit.generateReturn(System.Reflection.Emit.ILGenerator,System.Collections.Generic.List{System.Object},System.Reflection.Emit.FieldBuilder,System.Reflection.MethodInfo,Foq.Emit.Result)">
<summary>
 Generates method return
</summary>
</member>
<member name="M:Foq.Emit.generateArgs(System.Reflection.Emit.ILGenerator,System.Collections.Generic.List{System.Object[]},System.Reflection.Emit.FieldBuilder,System.Reflection.MethodInfo,Foq.Emit.Arg[],System.Reflection.Emit.Label)">
<summary>
 Generates method overload args match
</summary>
</member>
<member name="M:Foq.Emit.defineMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
<summary>
 Defines method
</summary>
</member>
<member name="M:Foq.Emit.generateConstructor(System.Reflection.Emit.TypeBuilder,System.Type[],Microsoft.FSharp.Core.FSharpFunc{System.Reflection.Emit.ILGenerator,Microsoft.FSharp.Core.Unit})">
<summary>
 Generates constructor
</summary>
</member>
<member name="T:Foq.Emit">

</member>
<member name="">

</member>
<member name="T:Foq.Eval">

</member>
<member name="">

</member>
<member name="T:Foq.Expectations">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.Format">

</member>
<member name="M:Foq.ItModule.is``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})">
<summary>
 Marks argument as matching specific values
</summary>
</member>
<member name="M:Foq.ItModule.any``1">
<summary>
 Marks argument as matching any value
</summary>
</member>
<member name="T:Foq.ItModule">

</member>
<member name="P:Foq.Linq.A`1.Ignored">
<summary>
 Marks argument as matching any value
</summary>
</member>
<member name="M:Foq.Linq.A`1.When(System.Func{`0,System.Boolean})">
<summary>
 Marks argument as matching specific values
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Linq.It.IsAny``1">
<summary>
 Marks argument as matching any value
</summary>
</member>
<member name="M:Foq.Linq.It.Is``1(System.Func{``0,System.Boolean})">
<summary>
 Marks argument as matching specific values
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Linq.Mock.VerifySub(System.Linq.Expressions.Expression{System.Action})">
<summary>
 Verifies specified subroutine is called at least once on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.VerifyPropertySet``1(System.Linq.Expressions.Expression{System.Func{``0}})">
<summary>
 Verifies specified property setter is called at least once on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.VerifyPropertyGet``1(System.Linq.Expressions.Expression{System.Func{``0}})">
<summary>
 Verifies specified property getter is called at least once on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.VerifyFunc``1(System.Linq.Expressions.Expression{System.Func{``0}})">
<summary>
 Verifies specified function is called at least once on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.VerifyAll``2(``0)">
<summary>
 Verify all expectations
</summary>
</member>
<member name="M:Foq.Linq.Mock.VerifyAction(System.Linq.Expressions.Expression{System.Action})">
<summary>
 Verifies specified action is called at least once on specified mock
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.Linq.Mock.Verify``1(System.Linq.Expressions.Expression{System.Func{``0}})">
<summary>
 Verifies specified method is called at least once on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.RecordExpectations(System.Object)">
<summary>
 Records expectations in scope of IDisposable (e.g. C# using block)
</summary>
</member>
<member name="M:Foq.Linq.Mock.Of``1">
<summary>
 Creates a mocked instance of the abstract type
</summary>
</member>
<member name="M:Foq.Linq.Mock.ExpectSub(System.Linq.Expressions.Expression{System.Action},Foq.Times)">
<summary>
 Expects specified subroutine is called on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.ExpectPropertySet``1(System.Linq.Expressions.Expression{System.Func{``0}},Foq.Times)">
<summary>
 Expects specified property setter is called on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.ExpectPropertyGet``1(System.Linq.Expressions.Expression{System.Func{``0}},Foq.Times)">
<summary>
 Expects specified property getter is called on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.ExpectFunc``1(System.Linq.Expressions.Expression{System.Func{``0}},Foq.Times)">
<summary>
 Expects specified function is called on specified mock
</summary>
</member>
<member name="M:Foq.Linq.Mock.ExpectAction(System.Linq.Expressions.Expression{System.Action},Foq.Times)">
<summary>
 Expects specified action is called on specified mock
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.Linq.Mock.Expect``1(System.Linq.Expressions.Expression{System.Func{``0}},Foq.Times)">
<summary>
 Expects specified method is called on specified mock
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Linq.EventBuilder`1.Publishes``1(Microsoft.FSharp.Control.IDelegateEvent{``0})">
<summary>
 Specifies the published event value
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.Linq.EventBuilder`1">
<summary>
 Generic builder for specifying event values
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Linq.FuncBuilder`2.Returns(System.Func{`1})">
<summary>
 Specifies a computed return value of a method or property
</summary>
</member>
<member name="M:Foq.Linq.FuncBuilder`2.Returns(`1)">
<summary>
 Specifies the return value of a method or property
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Linq.ActionBuilder`1.Raises(System.Exception)">
<summary>
 Specifies the exception value a method or property raises
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="F:Foq.Linq.Foq.Linq.Mock`1.abstractType">
<summary>
 Abstract type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Linq.Mock`1.SetupSub(System.Linq.Expressions.Expression{System.Action{`0}})">
<summary>
 Specifies a member subroutine of the abstract type
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.SetupPropertySet``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
<summary>
 Specifies a property setter of the abstract type
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.SetupPropertyGet``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
<summary>
 Specifies a property getter of the abstract type
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.SetupProperties(System.Object)">
<summary>
 Specifies properties of the abstract type
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.SetupFunc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
<summary>
 Specifies a member function of the abstract type
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.SetupEvent(System.String)">
<summary>
 Specifies an event of the abstract type
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.SetupByName``1(System.String)">
<summary>
 Setup member by name
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.SetupAction(System.Linq.Expressions.Expression{System.Action{`0}})">
<summary>
 Specifies a member action of the abstract type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Linq.Mock`1.Setup``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
<summary>
 Specifies a member method of the abstact type
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.Create(System.Object[])">
<summary>
 Creates a mocked instance of the abstract type
</summary>
</member>
<member name="M:Foq.Linq.Mock`1.Create">
<summary>
 Creates a mocked instance of the abstract type
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.Linq.Mock`1.#ctor">
<summary>
 Constructs mock builder
</summary>
</member>
<member name="">

</member>
<member name="T:Foq.Linq.Mock`1">
<summary>
 Generic stub type over abstract types and interfaces
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.Linq.MockMode">
<summary>
 Mock mode
</summary>
</member>
<member name="M:Foq.Linq.Verification.expect(Foq.Times,System.Object,System.Reflection.MethodBase,Foq.Emit.Arg[])">
<summary>
 Expects method call on instance the specified number of times
</summary>
</member>
<member name="M:Foq.Linq.Verification.verify(Foq.Times,System.Object,System.Reflection.MethodBase,Foq.Emit.Arg[])">
<summary>
 Verifies if method called on instance the specified number of times
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.Linq.Verification.getMethod(System.Linq.Expressions.LambdaExpression)">
<summary>
 Gets method from lambda expression
</summary>
</member>
<member name="M:Foq.Linq.Verification.getInstance(System.Linq.Expressions.Expression)">
<summary>
 Gets instance value from member expression
</summary>
</member>
<member name="T:Foq.Linq.Verification">

</member>
<member name="M:Foq.Linq.Reflection.toPropertyInfo(System.Linq.Expressions.Expression)">
<summary>
 Converts expression to a tuple of PropertyInfo and Arg array
</summary>
</member>
<member name="M:Foq.Linq.Reflection.toMethodInfo(System.Linq.Expressions.Expression)">
<summary>
 Converts expression to a tuple of MethodInfo and Arg array
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.Linq.Reflection.resolve(System.Linq.Expressions.Expression)">
<summary>
 Resolves Expression to Arg
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Foq.Linq.Reflection.hasAttribute(System.Type,System.Reflection.MethodInfo)">
<summary>
 Converts argument expressions to Arg array    
</summary>
</member>
<member name="T:Foq.Linq.Reflection">

</member>
<member name="M:Foq.Operators.expectSeq``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Quotations.FSharpExpr{``1}})">
<summary>
 Expects the expression sequence to occur
</summary>
</member>
<member name="M:Foq.Operators.verifySeq(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Verifies an expression sequence has occured
</summary>
</member>
<member name="M:Foq.Operators.verifyAll``1(``0)">
<summary>
 Verifies all expectations set on the specified mock object
</summary>
</member>
<member name="M:Foq.Operators.expect(Microsoft.FSharp.Quotations.FSharpExpr,Foq.Times)">
<summary>
 Expects the expression occurs the specified number of times
</summary>
</member>
<member name="M:Foq.Operators.verify(Microsoft.FSharp.Quotations.FSharpExpr,Foq.Times)">
<summary>
 Verifies the expression occurs the specified number of times
</summary>
</member>
<member name="M:Foq.Operators.mock``1">
<summary>
 Returns a mock of the required type
</summary>
</member>
<member name="M:Foq.Operators.op_EqualsEqualsGreater``1(``0,System.Exception)">
<summary>
 Signifies source expression raises specified exception
</summary>
</member>
<member name="M:Foq.Operators.op_MinusMinusGreater``1(``0,``0)">
<summary>
 Signifies source expression returns specified value
</summary>
</member>
<member name="T:Foq.Operators">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.QuotationEvaluation">

</member>
<member name="M:Foq.Reflection.toHandlers(System.Type,Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Converts expression to corresponding event Add and Remove handlers
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.Reflection.toCallResult(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Converts expression to a tuple of MethodInfo, Arg array and Result
</summary>
</member>
<member name="M:Foq.Reflection.toCallOf(System.Type,Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Converts expression to a tuple of MethodInfo and Arg array
</summary>
</member>
<member name="M:Foq.Reflection.toCall(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Converts expression to a tuple of Expression, MethodInfo and Arg array
</summary>
</member>
<member name="M:Foq.Reflection.|MethodCall|_|(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Active pattern matches method call expressions
</summary>
</member>
<member name="M:Foq.Reflection.toArgs``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Converts expression to a tuple of MethodInfo and Arg array
</summary>
</member>
<member name="M:Foq.Reflection.hasAttribute(System.Type,System.Reflection.MethodInfo)">
<summary>
 Returns true if method has specified attribute
</summary>
</member>
<member name="T:Foq.Reflection">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Foq.TimesModule">

</member>
<member name="">

</member>
<member name="M:Foq.Verification.countInvocations(Foq.IMockObject,System.Reflection.MethodBase,Foq.Emit.Arg[])">
<summary>
 Returns invocation count matching specificed expression
</summary>
</member>
<member name="">

</member>
<member name="M:Foq.Verification.argsMatch``1(System.Type,Foq.Emit.Arg,``0)">
<summary>
 Returns true if arguments match
</summary>
</member>
<member name="M:Foq.Verification.methodsMatch(System.Reflection.MethodBase,System.Reflection.MethodBase)">
<summary>
 Return true if methods match
</summary>
</member>
<member name="T:Foq.Verification">

</member>
</members>
</doc>
