<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grean.Exude</name>
    </assembly>
    <members>
        <member name="T:Grean.Exude.FirstClassCommand">
            <summary>
            An executable test case, represented as an xUnit.net ITestCommand.
            </summary>
            <remarks>
            <para>
            This class is mostly the result of converting an
            <see cref="T:Grean.Exude.ITestCase"/> instance to an xUnit.net ITestCommand by
            invoking <see cref="M:Grean.Exude.ITestCase.ConvertToTestCommand(Xunit.Sdk.IMethodInfo)"/>.
            </para>
            </remarks>
            <seealso cref="T:Grean.Exude.ITestCase"/>
            <seealso cref="T:Grean.Exude.FirstClassTestsAttribute"/>
        </member>
        <member name="M:Grean.Exude.FirstClassCommand.#ctor(System.Action{System.Object},Xunit.Sdk.IMethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Grean.Exude.FirstClassCommand"/>
            class.
            </summary>
            <param name="testAction">
            The test action to be invoked when the test is executed.
            </param>
            <param name="testMethod">
            The test method with which this instance is associated. This will
            likely be the method adorned with an
            <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>.
            </param>
            <remarks>
            <para>
            The <paramref name="testAction"/> constructor argument is
            subsequently available as the <see cref="P:Grean.Exude.FirstClassCommand.TestAction"/> property.
            Likewise, the <paramref name="testMethod"/> constructor argument
            is subsequently available as the <see cref="P:Grean.Exude.FirstClassCommand.HostTestMethod"/>
            property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="testAction"/> is <see langword="null"/>
            </exception>
            <seealso cref="P:Grean.Exude.FirstClassCommand.TestAction"/>
            <seealso cref="P:Grean.Exude.FirstClassCommand.HostTestMethod"/>
        </member>
        <member name="M:Grean.Exude.FirstClassCommand.Execute(System.Object)">
            <summary>
            </summary>
            <param name="testClass"></param>
            <returns></returns>
            <inheritdoc />
        </member>
        <member name="P:Grean.Exude.FirstClassCommand.ShouldCreateInstance">
            <summary>
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Grean.Exude.FirstClassCommand.TestAction">
            <summary>Gets the test action.</summary>
            <value>
            The test action originally supplied as a constructor argument.
            </value>
            <seealso cref="M:Grean.Exude.FirstClassCommand.#ctor(System.Action{System.Object},Xunit.Sdk.IMethodInfo)"/>
        </member>
        <member name="P:Grean.Exude.FirstClassCommand.HostTestMethod">
            <summary>Gets the test method.</summary>
            <value>
            The test method originally supplied as a constructor argument.
            </value>
        </member>
        <member name="T:Grean.Exude.FirstClassTestsAttribute">
            <summary>
            A test attribute used to adorn methods that creates first-class 
            executable test cases.
            </summary>
            <remarks>
            <para>
            The xUnit.net unit testing framework provides various ways in which you
            can write Parameterized Tests, and while many of the options are
            convenient, either they only support constants (like the [InlineData]
            attribute), or they are releatively inconvenient to use, like the
            [ClassData] attribute. In all cases of data attributes supporting the
            [Theory] attribute, they are based on a contract of untyped (and boxed)
            arrays.
            </para>
            <para>
            The [FirstClassTests] attribute, on the other hand, enables you to
            write executable test cases as strongly-typed, first-class test
            objects.
            </para>
            <para>
            Write a method that returns IEnumerable&lt;ITestCase&gt;, or a type
            implementing that interface, like ITestCase[]; then adorn that method
            with the [FirstClassTests] attribute. The test runner will then execute
            all the returned test cases.
            </para>
            </remarks>
            <example>
            This simple example returns three test cases that all pass:
            <code><![CDATA[[FirstClassTests]
            public static IEnumerable<ITestCase> YieldFirstClassTests()
            {
                yield return new TestCase(_ => Assert.Equal(1, 1));
                yield return new TestCase(_ => Assert.Equal(2, 2));
                yield return new TestCase(_ => Assert.Equal(3, 3));
            }]]>
            </code>
            </example>
            <seealso cref="T:Grean.Exude.ITestCase"/>
        </member>
        <member name="M:Grean.Exude.FirstClassTestsAttribute.EnumerateTestCommands(Xunit.Sdk.IMethodInfo)">
            <summary>
            Enumerates the test commands represented by this test method, by
            projecting the returned sequence of <see cref="T:Grean.Exude.ITestCase"/> into a
            sequence of xUnit.net ITestCommand instances.
            </summary>
            <param name="method">
            The test method adorned with the [FirstClassTests] attribute.
            </param>
            <returns>
            The xUnit.net ITestCommand instances produced by converting this
            method's returned sequence of <see cref="T:Grean.Exude.ITestCase"/> instances
            into a sequence of ITestCommand instances.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="method"/> represents a method that doesn't return
            IEnumerable&lt;ITestCase&gt; (or a compatible type, such as
            ITestCase[]).
            </exception>
        </member>
        <member name="T:Grean.Exude.ITestCase">
            <summary>
            Represents a test-case that can be turned into an xUnit.net
            ITestCommand when returned from a test method adorned with the
            <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>.
            </summary>
            <seealso cref="T:Grean.Exude.FirstClassTestsAttribute"/>
            <seealso cref="T:Grean.Exude.TestCase"/>
            <seealso cref="T:Grean.Exude.TestCase`1"/>
        </member>
        <member name="M:Grean.Exude.ITestCase.ConvertToTestCommand(Xunit.Sdk.IMethodInfo)">
            <summary>
            Converts the instance to an xUnit.net ITestCommand instance.
            </summary>
            <param name="method">
            The method adorned by a <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>.
            </param>
            <returns>
            An xUnit.net ITestCommand that represents the executable test case.
            </returns>
            <seealso cref="T:Grean.Exude.FirstClassTestsAttribute"/>
        </member>
        <member name="T:Grean.Exude.TestCase">
            <summary>
            Represents a weakly-typed test case that can be turned into an
            xUnit.net ITestCommand when returned from a test method adorned with
            the <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>
            </summary>
            <seealso cref="T:Grean.Exude.FirstClassTestsAttribute"/>
            <seealso cref="T:Grean.Exude.ITestCase"/>
            <seealso cref="T:Grean.Exude.TestCase`1"/>
        </member>
        <member name="M:Grean.Exude.TestCase.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Grean.Exude.TestCase"/> class.
            </summary>
            <param name="testAction">
            The test action to be invoked when the test is executed.
            </param>
            <remarks>
            <para>
            When this test case is exececuted, the
            <paramref name="testAction"/> is invoked.
            </para>
            <para>
            The test action constructor argument is subsequently available as
            the <see cref="P:Grean.Exude.TestCase.TestAction"/> property.
            </para>
            </remarks>
            <example>
            This simple example returns three test cases that all pass:
            <code><![CDATA[[FirstClassTests]
            public static IEnumerable<ITestCase> YieldFirstClassTests()
            {
                yield return new TestCase(() => Assert.Equal(1, 1));
                yield return new TestCase(() => Assert.Equal(2, 2));
                yield return new TestCase(() => Assert.Equal(3, 3));
            }]]>
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="testAction"/> is <see langword="null"/>
            </exception>
            <seealso cref="P:Grean.Exude.TestCase.TestAction"/>
        </member>
        <member name="M:Grean.Exude.TestCase.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Grean.Exude.TestCase"/> class.
            </summary>
            <param name="testAction">
            The test action to be invoked when the test is executed.
            </param>
            <remarks>
            <para>
            When this test case is exececuted, the
            <paramref name="testAction"/> is invoked. The argument supplied to
            the test action is an instance of the test class hosting the test
            method adorned with an <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>, if
            any. However, xUnit.net may pass <see langword="null"/> as the
            test class instance.
            </para>
            <para>
            The test action constructor argument is subsequently available as
            the <see cref="P:Grean.Exude.TestCase.TestAction"/> property.
            </para>
            </remarks>
            <example>
            This simple example returns three test cases that all pass:
            <code><![CDATA[[FirstClassTests]
            public static IEnumerable<ITestCase> YieldFirstClassTests()
            {
                yield return new TestCase(_ => Assert.Equal(1, 1));
                yield return new TestCase(_ => Assert.Equal(2, 2));
                yield return new TestCase(_ => Assert.Equal(3, 3));
            }]]>
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="testAction"/> is <see langword="null"/>
            </exception>
            <seealso cref="P:Grean.Exude.TestCase.TestAction"/>
        </member>
        <member name="M:Grean.Exude.TestCase.ConvertToTestCommand(Xunit.Sdk.IMethodInfo)">
            <summary>
            Converts the instance to an xUnit.net ITestCommand instance.
            </summary>
            <param name="method">
            The method adorned by a <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>.
            </param>
            <returns>
            An xUnit.net ITestCommand that represents the executable test case.
            </returns>
            <seealso cref="T:Grean.Exude.FirstClassTestsAttribute"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="P:Grean.Exude.TestCase.TestAction">
            <summary>Gets the test action.</summary>
            <value>
            The test action originally supplied as a constructor argument.
            </value>
            <seealso cref="M:Grean.Exude.TestCase.#ctor(System.Action{System.Object})"/>
        </member>
        <member name="T:Grean.Exude.TestCase`1">
            <summary>
            Represents a strongly-typed test case that can be turned into an
            xUnit.net ITestCommand when returned from a test method adorned with
            the <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>
            </summary>
            <typeparam name="T">
            The type of the test class hosting the test case.
            </typeparam>
            <seealso cref="T:Grean.Exude.FirstClassTestsAttribute"/>
            <seealso cref="T:Grean.Exude.ITestCase"/>
            <seealso cref="T:Grean.Exude.TestCase"/>
        </member>
        <member name="M:Grean.Exude.TestCase`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Grean.Exude.TestCase`1"/> class.
            </summary>
            <param name="testAction">
            The test action to be invoked when the test is executed.
            </param>
            <remarks>
            <para>
            When this test case is exececuted, the
            <paramref name="testAction"/> is invoked. The argument supplied to
            the test action is an instance of the test class hosting the test
            method adorned with an <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>, if
            any. However, xUnit.net may pass <see langword="null"/> as the
            test class instance. It's also possible that an
            <see cref="T:System.ArgumentException"/> is thrown if the type of the
            hosting test class is incompatible with <typeparamref name="T"/>.
            </para>
            <para>
            The test action constructor argument is subsequently available as
            the <see cref="P:Grean.Exude.TestCase`1.TestAction"/> property.
            </para>
            </remarks>
            <example>
            This example demonstrates how to write a strongly-typed
            Parameterized Test using <see cref="T:Grean.Exude.TestCase`1"/>. The containing
            test class that declares and implements both methods is called
            <strong>Sceanario</strong>.
            <code><![CDATA[public void AParameterizedTest(DateTimeOffset x, DateTimeOffset y)
            {
                Assert.True(x < y);
            }
            
            [FirstClassTests]
            public static TestCase<Scenario>[] RunAParameterizedTest()
            {
                var testCases = new[] 
                {
                    new 
                    {
                        x = new DateTimeOffset(2002, 10, 12, 18, 15, 0, TimeSpan.FromHours(1)),
                        y = new DateTimeOffset(2007,  4, 21, 18, 15, 0, TimeSpan.FromHours(1))
                    },
                    new
                    {
                        x = new DateTimeOffset(1970, 11, 25, 16, 10, 0, TimeSpan.FromHours(1)),
                        y = new DateTimeOffset(1972,  6,  6,  8,  5, 0, TimeSpan.FromHours(1))
                    },
                    new
                    {
                        x = new DateTimeOffset(2014, 3, 2, 17, 18, 45, TimeSpan.FromHours(1)),
                        y = new DateTimeOffset(2014, 3, 2, 17, 18, 45, TimeSpan.FromHours(0))
                    }
                };
                return testCases
                    .Select(tc =>
                        new TestCase<Scenario>(
                            s => s.AParameterizedTest(tc.x, tc.y)))
                    .ToArray();
            }/// ]]></code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="testAction"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="M:Grean.Exude.TestCase`1.ConvertToTestCommand(Xunit.Sdk.IMethodInfo)">
            <summary>
            Converts the instance to an xUnit.net ITestCommand instance.
            </summary>
            <param name="method">
            The method adorned by a <see cref="T:Grean.Exude.FirstClassTestsAttribute"/>.
            </param>
            <returns>
            An xUnit.net ITestCommand that represents the executable test case.
            </returns>
            <seealso cref="T:Grean.Exude.FirstClassTestsAttribute"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="P:Grean.Exude.TestCase`1.TestAction">
            <summary>Gets the test action.</summary>
            <value>
            The test action originally supplied as a constructor argument.
            </value>
            <seealso cref="M:Grean.Exude.TestCase`1.#ctor(System.Action{`0})"/>
        </member>
    </members>
</doc>
