<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Argu</name></assembly>
<members>
<member name="T:Argu.AltCommandLineAttribute">
<summary>
 Sets alternative command line names.
</summary>
</member>
<member name="M:Argu.ArgumentParser.Create``1(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Create a new argument parsing scheme using given 'Template type
     which must be an F# Discriminated Union.
 </summary>
 <param name="usageText">Specify a usage text to prefixed at the '--help' output.</param>
</member>
<member name="T:Argu.ArgumentParser">
 <summary>
     Argu static methods
 </summary>
</member>
<member name="M:Argu.ArgumentParser`1.Usage(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Returns the usage string.</summary>
 <param name="message">The message to be displayed on top of the usage string.</param>
</member>
<member name="M:Argu.ArgumentParser`1.PrintCommandLineSyntax">
 <summary>Prints command line syntax. Useful for generating documentation.</summary>
</member>
<member name="M:Argu.ArgumentParser`1.PrintCommandLineFlat(Microsoft.FSharp.Collections.FSharpList{`0})">
 <summary>Prints parameters in command line format. Useful for argument string generation.</summary>
</member>
<member name="M:Argu.ArgumentParser`1.PrintCommandLine(Microsoft.FSharp.Collections.FSharpList{`0})">
 <summary>Prints parameters in command line format. Useful for argument string generation.</summary>
</member>
<member name="M:Argu.ArgumentParser`1.PrintAppSettings(Microsoft.FSharp.Collections.FSharpList{`0},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Prints parameters in App.Config format.</summary>
 <param name="args">The parameters that fill out the XML document.</param>
 <param name="printComments">Print XML comments over every configuration entry.</param>
</member>
<member name="M:Argu.ArgumentParser`1.ParseCommandLine(Microsoft.FSharp.Core.FSharpOption{System.String[]},Microsoft.FSharp.Core.FSharpOption{Argu.IExiter},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse command line arguments only.</summary>
 <param name="inputs">The command line input. Taken from System.Environment if not specified.</param>
 <param name="errorHandler">The implementation of IExiter used for error handling. ArgumentException is default.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
 <param name="ignoreUnrecognized">Ignore CLI arguments that do not match the schema. Defaults to false.</param>
 <param name="raiseOnUsage">Treat '--help' parameters as parse errors. Defaults to true.</param>
</member>
<member name="M:Argu.ArgumentParser`1.ParseAppSettings(System.Reflection.Assembly,Microsoft.FSharp.Core.FSharpOption{Argu.IExiter},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse AppSettings section of XML configuration of given assembly.</summary>
 <param name="assembly">assembly to get application configuration from.</param>
 <param name="errorHandler">The implementation of IExiter used for error handling. ArgumentException is default.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
</member>
<member name="M:Argu.ArgumentParser`1.ParseAppSettings(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Argu.IExiter},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse AppSettings section of XML configuration only.</summary>
 <param name="xmlConfigurationFile">If specified, parse AppSettings configuration from given xml configuration file.</param>
 <param name="errorHandler">The implementation of IExiter used for error handling. ArgumentException is default.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
</member>
<member name="M:Argu.ArgumentParser`1.Parse(Microsoft.FSharp.Core.FSharpOption{System.String[]},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Argu.IExiter},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse both command line args and AppSettings section of XML configuration.
          Results are merged with command line args overriding XML config.</summary>
 <param name="inputs">The command line input. Taken from System.Environment if not specified.</param>
 <param name="xmlConfigurationFile">If specified, parse AppSettings configuration from given configuration file.</param>
 <param name="errorHandler">The implementation of IExiter used for error handling. ArgumentException is default.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
 <param name="ignoreUnrecognized">Ignore CLI arguments that do not match the schema. Defaults to false.</param>
 <param name="raiseOnUsage">Treat '--help' parameters as parse errors. Defaults to false.</param>
</member>
<member name="T:Argu.ArgumentParser`1">
<summary>
 The Argu type generates an argument parser given a type argument
 that is an F# discriminated union. It can then be used to parse command line arguments
 or XML configuration.
</summary>
</member>
<member name="F:Argu.CliPrefix.Empty">
<summary>
 No CLI prefix
</summary>
</member>
<member name="F:Argu.CliPrefix.Dash">
<summary>
 Single Dash prefix
</summary>
</member>
<member name="F:Argu.CliPrefix.DoubleDash">
<summary>
 Double Dash prefix
</summary>
</member>
<member name="T:Argu.CliPrefix">
<summary>
 CLI prefix enumeration
</summary>
</member>
<member name="T:Argu.CliPrefixAttribute">
<summary>
 Specifies a custom prefix for auto generated CLI names.
</summary>
</member>
<member name="T:Argu.CustomAppSettingsAttribute">
<summary>
 Sets a custom AppSettings key name.
</summary>
</member>
<member name="T:Argu.CustomCommandLineAttribute">
<summary>
 Sets a custom command line name.
</summary>
</member>
<member name="T:Argu.EqualsAssignmentAttribute">
<summary>
 Use &apos;--param=arg&apos; assignment syntax in CLI.
</summary>
</member>
<member name="T:Argu.ExceptionExiter">
<summary>
 Handles argument parser errors by raising an exception
</summary>
</member>
<member name="T:Argu.FirstAttribute">
<summary>
 Argument can only be placed at the beginning of the command line.
</summary>
</member>
<member name="T:Argu.GatherAllSourcesAttribute">
<summary>
 Gathers all parsed results from both AppSettings and command line.
</summary>
</member>
<member name="T:Argu.HiddenAttribute">
<summary>
 Hide from command line argument documentation.
</summary>
</member>
<member name="P:Argu.IArgParserTemplate.Usage">
<summary>
 returns a usage string for every union case
</summary>
</member>
<member name="T:Argu.IArgParserTemplate">
<summary>
 Interface that must be implemented by all Argu template types
</summary>
</member>
<member name="T:Argu.IExiter">
<summary>
 An interface for error handling in the argument parser
</summary>
</member>
<member name="T:Argu.MandatoryAttribute">
<summary>
 Demands at least one parsed result for this branch; an exception is raised otherwise.
</summary>
</member>
<member name="T:Argu.NoAppSettingsAttribute">
<summary>
 Disable AppSettings parsing for this branch.
</summary>
</member>
<member name="T:Argu.NoCommandLineAttribute">
<summary>
 Disable command line parsing for this branch.
</summary>
</member>
<member name="T:Argu.ParseCSVAttribute">
<summary>
 Parse comma separated values in AppSettings
</summary>
</member>
<member name="P:Argu.ParseResults`1.IsUsageRequested">
<summary>
 Returns true if &apos;--help&apos; parameter has been specified in the command line.
</summary>
</member>
<member name="M:Argu.ParseResults`1.Usage(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Returns the usage string.</summary>
 <param name="message">The message to be displayed on top of the usage string.</param>
</member>
<member name="M:Argu.ParseResults`1.TryPostProcessResult``2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type. 
          Command line parameters have precedence over AppSettings parameters.
          Results are passed to a post-processing function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="parser">The post-processing parser.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.TryGetResult``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type, if it exists. 
          Command line parameters have precedence over AppSettings parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.TryGetResult(Microsoft.FSharp.Quotations.FSharpExpr{`0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type, if it exists. 
          Command line parameters have precedence over AppSettings parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.Raise``1(System.Exception,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Raise an error through the argument parser's exiter mechanism. Display usage optionally.</summary>
 <param name="e">The error to be displayed.</param>
 <param name="errorCode">The error code to returned.</param>
 <param name="showUsage">Print usage together with error message.</param>
</member>
<member name="M:Argu.ParseResults`1.Raise``1(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Raise an error through the argument parser's exiter mechanism. Display usage optionally.</summary>
 <param name="msg">The error message to be displayed.</param>
 <param name="errorCode">The error code to returned.</param>
 <param name="showUsage">Print usage together with error message.</param>
</member>
<member name="M:Argu.ParseResults`1.PostProcessResults``2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Query parse results for given argument kind.
          Command line parameters have precedence over AppSettings parameters.
          Results are passed to a post-processing function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="parser">The post-processing parser.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.PostProcessResult``2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type. 
          Command line parameters have precedence over AppSettings parameters.
          Results are passed to a post-processing function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="parser">The post-processing parser.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.IterResults``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>
     Iterates through *all* parse results for a given argument kind.
     Command line parameters have precedence over AppSettings parameters.
     Results are passed to an iterator function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="iterator">The iterator body.</param>
 <param name="source">Option source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.IterResult``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>
     Iterates through the *last* parse result for a given argument kind.
     Command line parameters have precedence over AppSettings parameters.
     Results are passed to an iterator function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="iterator">The iterator body.</param>
 <param name="source">Option source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetResults``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Query parse results for argument with parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetResults(Microsoft.FSharp.Quotations.FSharpExpr{`0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Query parse results for parameterless argument.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetResult``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type. 
          Command line parameters have precedence over AppSettings parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="defaultValue">Return this of no parameter of specific kind has been specified.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetResult(Microsoft.FSharp.Quotations.FSharpExpr{`0},Microsoft.FSharp.Core.FSharpOption{`0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type. 
          Command line parameters have precedence over AppSettings parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="defaultValue">Return this of no parameter of specific kind has been specified.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetAllResults(Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Gets all parse results.</summary>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.Contains``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Checks if parameter of specific kind has been specified.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.Contains(Microsoft.FSharp.Quotations.FSharpExpr{`0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Checks if parameter of specific kind has been specified.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.Catch``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Handles any raised exception through the argument parser's exiter mechanism. Display usage optionally.</summary>
 <param name="f">The operation to be executed.</param>
 <param name="errorCode">The error code to returned.</param>
 <param name="showUsage">Print usage together with error message.</param>
</member>
<member name="T:Argu.ParseResults`1">
<summary>
 Argument parsing result holder.
</summary>
</member>
<member name="T:Argu.ParseSource">
<summary>
 Source from which to parse arguments
</summary>
</member>
<member name="T:Argu.PrintLabelsAttribute">
<summary>
 Print F# 3.1 field labels in &apos;Usage&apos; string.
</summary>
</member>
<member name="T:Argu.ProcessExiter">
<summary>
 Handles argument parser errors by exiting the process
 after printing a parse error.
</summary>
</member>
<member name="T:Argu.RestAttribute">
<summary>
 Consume all remaining command line arguments.
</summary>
</member>
<member name="P:Argu.ArgInfo.ParserInfo.UnParser">
<summary>
 unparser
</summary>
</member>
<member name="P:Argu.ArgInfo.ParserInfo.Parser">
<summary>
 parser
</summary>
</member>
<member name="P:Argu.ArgInfo.ParserInfo.Type">
<summary>
 field type
</summary>
</member>
<member name="P:Argu.ArgInfo.ParserInfo.Label">
<summary>
 field label
</summary>
</member>
<member name="P:Argu.ArgInfo.ParserInfo.Name">
<summary>
 Type name
</summary>
</member>
<member name="T:Argu.ArgInfo.ParserInfo">
<summary>
 Union Case Field info
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgParseResult`1.Source">
<summary>
 parse source 
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgParseResult`1.ParseContext">
<summary>
 metadata provided by the parser
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgParseResult`1.ArgInfo">
<summary>
 ArgInfo used to parse parameter
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgParseResult`1.FieldContents">
<summary>
 untyped version of tuple of branch contents
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgParseResult`1.Value">
<summary>
 union case value
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.GatherAllSources">
<summary>
 Combine AppSettings with CLI inputs
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.Hidden">
<summary>
 Hide from Usage
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.Mandatory">
<summary>
 Fails if no argument of this type is specified
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.AppSettingsCSV">
<summary>
 If specified, multiple parameters can be added in AppSettings in CSV form.
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.PrintLabels">
<summary>
 Print labels in Usage ()
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.IsEqualsAssignment">
<summary>
 If specified, use &apos;--param=arg&apos; CLI parsing syntax
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.IsFirst">
<summary>
 If specified, parameter can only be at start of CLI parameters
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.IsRest">
<summary>
 If specified, should consume remaining tokens from the CLI
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.Usage">
<summary>
 Description of the parameter
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.AppSettingsName">
<summary>
 name used in AppSettings
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.CommandLineNames">
<summary>
 head element denotes primary command line arg
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.FieldCtor">
<summary>
 Composes case fields into a tuple, if not nullary
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.CaseCtor">
<summary>
 Builds a union case out of its field parameters
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.FieldParsers">
<summary>
 Field parser definitions
</summary>
</member>
<member name="P:Argu.ArgInfo.ArgInfo.Id">
<summary>
 Argument identifier
</summary>
</member>
<member name="T:Argu.ArgInfo.ArgInfo">
<summary>
 Represents a parsing schema for a single parameter
</summary>
</member>
<member name="T:Argu.ArgInfo.ArgId">
<summary>
 IComparable UnionCaseInfo wrapper
</summary>
</member>
<member name="M:Argu.ArgInfo.buildResult``1(Argu.ArgInfo.ArgInfo,Argu.ParseSource,System.String,System.Object[])">
<summary>
 construct a parse result from untyped collection of parsed arguments
</summary>
</member>
<member name="M:Argu.ArgInfo.preComputeArgInfo(Microsoft.FSharp.Reflection.UnionCaseInfo)">
<summary>
 generate argument parsing schema from given UnionCaseInfo
</summary>
</member>
<member name="M:Argu.ArgInfo.expr2ArgId(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 recognize exprs that strictly contain DU constructors
 e.g. &lt;@ Case @&gt; is valid but &lt;@ fun x y -&gt; Case y x @&gt; is invalid
</summary>
</member>
<member name="P:Argu.ArgInfo.helpInfo">
<summary>
 dummy argInfo for --help arg
</summary>
</member>
<member name="M:Argu.ArgInfo.getEnvArgs">
<summary>
 get CL arguments from environment
</summary>
</member>
<member name="M:Argu.ArgInfo.uciToAppConf(Microsoft.FSharp.Reflection.UnionCaseInfo)">
<summary>
 construct an App.Config param from UCI name
</summary>
</member>
<member name="M:Argu.ArgInfo.uciToOpt(Microsoft.FSharp.Reflection.UnionCaseInfo)">
<summary>
 construct a CLI param from UCI name
</summary>
</member>
<member name="M:Argu.ArgInfo.hasCommandLineParam(Argu.ArgInfo.ArgInfo,System.String)">
<summary>
 checks if given parameter name is contained in argument
</summary>
</member>
<member name="M:Argu.ArgInfo.getName(Argu.ArgInfo.ArgInfo)">
<summary>
 gets the default name of the argument
</summary>
</member>
<member name="M:Argu.ParseSourceModule.hasFlag(Argu.ParseSource,Argu.ParseSource)">
<summary>
 NET35 support
</summary>
</member>
<member name="M:Argu.Parsers.combine``1(Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgInfo},System.Boolean,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpMap{Argu.ArgInfo.ArgId,Microsoft.FSharp.Core.FSharpChoice{Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgParseResult{``0}},System.Exception}}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpMap{Argu.ArgInfo.ArgId,Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgParseResult{``0}}}})">
 <summary>
     Combines two parse results, AppConfig and CLI, overriding where appropriate.
     By default, CLI parameters override AppConfig parameters.
 </summary>
 <param name="argInfo">List of all possible arguments.</param>
 <param name="ignoreMissing">do not raise exception if missing mandatory parameters.</param>
 <param name="appSettingsResults">parsed results from AppSettings</param>
 <param name="commandLineResults">parsed results from CLI</param>
</member>
<member name="M:Argu.Parsers.parseAppSettings``1(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgInfo})">
 <summary>
     Parse a given AppSettings file.  
 </summary>
 <param name="appConfigFile">AppConfig file to parsed. Defaults to ConfigutionManager resolution.</param>
 <param name="argInfo">List of all possible arguments.</param>
</member>
<member name="M:Argu.Parsers.parseAppSettingsPartial``1(Microsoft.FSharp.Core.FSharpFunc{System.String,System.String},Microsoft.FSharp.Collections.FSharpMap{Argu.ArgInfo.ArgId,Microsoft.FSharp.Core.FSharpChoice{Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgParseResult{``0}},System.Exception}},Argu.ArgInfo.ArgInfo)">
 <summary>
     Parse single AppSettings entry
 </summary>
 <param name="appSettingsReader">AppSettings key-value reader function.</param>
 <param name="state">threaded parse state.</param>
 <param name="aI">Argument Info to parse.</param>
</member>
<member name="M:Argu.Parsers.parseCommandLine``1(Microsoft.FSharp.Collections.FSharpMap{System.String,Argu.ArgInfo.ArgInfo},System.Boolean,System.String[])">
 <summary>
     Parse the entire command line
 </summary>
 <param name="argIdx">Dictionary of all possible CL arguments.</param>
 <param name="ignoreUnrecognized">Ignored unrecognized parameters.</param>
 <param name="inputs">CL inputs</param>
</member>
<member name="M:Argu.Parsers.parseCommandLinePartial``1(Argu.Parsers.CliParseState{``0})">
<summary>
 parse the next command line argument and append to state
</summary>
</member>
<member name="M:Argu.UnParsers.printAppSettings``1(Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgInfo},System.Boolean,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
     returns an App.Config XElement given a set of config parameters
 </summary>
 <param name="argInfo"></param>
 <param name="printComments"></param>
 <param name="args"></param>
</member>
<member name="M:Argu.UnParsers.printCommandLineSyntax(Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgInfo})">
 <summary>
     print the command line syntax
 </summary>
 <param name="argInfo"></param>
</member>
<member name="M:Argu.UnParsers.printCommandLineArgs``1(Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgInfo},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
     print a command line argument for a set of parameters   
 </summary>
 <param name="argInfo"></param>
 <param name="args"></param>
</member>
<member name="M:Argu.UnParsers.printUsage(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Collections.FSharpList{Argu.ArgInfo.ArgInfo})">
 <summary>
     print usage string for a collection of arg infos
 </summary>
 <param name="msg"></param>
 <param name="argInfo"></param>
</member>
<member name="M:Argu.UnParsers.printArgUsage(Argu.ArgInfo.ArgInfo)">
 <summary>
     print usage string for given arg info
 </summary>
 <param name="aI"></param>
</member>
<member name="T:Argu.Utils.ProjectionComparison`2">
<summary>
 inherit this type for easy comparison semantics
</summary>
</member>
<member name="T:Argu.Utils.Unchecked">
<summary>
 reflected version of Unchecked.defaultof
</summary>
</member>
<member name="M:Argu.Utils.getMethod(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 gets the top-Level methodInfo call in a quotation
</summary>
</member>
<member name="M:Argu.Utils.List.|TryMap|_|``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Nondeterministic Map active pattern combinator
</summary>
</member>
<member name="M:Argu.Utils.List.|Map|``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Map active pattern combinator
</summary>
</member>
<member name="M:Argu.Utils.List.tryMap``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
     returns `Some (map f ts)` iff `(forall t) ((f t).IsSome)`
 </summary>
 <param name="f"></param>
 <param name="ts"></param>
</member>
<member name="M:Argu.Utils.List.tryLast``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 try fetching last element of a list
</summary>
</member>
<member name="M:Argu.Utils.List.last``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 fetch last element of a non-empty list
</summary>
</member>
</members>
</doc>
