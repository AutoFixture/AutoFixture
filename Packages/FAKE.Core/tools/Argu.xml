<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Argu</name></assembly>
<members>
<member name="T:Argu.ArguException">
<summary>
 Exception raised by Argu
</summary>
</member>
<member name="T:Argu.ArguParseException">
<summary>
 Parse exception raised by Argu
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.GatherAllSources">
<summary>
 Combine AppSettings with CLI inputs
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.IsGatherUnrecognized">
<summary>
 Declares that the parameter should gather any unrecognized CLI params
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.IsHidden">
<summary>
 Hide from Usage
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.IsUnique">
<summary>
 Specifies that argument should be specified at most once in CLI
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.IsMandatory">
<summary>
 Fails if no argument of this type is specified
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.AppSettingsCSV">
<summary>
 If specified, multiple parameters can be added in AppSettings in CSV form.
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.CustomAssignmentSeparator">
<summary>
 Separator token used for EqualsAssignment syntax; e.g. &apos;=&apos; forces &apos;--param=arg&apos; syntax
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.IsRest">
<summary>
 If specified, should consume remaining tokens from the CLI
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.IsMainCommand">
<summary>
 Specifies that this argument is the main CLI command
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.CliPosition">
<summary>
 Mandated Cli position for the argument
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.AppSettingsSplitOptions">
<summary>
 AppSettings parameter split options
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.AppSettingsSeparators">
<summary>
 AppSettings parameter separator
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.Description">
<summary>
 Description of the parameter
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.AppSettingsName">
<summary>
 name used in AppSettings
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.CommandLineNames">
<summary>
 head element denotes primary command line arg
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.ArgumentType">
<summary>
 Type of argument parser
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.UnionCaseInfo">
<summary>
 Union case reflection identifier
</summary>
</member>
<member name="P:Argu.ArgumentCaseInfo.Name">
<summary>
 Human readable name identifier
</summary>
</member>
<member name="T:Argu.ArgumentCaseInfo">
<summary>
 Union argument metadata
</summary>
</member>
<member name="P:Argu.ArgumentParser.ParentInfo">
<summary>
 If subcommand parser, gets parent argument metadata
</summary>
</member>
<member name="P:Argu.ArgumentParser.IsSubCommandParser">
<summary>
 Returns true if parser corresponds to a subcommand
</summary>
</member>
<member name="P:Argu.ArgumentParser.HelpTextMessage">
<summary>
 Gets the message that will be displayed at the top of the help text
</summary>
</member>
<member name="P:Argu.ArgumentParser.HelpFlags">
<summary>
 Gets the help flags specified for the CLI parser
</summary>
</member>
<member name="P:Argu.ArgumentParser.HelpDescription">
<summary>
 Gets the help description specified for the CLI parser
</summary>
</member>
<member name="P:Argu.ArgumentParser.ErrorHandler">
<summary>
 Gets the default error handler used by the instance
</summary>
</member>
<member name="M:Argu.ArgumentParser.PrintUsage(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Formats a usage string for the argument parser.</summary>
 <param name="message">The message to be displayed on top of the usage string.</param>
 <param name="programName">Override the default program name settings.</param>
 <param name="hideSyntax">Do not display 'USAGE: [syntax]' at top of usage string. Defaults to false.</param>
 <param name="usageStringCharacterWidth">Text width used when formatting the usage string.</param>
</member>
<member name="M:Argu.ArgumentParser.PrintCommandLineSyntax(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Prints command line syntax. Useful for generating documentation.
 </summary>
 <param name="programName">Program name identifier placed at start of syntax string</param>
 <param name="usageStringCharacterWidth">Text width used when formatting the usage string.</param>
</member>
<member name="M:Argu.ArgumentParser.GetSubCommandParsers">
<summary>
 Gets all subcommand parsers for given parser
</summary>
</member>
<member name="M:Argu.ArgumentParser.GetArgumentCases">
<summary>
 Gets metadata for all union cases used by parser
</summary>
</member>
<member name="M:Argu.ArgumentParser.Create``1(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Argu.IExiter})">
 <summary>
     Create a new argument parsing scheme using given 'Template type
     which must be an F# Discriminated Union.
 </summary>
 <param name="programName">Program identifier, e.g. 'cat'. Defaults to the current executable name.</param>
 <param name="helpTextMessage">Message that will be displayed at the top of the help text.</param>
 <param name="usageStringCharacterWidth">Text width used when formatting the usage string. Defaults to 80 chars.</param>
 <param name="errorHandler">The implementation of IExiter used for error handling. Exception is default.</param>
</member>
<member name="M:Argu.ArgumentParser.Accept``1(Argu.IArgumentParserVisitor{``0})">
 <summary>
     Enables access to the typed API of an ArgumentParser 
     when template type is unknown.
 </summary>
 <param name="visitor">Visitor used to access the parser.</param>
</member>
<member name="T:Argu.ArgumentParser">
<summary>
 The Argu type generates an argument parser given a type argument
 that is an F# discriminated union. It can then be used to parse command line arguments
 or XML configuration.
</summary>
</member>
<member name="M:Argu.ArgumentParser`1.ToParseResults(System.Collections.Generic.IEnumerable{`0})">
 <summary>
     Converts a sequence of template argument inputs into a ParseResults instance
 </summary>
 <param name="inputs">Argument input sequence.</param>
</member>
<member name="M:Argu.ArgumentParser`1.PrintCommandLineArgumentsFlat(Microsoft.FSharp.Collections.FSharpList{`0})">
 <summary>Prints parameters in command line format. Useful for argument string generation.</summary>
</member>
<member name="M:Argu.ArgumentParser`1.PrintCommandLineArguments(Microsoft.FSharp.Collections.FSharpList{`0})">
 <summary>Prints parameters in command line format. Useful for argument string generation.</summary>
</member>
<member name="M:Argu.ArgumentParser`1.PrintAppSettingsArguments(Microsoft.FSharp.Collections.FSharpList{`0},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Prints parameters in App.Config format.</summary>
 <param name="args">The parameters that fill out the XML document.</param>
 <param name="printComments">Print XML comments over every configuration entry.</param>
</member>
<member name="M:Argu.ArgumentParser`1.ParseConfiguration(Argu.IConfigurationReader,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse arguments using specified configuration reader only. This defaults to the AppSettings configuration of the current process.</summary>
 <param name="configurationReader">Configuration reader used to source the arguments. Defaults to the AppSettings configuration of the current process.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
</member>
<member name="M:Argu.ArgumentParser`1.ParseCommandLine(Microsoft.FSharp.Core.FSharpOption{System.String[]},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse command line arguments only.</summary>
 <param name="inputs">The command line input. Taken from System.Environment if not specified.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
 <param name="ignoreUnrecognized">Ignore CLI arguments that do not match the schema. Defaults to false.</param>
 <param name="raiseOnUsage">Treat '--help' parameters as parse errors. Defaults to true.</param>
</member>
<member name="M:Argu.ArgumentParser`1.ParseAppSettings(System.Reflection.Assembly,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse AppSettings section of XML configuration of given assembly.</summary>
 <param name="assembly">assembly to get application configuration from.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
</member>
<member name="M:Argu.ArgumentParser`1.ParseAppSettings(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse AppSettings section of XML configuration only.</summary>
 <param name="xmlConfigurationFile">If specified, parse AppSettings configuration from given xml configuration file.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
</member>
<member name="M:Argu.ArgumentParser`1.Parse(Microsoft.FSharp.Core.FSharpOption{System.String[]},Microsoft.FSharp.Core.FSharpOption{Argu.IConfigurationReader},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Parse both command line args and supplied configuration reader.
          Results are merged with command line args overriding configuration parameters.</summary>
 <param name="inputs">The command line input. Taken from System.Environment if not specified.</param>
 <param name="configurationReader">Configuration reader used to source the arguments. Defaults to the AppSettings configuration of the current process.</param>
 <param name="ignoreMissing">Ignore errors caused by the Mandatory attribute. Defaults to false.</param>
 <param name="ignoreUnrecognized">Ignore CLI arguments that do not match the schema. Defaults to false.</param>
 <param name="raiseOnUsage">Treat '--help' parameters as parse errors. Defaults to false.</param>
</member>
<member name="M:Argu.ArgumentParser`1.GetTag(`0)">
 <summary>
     Gets the F# union tag representation for given argument
 </summary>
 <param name="value">Argument instance.</param>
</member>
<member name="M:Argu.ArgumentParser`1.GetSubCommandParser``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{Argu.ParseResults{``0},`0}})">
 <summary>
     Gets a subparser associated with specific subcommand instance
 </summary>
 <param name="expr">Expression providing the subcommand union constructor.</param>
</member>
<member name="M:Argu.ArgumentParser`1.GetArgumentCaseInfo``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}})">
 <summary>
     Gets argument metadata for given union case constructor
 </summary>
 <param name="ctorExpr">Quoted union case constructor.</param>
</member>
<member name="M:Argu.ArgumentParser`1.GetArgumentCaseInfo(`0)">
 <summary>
     Gets argument metadata for given argument instance.
 </summary>
 <param name="value">Argument instance.</param>
</member>
<member name="M:Argu.ArgumentParser`1.#ctor(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Argu.IExiter})">
 <summary>
     Creates a new parser instance based on supplied F# union template.
 </summary>
 <param name="programName">Program identifier, e.g. 'cat'. Defaults to the current executable name.</param>
 <param name="helpTextMessage">Message that will be displayed at the top of the help text.</param>
 <param name="usageStringCharacterWidth">Text width used when formatting the usage string. Defaults to 80 chars.</param>
 <param name="errorHandler">The implementation of IExiter used for error handling. Exception is default.</param>
</member>
<member name="T:Argu.ArgumentParser`1">
<summary>
 The Argu type generates an argument parser given a type argument
 that is an F# discriminated union. It can then be used to parse command line arguments
 or XML configuration.
</summary>
</member>
<member name="F:Argu.ArgumentType.SubCommand">
<summary>
 Argument specifies a subcommand
</summary>
</member>
<member name="F:Argu.ArgumentType.List">
<summary>
 Argument specifies a list of parameters of specific primitive type
</summary>
</member>
<member name="F:Argu.ArgumentType.Optional">
<summary>
 Argument specifies an optional parameter which is primitive
</summary>
</member>
<member name="F:Argu.ArgumentType.Primitive">
<summary>
 Argument specifies primitive parameters like strings or integers
</summary>
</member>
<member name="T:Argu.ArgumentType">
<summary>
 Argument parameter type identifier
</summary>
</member>
<member name="T:Argu.CliPosition">
<summary>
 Cli Position required to place argument
</summary>
</member>
<member name="M:Argu.ConfigurationReader.FromFunction(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpOption{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Create a configuration reader instance using an F# function
</summary>
</member>
<member name="M:Argu.ConfigurationReader.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Create a configuration reader instance using an IDictionary instance
</summary>
</member>
<member name="M:Argu.ConfigurationReader.FromAppSettingsFile(System.String)">
<summary>
 Create a configuration reader instance using a local xml App.Config file
</summary>
</member>
<member name="M:Argu.ConfigurationReader.FromAppSettings(System.Reflection.Assembly)">
<summary>
 Create a configuration reader instance using the location of an assembly file
</summary>
</member>
<member name="M:Argu.ConfigurationReader.FromAppSettings">
<summary>
 Create a configuration reader instance using the application&apos;s resident AppSettings configuration
</summary>
</member>
<member name="T:Argu.ConfigurationReader">
<summary>
 Configuration reader implementations
</summary>
</member>
<member name="T:Argu.ErrorCode">
<summary>
 Error codes reported by Argu
</summary>
</member>
<member name="T:Argu.ExceptionExiter">
<summary>
 Handles argument parser errors by raising an exception
</summary>
</member>
<member name="P:Argu.IArgParserTemplate.Usage">
<summary>
 returns a usage string for every union case
</summary>
</member>
<member name="T:Argu.IArgParserTemplate">
<summary>
 Interface that must be implemented by all Argu template types
</summary>
</member>
<member name="M:Argu.IArgumentParserVisitor`1.Visit``1(Argu.ArgumentParser{``0})">
 <summary>
     Visit argument parser of generic type.
 </summary>
 <param name="parser">Supplied argument parser.</param>
</member>
<member name="T:Argu.IArgumentParserVisitor`1">
<summary>
 Rank-2 function used for accessing typed APIs of untyped parsers
</summary>
</member>
<member name="P:Argu.IConfigurationReader.Name">
<summary>
 Configuration reader identifier
</summary>
</member>
<member name="M:Argu.IConfigurationReader.GetValue(System.String)">
<summary>
 Gets value corresponding to supplied key
</summary>
</member>
<member name="T:Argu.IConfigurationReader">
<summary>
 Abstract key/value configuration reader
</summary>
</member>
<member name="P:Argu.IExiter.Name">
<summary>
 IExiter identifier
</summary>
</member>
<member name="M:Argu.IExiter.Exit``1(System.String,Argu.ErrorCode)">
<summary>
 handle error of given message and error code
</summary>
</member>
<member name="T:Argu.IExiter">
<summary>
 An interface for error handling in the argument parser
</summary>
</member>
<member name="P:Argu.ParseResults`1.UnrecognizedCliParseResults">
<summary>
 Gets all parse results that are not part of the current parsing context
 This is only applicable to subcommand parsing operations
</summary>
</member>
<member name="P:Argu.ParseResults`1.UnrecognizedCliParams">
<summary>
 Gets all unrecognized CLI parameters which
 accumulates if parsed with &apos;ignoreUnrecognized = true&apos;
</summary>
</member>
<member name="P:Argu.ParseResults`1.IsUsageRequested">
<summary>
 Returns true if &apos;--help&apos; parameter has been specified in the command line.
</summary>
</member>
<member name="M:Argu.ParseResults`1.TryPostProcessResult``2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type. 
          Command line parameters have precedence over AppSettings parameters.
          Results are passed to a post-processing function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="parser">The post-processing parser.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.TryGetSubCommand">
 <summary>
     Attempts to recover the subcommand parameter from the results,
     if once has been specified.
 </summary>
</member>
<member name="M:Argu.ParseResults`1.TryGetResult``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type, if it exists. 
          Command line parameters have precedence over AppSettings parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.TryGetResult(Microsoft.FSharp.Quotations.FSharpExpr{`0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type, if it exists. 
          Command line parameters have precedence over AppSettings parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.Raise``1(System.Exception,Microsoft.FSharp.Core.FSharpOption{Argu.ErrorCode},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Raise an error through the argument parser's exiter mechanism. Display usage optionally.</summary>
 <param name="error">The error to be displayed.</param>
 <param name="errorCode">The error code to be returned.</param>
 <param name="showUsage">Print usage together with error message.</param>
</member>
<member name="M:Argu.ParseResults`1.Raise``1(System.String,Microsoft.FSharp.Core.FSharpOption{Argu.ErrorCode},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Raise an error through the argument parser's exiter mechanism. Display usage optionally.</summary>
 <param name="msg">The error message to be displayed.</param>
 <param name="errorCode">The error code to be returned.</param>
 <param name="showUsage">Print usage together with error message.</param>
</member>
<member name="M:Argu.ParseResults`1.PostProcessResults``2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Query parse results for given argument kind.
          Command line parameters have precedence over AppSettings parameters.
          Results are passed to a post-processing function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="parser">The post-processing parser.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.PostProcessResult``2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type. 
          Command line parameters have precedence over AppSettings parameters.
          Results are passed to a post-processing function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="parser">The post-processing parser.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.IterResults``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>
     Iterates through *all* parse results for a given argument kind.
     Command line parameters have precedence over AppSettings parameters.
     Results are passed to an iterator function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="iterator">The iterator body.</param>
 <param name="source">Option source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.IterResult``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>
     Iterates through the *last* parse result for a given argument kind.
     Command line parameters have precedence over AppSettings parameters.
     Results are passed to an iterator function that is error handled by the parser.
 </summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="iterator">The iterator body.</param>
 <param name="source">Option source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetSubCommand">
 <summary>
     Attempts to recover the subcommand parameter from the results,
     if once has been specified.
 </summary>
</member>
<member name="M:Argu.ParseResults`1.GetResults``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Query parse results for argument with parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetResults(Microsoft.FSharp.Quotations.FSharpExpr{`0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Query parse results for parameterless argument.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetResult``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type. 
          Command line parameters have precedence over AppSettings parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="defaultValue">Return this of no parameter of specific kind has been specified.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetResult(Microsoft.FSharp.Quotations.FSharpExpr{`0},Microsoft.FSharp.Core.FSharpOption{`0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Returns the *last* specified parameter of given type. 
          Command line parameters have precedence over AppSettings parameters.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="defaultValue">Return this of no parameter of specific kind has been specified.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.GetAllResults(Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Gets all parse results.</summary>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.Contains``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{``0,`0}},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Checks if parameter of specific kind has been specified.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.Contains(Microsoft.FSharp.Quotations.FSharpExpr{`0},Microsoft.FSharp.Core.FSharpOption{Argu.ParseSource})">
 <summary>Checks if parameter of specific kind has been specified.</summary>
 <param name="expr">The name of the parameter, expressed as quotation of DU constructor.</param>
 <param name="source">Optional source restriction: AppSettings or CommandLine.</param>
</member>
<member name="M:Argu.ParseResults`1.Catch``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},Microsoft.FSharp.Core.FSharpOption{Argu.ErrorCode},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Handles any raised exception through the argument parser's exiter mechanism. Display usage optionally.</summary>
 <param name="f">The operation to be executed.</param>
 <param name="errorCode">The error code to be returned.</param>
 <param name="showUsage">Print usage together with error message.</param>
</member>
<member name="T:Argu.ParseResults`1">
<summary>
 Argument parsing result holder.
</summary>
</member>
<member name="T:Argu.ParseSource">
<summary>
 Source from which to parse arguments
</summary>
</member>
<member name="T:Argu.ProcessExiter">
<summary>
 Handles argument parser errors by exiting the process
 after printing a parse error.
</summary>
</member>
<member name="T:Argu.ArguAttributes.CliPrefixAttribute">
<summary>
 Specifies a custom prefix for auto-generated CLI names.
 This defaults to double dash (&apos;--&apos;).
</summary>
</member>
<member name="T:Argu.ArguAttributes.AppSettingsSeparatorAttribute">
<summary>
 Specify a custom value separator in AppSettings parsing parameters.
 Used in CSV or list-based parameter parsing.
</summary>
</member>
<member name="T:Argu.ArguAttributes.CustomAppSettingsAttribute">
<summary>
 Declares a custom key identifier for the current parameter in AppSettings parsing.
 Replaces the auto-generated identifier name.
</summary>
</member>
<member name="T:Argu.ArguAttributes.AltCommandLineAttribute">
<summary>
 Declares a set of secondary CLI identifiers for the current parameter.
 Does not replace the default identifier which is either auto-generated
 or specified by the CustomCommandLine attribute.
</summary>
</member>
<member name="T:Argu.ArguAttributes.CustomCommandLineAttribute">
<summary>
 Declares a custom default CLI identifier for the current parameter.
 Replaces the auto-generated identifier name.
</summary>
</member>
<member name="T:Argu.ArguAttributes.ColonAssignmentAttribute">
<summary>
 Use &apos;--param:arg&apos; or &apos;--param key:value&apos; assignment syntax in CLI.
 Requires that the argument should have parameters of arity 1 or 2 only.
</summary>
</member>
<member name="T:Argu.ArguAttributes.EqualsAssignmentAttribute">
<summary>
 Use &apos;--param=arg&apos; or &apos;--param key=value&apos; assignment syntax in CLI.
 Requires that the argument should have parameters of arity 1 or 2 only.
</summary>
</member>
<member name="T:Argu.ArguAttributes.CustomAssignmentAttribute">
<summary>
 Use &apos;--param=arg&apos; or &apos;--param key=value&apos; assignment syntax in CLI.
 Requires that the argument should have parameters of arity 1 or 2 only.
 Can be used to specify any assignment separator.
</summary>
</member>
<member name="T:Argu.ArguAttributes.PrintLabelsAttribute">
<summary>
 Print F# 3.1 field labels in usage string. OBSOLETE
</summary>
</member>
<member name="T:Argu.ArguAttributes.MainCommandAttribute">
<summary>
 Declares that argument is the main command of the CLI syntax.
 Arguments are specified without requiring a switch.
</summary>
</member>
<member name="T:Argu.ArguAttributes.LastAttribute">
<summary>
 Declares that argument can only be placed at the end of the CLI syntax.
 A parse exception will be raised if that is not the case.
</summary>
</member>
<member name="T:Argu.ArguAttributes.FirstAttribute">
<summary>
 Declares that argument can only be placed at the beginning of the CLI syntax.
 A parse exception will be raised if that is not the case.
</summary>
</member>
<member name="T:Argu.ArguAttributes.CliPositionAttribute">
<summary>
 Declares that argument should be placed at specific position.
</summary>
</member>
<member name="T:Argu.ArguAttributes.HelpDescriptionAttribute">
<summary>
 Specifies a custom description text for the Help/Usage switches in the usage string.
</summary>
</member>
<member name="T:Argu.ArguAttributes.DisableHelpFlagsAttribute">
<summary>
 Specifies that Help/Usage switches should be disabled for the CLI.
</summary>
</member>
<member name="T:Argu.ArguAttributes.HelpFlagsAttribute">
<summary>
 Specifies a custom set of Help/Usage switches for the CLI.
</summary>
</member>
<member name="T:Argu.ArguAttributes.NoAppSettingsAttribute">
<summary>
 Disable AppSettings parsing for this branch. Use for CLI parsing only.
</summary>
</member>
<member name="T:Argu.ArguAttributes.NoCommandLineAttribute">
<summary>
 Disable CLI parsing for this argument. Use for AppSettings parsing only.
</summary>
</member>
<member name="T:Argu.ArguAttributes.GatherAllSourcesAttribute">
<summary>
 Requires that CLI parameters should not override AppSettings parameters.
 Will return parsed results from both AppSettings and CLI.
</summary>
</member>
<member name="T:Argu.ArguAttributes.RequireSubcommandAttribute">
<summary>
 Demands that at least one subcommand is specified in the CLI; a parse exception is raised otherwise.
</summary>
</member>
<member name="T:Argu.ArguAttributes.GatherUnrecognized">
<summary>
 Denotes that the given argument should accummulate any unrecognized arguments it encounters.
 Must contain a single field of type string
</summary>
</member>
<member name="T:Argu.ArguAttributes.InheritAttribute">
<summary>
 Denotes that the given argument should be inherited in the scope of any subcommands.
</summary>
</member>
<member name="T:Argu.ArguAttributes.ExactlyOnceAttribute">
<summary>
 Demands that the argument should be specified exactly once; a parse exception is raised otherwise.
 Equivalent to attaching both the Mandatory and Unique attribute on the parameter.
</summary>
</member>
<member name="T:Argu.ArguAttributes.UniqueAttribute">
<summary>
 Demands that the argument should be specified at most once; a parse exception is raised otherwise.
</summary>
</member>
<member name="T:Argu.ArguAttributes.MandatoryAttribute">
<summary>
 Demands at least one parsed result for this argument; a parse exception is raised otherwise.
</summary>
</member>
<member name="T:Argu.ArguAttributes.HiddenAttribute">
<summary>
 Hides argument from command line argument usage string.
</summary>
</member>
<member name="T:Argu.ArguAttributes.RestAttribute">
<summary>
 Consume all remaining CLI tokens using this parameter wherever it might occur. OBSOLETE
</summary>
</member>
<member name="T:Argu.ArguAttributes.ParseCSVAttribute">
<summary>
 Parse multiple parameters in AppSettings as comma separated values. OBSOLETE
</summary>
</member>
<member name="T:Argu.ArguAttributes">
<summary>
 Argu Attribute declaration module
</summary>
</member>
<member name="M:Argu.ArgumentParserUtils.tagOf``1(``0)">
<summary>
 gets the F# union tag representation of given argument instance
</summary>
</member>
<member name="M:Argu.ArgumentParserUtils.toParseResults``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 converts a sequence of inputs to a ParseResults instance
</summary>
</member>
<member name="M:Argu.ArgumentParserUtils.ParseResults`1.get_Parser``1(Argu.ParseResults{``0})">
<summary>
 Gets the parser instance corresponding to the parse result
</summary>
</member>
<member name="P:Argu.CliParser.CliTokenReader.CurrentSegment">
<summary>
 returns the substring that corresponds to the current argument being parsed
 e.g &quot;-port 2&quot; from &quot;-Cf -port 2 -bar&quot;
</summary>
</member>
<member name="M:Argu.CliParser.parseCommandLine(Argu.UnionArgInfo.UnionArgInfo,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},System.Int32,Argu.IExiter,System.Boolean,System.Boolean,System.String[])">
 <summary>
     Parse the entire command line
 </summary>
</member>
<member name="M:Argu.CliParser.parseCommandLinePartial(Argu.CliParser.CliParseState,Argu.UnionArgInfo.UnionArgInfo,Argu.CliParser.CliParseResultAggregator)">
<summary>
 parse the next command line argument and append to state
</summary>
</member>
<member name="P:Argu.CliPrefix.DoubleDash">
<summary>
 Double Dash prefix &apos;--&apos;
</summary>
</member>
<member name="P:Argu.CliPrefix.Dash">
<summary>
 Single Dash prefix &apos;-&apos;
</summary>
</member>
<member name="P:Argu.CliPrefix.None">
<summary>
 No Cli Prefix
</summary>
</member>
<member name="T:Argu.CliPrefix">
<summary>
 Predefined CLI prefixes to be added
</summary>
</member>
<member name="M:Argu.CommonParsers.postProcessResults(Argu.UnionArgInfo.UnionArgInfo,System.Boolean,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpChoice{Argu.UnionArgInfo.UnionCaseParseResult[],System.Exception}[]},Microsoft.FSharp.Core.FSharpOption{Argu.UnionArgInfo.UnionParseResults})">
 <summary>
     Combines two parse results, AppSettings and CLI, overriding where appropriate.
     By default, CLI parameters override AppSettings parameters.
 </summary>
</member>
<member name="M:Argu.CommonParsers.mkParseResultFromValues``1(Argu.UnionArgInfo.UnionArgInfo,Argu.IExiter,System.Int32,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},System.Collections.Generic.IEnumerable{``0})">
<summary>
 Create a ParseResults&lt;_&gt; instance from a set of template parameters
</summary>
</member>
<member name="M:Argu.CommonParsers.mkUnionCase(Argu.UnionArgInfo.UnionCaseArgInfo,System.Int32,Argu.ParseSource,System.String,System.Object[])">
<summary>
 construct a parse result from untyped collection of parsed arguments
</summary>
</member>
<member name="M:Argu.KeyValueParser.parseKeyValueConfig(Argu.IConfigurationReader,Argu.UnionArgInfo.UnionArgInfo)">
 <summary>
     Parse a given key/value configuration
 </summary>
</member>
<member name="M:Argu.KeyValueParser.parseKeyValuePartial(Argu.KeyValueParser.KeyValueParseState,Argu.UnionArgInfo.UnionCaseArgInfo)">
 <summary>
     Parse single entry from key/value configuration
 </summary>
</member>
<member name="M:Argu.PreCompute.preComputeUnionCaseArgInfo(Microsoft.FSharp.Collections.FSharpList{System.Type},Microsoft.FSharp.Core.FSharpOption{Argu.UnionArgInfo.HelpParam},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Argu.UnionArgInfo.UnionArgInfo},Microsoft.FSharp.Reflection.UnionCaseInfo)">
<summary>
 generate argument parsing schema from given UnionCaseInfo
</summary>
</member>
<member name="M:Argu.PreCompute.getHierarchy(Argu.UnionArgInfo.UnionArgInfo)">
<summary>
 extracts the subcommand argument hierarchy for given UnionArgInfo
</summary>
</member>
<member name="M:Argu.PreCompute.tryGetDuEnumerationParser(Microsoft.FSharp.Core.FSharpOption{System.String},System.Type)">
<summary>
 Creates a primitive parser from an F# DU enumeration 
 (i.e. one with no parameters in any of its union cases)
</summary>
</member>
<member name="M:Argu.PreCompute.tryGetEnumerationParser(Microsoft.FSharp.Core.FSharpOption{System.String},System.Type)">
<summary>
 Creates a primitive parser from an enumeration
</summary>
</member>
<member name="M:Argu.PreCompute.mkPrimitiveParser``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Creates a primitive field parser from given parser/unparser lambdas
</summary>
</member>
<member name="M:Argu.PreCompute.tryExtractUnionParameterLabel(System.Reflection.PropertyInfo)">
<summary>
 Generates an argument label name from given PropertyInfo
</summary>
</member>
<member name="M:Argu.PreCompute.generateCommandName(Microsoft.FSharp.Reflection.UnionCaseInfo)">
<summary>
 construct a command identifier from UCI name
</summary>
</member>
<member name="M:Argu.PreCompute.generateAppSettingsName(Microsoft.FSharp.Reflection.UnionCaseInfo)">
<summary>
 construct an App.Config param from UCI name
</summary>
</member>
<member name="M:Argu.PreCompute.generateEnumName(System.String)">
<summary>
 Generate a CLI Param for enumeration cases
</summary>
</member>
<member name="M:Argu.PreCompute.generateOptionName(Microsoft.FSharp.Reflection.UnionCaseInfo)">
<summary>
 construct a CLI param from UCI name
</summary>
</member>
<member name="M:Argu.UnParsers.mkAppSettingsDocument``1(Argu.UnionArgInfo.UnionArgInfo,System.Boolean,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
     returns an App.Config XDocument given a set of config parameters
 </summary>
</member>
<member name="M:Argu.UnParsers.mkCommandLineArgs(Argu.UnionArgInfo.UnionArgInfo,System.Collections.Generic.IEnumerable{System.Object})">
 <summary>
     print a command line argument for a set of parameters   
 </summary>
</member>
<member name="M:Argu.UnParsers.mkUsageString(Argu.UnionArgInfo.UnionArgInfo,System.String,System.Boolean,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     print usage string for a collection of arg infos
 </summary>
</member>
<member name="M:Argu.UnParsers.mkHelpParamUsage(Argu.UnionArgInfo.HelpParam)">
 <summary>
     print usage string for given help param
 </summary>
</member>
<member name="M:Argu.UnParsers.mkArgUsage(Argu.UnionArgInfo.UnionCaseArgInfo)">
 <summary>
     print usage string for given arg info
 </summary>
</member>
<member name="M:Argu.UnParsers.mkCommandLineSyntax(Argu.UnionArgInfo.UnionArgInfo,System.String,System.Int32,System.String)">
 <summary>
     print the command line syntax
 </summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionParseResults.IsUsageRequested">
<summary>
 Usage string requested by the caller
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionParseResults.UnrecognizedCliParseResults">
<summary>
 CLI parse objects not belonging to the current parser context
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionParseResults.UnrecognizedCliParams">
<summary>
 CLI tokens not recognized by the parser
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionParseResults.Cases">
<summary>
 Results by union case
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseParseResult.Source">
<summary>
 parse source 
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseParseResult.ParseContext">
<summary>
 metadata provided by the parser
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseParseResult.CaseInfo">
<summary>
 ArgInfo used to parse parameter
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseParseResult.Index">
<summary>
 Index denoting order of parse result
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseParseResult.Fields">
<summary>
 Parsed field parameters
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.MainCommandParam">
<summary>
 Main command parameter used by the CLI syntax
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.UnrecognizedGatherParam">
<summary>
 Union case parameter used to gather unrecognized CLI params
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.CliParamIndex">
<summary>
 Union cases indexed by cli parameter names
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.AppSettingsParamIndex">
<summary>
 Union cases indexed by appsettings parameter names
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.GroupedSwitchExtractor">
<summary>
 Single character switches
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.InheritedParams">
<summary>
 Arguments inherited by parent commands
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.TagReader">
<summary>
 Precomputed union tag reader
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.IsRequiredSubcommand">
<summary>
 Specifies that CLI parse results require a subcommand
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.ContainsSubcommands">
<summary>
 Denotes that the current argument contains subcommands
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.HelpParam">
<summary>
 Help flags specified by the library
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.Cases">
<summary>
 Union cases
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.TryGetParent">
<summary>
 If subcommand, attempt to retrieve the parent record
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.Depth">
<summary>
 Contextual depth of current argument w.r.t subcommands
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionArgInfo.Type">
<summary>
 Union Case Argument Info
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.GatherAllSources">
<summary>
 Combine AppSettings with CLI inputs
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.IsGatherUnrecognized">
<summary>
 Declares that the parameter should gather any unrecognized CLI params
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.IsHidden">
<summary>
 Hide from Usage
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.IsUnique">
<summary>
 Specifies that argument should be specified at most once in CLI
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.IsInherited">
<summary>
 Indicates that argument should be inherited in the scope of any sibling subcommands.
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.IsMandatory">
<summary>
 Fails if no argument of this type is specified
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.AppSettingsCSV">
<summary>
 If specified, multiple parameters can be added in Configuration in CSV form.
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.IsRest">
<summary>
 If specified, should consume remaining tokens from the CLI
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.MainCommandName">
<summary>
 Specifies that this argument is the main CLI command
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.CliPosition">
<summary>
 Mandated Cli position for the argument
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.AssignmentParser">
<summary>
 Reads assignment for that specific value
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.CustomAssignmentSeparator">
<summary>
 Separator token used for EqualsAssignment syntax; e.g. &apos;=&apos; forces &apos;--param=arg&apos; syntax
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.AppSettingsSplitOptions">
<summary>
 Configuration parsing split options
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.AppSettingsSeparators">
<summary>
 Configuration parsing parameter separator
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.Description">
<summary>
 Description of the parameter
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.AppSettingsName">
<summary>
 name used in AppSettings
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.CommandLineNames">
<summary>
 head element denotes primary command line arg
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.FieldReader">
<summary>
 Decomposes a case instance into an array of fields
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.FieldCtor">
<summary>
 Composes case fields into a parametric tuple, if not nullary
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.CaseCtor">
<summary>
 Builds a union case out of its field parameters
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.GetParent">
<summary>
 Gets the parent record for union case
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.ParameterInfo">
<summary>
 Field parser definitions or nested union argument
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.UnionCaseInfo">
<summary>
 UCI identifier
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.Arity">
<summary>
 Numbers of parameters in the given union case
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.Depth">
<summary>
 Contextual depth of current argument w.r.t subcommands
</summary>
</member>
<member name="P:Argu.UnionArgInfo.UnionCaseArgInfo.Name">
<summary>
 Human readable name identifier
</summary>
</member>
<member name="T:Argu.UnionArgInfo.UnionCaseArgInfo">
<summary>
 Represents a parsing schema for a single parameter
</summary>
</member>
<member name="T:Argu.UnionArgInfo.HelpParam">
<summary>
 Help Param description
</summary>
</member>
<member name="P:Argu.UnionArgInfo.FieldParserInfo.UnParser">
<summary>
 field value to string unparser
</summary>
</member>
<member name="P:Argu.UnionArgInfo.FieldParserInfo.Parser">
<summary>
 string to field value parser
</summary>
</member>
<member name="P:Argu.UnionArgInfo.FieldParserInfo.Type">
<summary>
 field type
</summary>
</member>
<member name="P:Argu.UnionArgInfo.FieldParserInfo.Label">
<summary>
 field label
</summary>
</member>
<member name="P:Argu.UnionArgInfo.FieldParserInfo.Name">
<summary>
 Type name
</summary>
</member>
<member name="T:Argu.UnionArgInfo.FieldParserInfo">
<summary>
 Union Case Field info
</summary>
</member>
<member name="M:Argu.Utils.PrefixDictionary`1.TryGetPrefix(System.String,System.String@,`0@)">
<summary>
 Look up best matching key entry by prefix
</summary>
</member>
<member name="M:Argu.Utils.PrefixDictionary`1.Item(System.String)">
<summary>
 Gets the value corresponding to supplied key
</summary>
</member>
<member name="T:Argu.Utils.PrefixDictionary`1">
<summary>
 Dictionary enabling lookups by string prefix
 e.g. the string &apos;--foo=bar&apos; can be used to look up the key &apos;--foo&apos;
</summary>
</member>
<member name="T:Argu.Utils.Unchecked">
<summary>
 reflected version of Unchecked.defaultof
</summary>
</member>
<member name="M:Argu.Utils.isNullOrWhiteSpace(System.String)">
<summary>
 Replacement of String.IsNullOrWhiteSpace for NET35
</summary>
</member>
<member name="M:Argu.Utils.expr2Uci(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 recognize exprs that strictly contain DU constructors
 e.g. &lt;@ Case @&gt; is valid but &lt;@ fun x y -&gt; Case y x @&gt; is invalid
</summary>
</member>
<member name="M:Argu.Utils.getEnvironmentCommandLineArgs">
<summary>
 get CL arguments from environment
</summary>
</member>
<member name="M:Argu.Utils.Seq.partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
<summary>
 partition sequence according to predicate
</summary>
</member>
<member name="M:Argu.Utils.Seq.tryLast``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 try fetching last element of a sequence
</summary>
</member>
<member name="M:Argu.Utils.List.tryLast``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 try fetching last element of a list
</summary>
</member>
</members>
</doc>
