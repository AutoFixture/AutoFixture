<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FakeLib</name></assembly>
<members>
<member name="M:Yaaf.FSharp.Scripting.ScriptHost.CreateNew(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.IO.TextWriter},Microsoft.FSharp.Core.FSharpOption{System.IO.TextWriter},Microsoft.FSharp.Core.FSharpOption{System.IO.TextWriter},Microsoft.FSharp.Core.FSharpOption{System.IO.TextWriter},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Quickly create a new IFsiSession with some sane defaults
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.ScriptHost.CreateForwardWriter(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Creates a forwarder Textwriter, which forwards all output to the given function.
 Set revertRedirect only to &quot;false&quot; if you know that f doesn&apos;t print anything to the stdout.
 When revertRedirect is true we capture the Console.Out property and set it before calling f.
 removeNewLines handles the newline characters properly and calls f for every new line instead of every call to
 to the underlaying writers.
 The difference is that with removeNewLines you should use printfn and get lines without newline characters.
 On the other hand without removeNewLines you are called on every TextWriter.Write call,
 so you might be called multiple times for a single lines or a single time for multiple lines.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.ScriptHost.Create(Yaaf.FSharp.Scripting.FsiOptions,Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.IO.TextWriter},Microsoft.FSharp.Core.FSharpOption{System.IO.TextWriter},Microsoft.FSharp.Core.FSharpOption{System.IO.TextWriter},Microsoft.FSharp.Core.FSharpOption{System.IO.TextWriter},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Create a new IFsiSession by specifying all fsi arguments manually.
</summary>
</member>
<member name="P:Yaaf.FSharp.Scripting.FsiOptions.WarnLevel">
<summary>
 Sets a warning level (0 to 5). The default level is 3. Each warning is given a level based on its severity. Level 5 gives more, but less severe, warnings than level 1.
 Level 5 warnings are: 21 (recursive use checked at runtime), 22 (let rec evaluated out of order), 45 (full abstraction), and 52 (defensive copy). All other warnings are level 2.
</summary>
</member>
<member name="P:Yaaf.FSharp.Scripting.FsiOptions.Default">
<summary>
 Sets a warning level (0 to 5). The default level is 3. Each warning is given a level based on its severity. Level 5 gives more, but less severe, warnings than level 1.
 Level 5 warnings are: 21 (recursive use checked at runtime), 22 (let rec evaluated out of order), 45 (full abstraction), and 52 (defensive copy). All other warnings are level 2.
</summary>
</member>
<member name="T:Yaaf.FSharp.Scripting.FsiOptions">
<summary>
 See https://msdn.microsoft.com/en-us/library/dd233172.aspx
</summary>
</member>
<member name="P:Yaaf.FSharp.Scripting.IFsiSession.DynamicAssembly">
<summary>
 Gets the currently build dynamic assembly.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.IFsiSession.TryEvalExpressionWithOutput(System.String)">
<summary>
 Try to evaluate the given expression and return its result.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.IFsiSession.EvalScriptWithOutput(System.String)">
<summary>
 Evaluate the given script.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.IFsiSession.EvalInteractionWithOutput(System.String)">
<summary>
 Evaluate the given interaction.
</summary>
</member>
<member name="T:Yaaf.FSharp.Scripting.IFsiSession">
<summary>
 Represents a simple F# interactive session.
</summary>
</member>
<member name="T:Yaaf.FSharp.Scripting.FsiExpressionTypeException">
<summary>
 Exception for invalid expression types
</summary>
</member>
<member name="T:Yaaf.FSharp.Scripting.FsiEvaluationException">
<summary>
 This exception indicates that an exception happened while compiling or executing given F# code.
</summary>
</member>
<member name="T:Yaaf.FSharp.Scripting.Shell.InteractiveSettings">
<summary>
 Implements a simple &apos;fsi&apos; object to be passed to the FSI evaluator
</summary>
</member>
<member name="T:Yaaf.FSharp.Scripting.Shell.SimpleEventLoop">
<summary>
 Represents a simple (fake) event loop for the &apos;fsi&apos; object
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.Extensions.IFsiSession.Handle``1(Yaaf.FSharp.Scripting.IFsiSession,Microsoft.FSharp.Core.FSharpFunc{System.String,``0},System.String)">
<summary>
 Handle the given evaluation function
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.Extensions.IFsiSession.WithCurrentDirectory``1(Yaaf.FSharp.Scripting.IFsiSession,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Same as ChangeCurrentDirectory but takes a function for the scope.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.Extensions.IFsiSession.ChangeCurrentDirectory(Yaaf.FSharp.Scripting.IFsiSession,System.String)">
<summary>
 Change the current directory (so that relative paths within scripts work properly).
 Returns a handle to change the current directory back to it&apos;s initial state
 (Because this will change the current directory of the currently running code as well!).
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.Extensions.IFsiSession.Let``1(Yaaf.FSharp.Scripting.IFsiSession,System.String,``0)">
<summary>
 Assigns the given object to the given name (ie &quot;let varName = obj&quot;)
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.Extensions.IFsiSession.EvalExpression``1(Yaaf.FSharp.Scripting.IFsiSession,System.String)">
<summary>
 Evaluate the given expression and return its result.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.Extensions.IFsiSession.EvalScriptAsInteraction(Yaaf.FSharp.Scripting.IFsiSession,System.String)">
<summary>
 See https://github.com/Microsoft/visualfsharp/issues/1392
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.Extensions.IFsiSession.EvalScriptAsInteractionWithOutput(Yaaf.FSharp.Scripting.IFsiSession,System.String)">
<summary>
 See https://github.com/Microsoft/visualfsharp/issues/1392
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.StringHelpers.String.splitUnescape(System.Char,System.String,System.String)">
<summary>
 Reproduces the original substrings from a string created with concatEscape.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.StringHelpers.String.concatEscape(System.Char,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Returns a new string by connecting the given strings with the given separator.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.StringHelpers.Tokenizer.create(System.Char,System.String)">
<summary>
 Returns a function who can convert a given source string to a token stream.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.CompilerServiceExtensions.Type.get_FSharpFullNameWithTypeArgs(System.Type)">
<summary>
 Gets a string that can be used in F# source code to reference the current type instance.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.CompilerServiceExtensions.Type.get_FSharpParamList(System.Type)">
<summary>
 The parameter list of the current type, sets &quot;_&quot; if the current instance is a generic definition.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.CompilerServiceExtensions.Type.get_FSharpFullName(System.Type)">
<summary>
 Gets the FullName of the current type in F# source code.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.CompilerServiceExtensions.Type.get_FSharpName(System.Type)">
<summary>
 The name of the current type instance in F# source code.
</summary>
</member>
<member name="M:Yaaf.FSharp.Scripting.CompilerServiceExtensions.Type.get_NamespaceName(System.Type)">
<summary>
 The FullName but without any generic parameter types.
</summary>
</member>
<member name="M:Fake.Checksum.CheckFileHash(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{Fake.ChecksumHashAlgorithm})">
<summary>
 Check if the hash in parameter is the valid hash of the file
</summary>
</member>
<member name="M:Fake.Checksum.CalculateFileHash(System.String,Microsoft.FSharp.Core.FSharpOption{Fake.ChecksumHashAlgorithm})">
<summary>
 Calculate the hash of a file. Default hash algorithm used: SHA256
</summary>
</member>
<member name="T:Fake.Checksum">
<summary>
 Allow to calculate checksum
</summary>
</member>
<member name="M:Fake.UserInputHelper.getUserPassword(System.String)">
<summary>
 Return a string entered by the user followed by enter. The input is replaced by &apos;*&apos; on the screen.
</summary>
</member>
<member name="M:Fake.UserInputHelper.getUserInput(System.String)">
<summary>
 Return a string entered by the user followed by enter. The input is echoed to the screen.
</summary>
</member>
<member name="T:Fake.UserInputHelper">
<summary>
 This module contains functions which allow to interactively input values
</summary>
</member>
<member name="T:Fake.EnvironmentHelper.MachineDetails">
<summary>
 A record which allows to display lots of machine specific information like machine name, processor count etc.
</summary>
</member>
<member name="T:Fake.EnvironmentHelper.EnvironTarget">
<summary>
 Type alias for System.EnvironmentVariableTarget
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getMachineEnvironment">
<summary>
 Retrieves lots of machine specific information like machine name, processor count etc.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getDrivesInfo">
<summary>
 Retrieves information about the hard drives
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getInstalledDotNetFrameworks">
<summary>
 Returns a sequence with all installed .NET framework versions
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.encoding">
<summary>
 Contains the IO encoding which is given via build parameter &quot;encoding&quot; or the default encoding if no encoding was specified.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.convertWindowsToCurrentPath(System.String)">
<summary>
 Convert the given windows path to a path in the current system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.directorySeparator">
<summary>
 The directory separator string. On most systems / or \
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.documentsFolder">
<summary>
 The path to the personal documents
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getTargetPlatformDir(System.String)">
<summary>
 Gets the local directory for the given target platform
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getNewestTool``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Helper function to help find framework or sdk tools from the 
 newest toolkit available
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.sdkBasePath">
<summary>
 Base path for getting tools from windows SDKs
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.TargetPlatformPrefix">
<summary>
 The path of the current target platform
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.platformInfoAction(System.Diagnostics.ProcessStartInfo)">
<summary>
 Modifies the ProcessStartInfo according to the platform semantics
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.monoArguments">
<summary>
 Arguments on the Mono executable
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isMono">
<summary>
 Determines if the current system is a mono system
 Todo: Detect mono on windows
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isLinux">
<summary>
 Determines if the current system is a Linux system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isMacOS">
<summary>
 Determines if the current system is a MacOs system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isUnix">
<summary>
 Determines if the current system is an Unix system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.isWindows">
<summary>
 Determines if the current system is a Windows system
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.SystemRoot">
<summary>
 The system root environment variable. Typically &quot;C:\Windows&quot;
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.ProgramFilesX86">
<summary>
 The path of Program Files (x86)
 It seems this covers all cases where PROCESSOR\_ARCHITECTURE may misreport and the case where the other variable 
 PROCESSOR\_ARCHITEW6432 can be null
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.ProgramFiles">
<summary>
 The path of the &quot;Program Files&quot; folder - might be x64 on x64 machine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getBuildParam(System.String)">
<summary>
 Returns the value of the build parameter with the given name if it was set and otherwise an empty string
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getBuildParamOrDefault(System.String,System.String)">
<summary>
 Returns the value of the build parameter with the given name if it was set and otherwise the given default value
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.hasBuildParam(System.String)">
<summary>
 Returns if the build parameter with the given name was set
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.appSetting(System.String)">
<summary>
 Retrieves the application settings variable with the given name
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.splitEnvironVar(System.String)">
<summary>
 Splits the entries of an environment variable and removes the empty ones.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVarOrNone(System.String)">
<summary>
 Retrieves the environment variable or None if no value was set
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getEnvironmentVarAsBool(System.String)">
<summary>
 Retrieves the environment variable with the given name or returns false if no value was set
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getEnvironmentVarAsBoolOrDefault(System.String,System.Boolean)">
<summary>
 Retrieves the environment variable with the given name or returns the default value if no value was set
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVarOrFail(System.String)">
<summary>
 Retrieves the environment variable with the given name or fails if not found
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVarOrDefault(System.String,System.String)">
<summary>
 Retrieves the environment variable with the given name or returns the default if no value was set
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.setBuildParam(System.String,System.String)">
<summary>
 Sets the build parameter with the given name for the current process.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.clearProcessEnvironVar(System.String)">
<summary>
 Clears the environment variable with the given name for the current process.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.setProcessEnvironVar(System.String,System.String)">
<summary>
 Sets the environment variable with the given name for the current process.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.setMachineEnvironVar(System.String,System.String)">
<summary>
 Sets the environment variable with the given name for the current machine.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.setUserEnvironVar(System.String,System.String)">
<summary>
 Sets the environment variable with the given name for the current user.
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.setEnvironVar(System.String,System.String)">
<summary>
 Sets the environment variable with the given name
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVars(System.EnvironmentVariableTarget)">
<summary>
 Retrieves all environment variables from the given target
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.op_LessDivideGreater(System.String,System.String)">
<summary>
 Combines two path strings using Path.Combine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.op_AtAt(System.String,System.String)">
<summary>
 Combines two path strings using Path.Combine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.combinePathsNoTrim(System.String,System.String)">
<summary>
 Combines two path strings using Path.Combine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.combinePaths(System.String,System.String)">
<summary>
 Combines two path strings using Path.Combine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVar(System.String)">
<summary>
 Retrieves the environment variable with the given name
</summary>
</member>
<member name="T:Fake.EnvironmentHelper">
<summary>
 This module contains functions which allow to read and write environment variables and build parameters
</summary>
</member>
<member name="T:Fake.RegistryHelper.RegistryBaseKey">
<summary>
 Registry base keys.
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistrySubKeyNames(Fake.RegistryHelper.RegistryBaseKey,System.String)">
<summary>
 Returns all the subKey names of a registry key
</summary>
</member>
<member name="M:Fake.RegistryHelper.deleteRegistrySubKey(Fake.RegistryHelper.RegistryBaseKey,System.String)">
<summary>
 Deletes a registry subKey
</summary>
</member>
<member name="M:Fake.RegistryHelper.createRegistrySubKey(Fake.RegistryHelper.RegistryBaseKey,System.String)">
<summary>
 Create a registry subKey
</summary>
</member>
<member name="M:Fake.RegistryHelper.valueExistsForKey(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String)">
<summary>
 Returns whether or not a registry value name exists for a key
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryValueNames(Fake.RegistryHelper.RegistryBaseKey,System.String)">
<summary>
 Returns all the value names of a registry key
</summary>
</member>
<member name="M:Fake.RegistryHelper.deleteRegistryValue(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String)">
<summary>
 Deletes the registry value from its key
</summary>
</member>
<member name="M:Fake.RegistryHelper.setRegistryValue``1(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String,``0)">
<summary>
 Sets a registry value
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryValue64(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String)">
<summary>
 Gets a registy value as string
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryValue(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String)">
<summary>
 Gets a registy value as string
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryKey(Fake.RegistryHelper.RegistryBaseKey,System.String,System.Boolean)">
<summary>
 Gets a registy key and falls back to 32 bit if the 64bit key is not there
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryKey64(Fake.RegistryHelper.RegistryBaseKey,System.String,System.Boolean)">
<summary>
 Gets a 64-bit registy key
</summary>
</member>
<member name="M:Fake.RegistryHelper.get32BitKey(Fake.RegistryHelper.RegistryBaseKey)">
<summary>
 Maps the RegistryBaseKey to a RegistryKey for a 32bit System
 [omit]
</summary>
</member>
<member name="M:Fake.RegistryHelper.get64BitKey(Fake.RegistryHelper.RegistryBaseKey)">
<summary>
 Maps the RegistryBaseKey to a RegistryKey for a 64bit System
 [omit]
</summary>
</member>
<member name="M:Fake.RegistryHelper.getKey(Fake.RegistryHelper.RegistryBaseKey)">
<summary>
 Maps the RegistryBaseKey to a RegistryKey
 [omit]
</summary>
</member>
<member name="T:Fake.RegistryHelper">
<summary>
 Contains functions which allow to read and write information from/to the registry.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isValidPath(System.String)">
<summary>
 Detects whether the given path does not contains invalid characters.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isFile(System.String)">
<summary>
 Detects whether the given path is a file.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isDirectory(System.String)">
<summary>
 Detects whether the given path is a directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.ensureDirectory(System.String)">
<summary>
 Checks if the given directory exists. If not then this functions creates the directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.ensureDirExists(System.IO.DirectoryInfo)">
<summary>
 Ensure that directory chain exists. Create necessary directories if necessary.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.directoryExists(System.String)">
<summary>
 Checks if the directory exists on disk.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isInFolder(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Checks if the file is in a subfolder of the dir.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.isSubfolderOf(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
<summary>
 Checks if dir1 is a subfolder of dir2. If dir1 equals dir2 the function returns also true.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.normalizeFileName(System.String)">
<summary>
 Normalizes a filename.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.allFilesExist(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks if all given files exist.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.checkFileExists(System.String)">
<summary>
 Raises an exception if the file doesn&apos;t exist on disk.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.fileExists(System.String)">
<summary>
 Checks if the file exists on disk.
</summary>
</member>
<member name="P:Fake.FileSystemHelper.fullAssemblyPath">
<summary>
 Get the full location of the current assembly.
</summary>
</member>
<member name="P:Fake.FileSystemHelper.currentDirectory">
<summary>
 Gets the current directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.FindFirstMatchingFile(System.String,System.String)">
<summary>
 Gets the first file in the directory matching the search pattern or throws an error if nothing was found.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.TryFindFirstMatchingFile(System.String,System.String)">
<summary>
 Gets the first file in the directory matching the search pattern as an option value.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.filesInDirMatchingRecursive(System.String,System.IO.DirectoryInfo)">
<summary>
 Finds all the files in the directory and in all subdirectories matching the search pattern.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.filesInDirMatching(System.String,System.IO.DirectoryInfo)">
<summary>
 Finds all the files in the directory matching the search pattern.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.filesInDir(System.IO.DirectoryInfo)">
<summary>
 Gets all files in the directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.subDirectories(System.IO.DirectoryInfo)">
<summary>
 Gets all subdirectories of a given directory.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.DirectoryName(System.String)">
<summary>
 Gets the directory part of a filename.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.FullName(System.String)">
<summary>
 Converts a filename to it&apos;s full file system name.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.fileSystemInfo(System.String)">
<summary>
 Creates a FileInfo or a DirectoryInfo for the given path
</summary>
</member>
<member name="M:Fake.FileSystemHelper.fileInfo(System.String)">
<summary>
 Creates a FileInfo for the given path.
</summary>
</member>
<member name="M:Fake.FileSystemHelper.directoryInfo(System.String)">
<summary>
 Creates a DirectoryInfo for the given path.
</summary>
</member>
<member name="T:Fake.FileSystemHelper">
<summary>
 Contains helpers which allow to interact with the file system.
</summary>
</member>
<member name="M:Fake.StringHelper.DecodeBase64Utf8String(System.String)">
<summary>
 Decodes a Base64-encoded UTF-8-encoded string
</summary>
</member>
<member name="M:Fake.StringHelper.op_GreaterMultiplyMultiply(System.String,System.String)">
<summary>
 Determines if a text matches a given regex pattern.
</summary>
</member>
<member name="M:Fake.StringHelper.op_GreaterEqualsGreater(System.String,System.String,System.String)">
<summary>
 Find a regex pattern in a text and replaces it with the given replacement.
</summary>
</member>
<member name="M:Fake.StringHelper.toRelativePath(System.String)">
<summary>
 Replaces the absolute path to a relative path.
</summary>
</member>
<member name="M:Fake.StringHelper.ProduceRelativePath(System.String,System.String)">
 <summary>Produces relative path when possible to go from baseLocation to targetLocation.</summary>
 <param name="baseLocation">The root folder</param>
 <param name="targetLocation">The target folder</param>
 <returns>The relative path relative to baseLocation</returns>
 <exception cref="ArgumentNullException">base or target locations are null or empty</exception>
</member>
<member name="P:Fake.StringHelper.relativePaths">
<summary>
 A cache of relative path names.
 [omit]
</summary>
</member>
<member name="M:Fake.StringHelper.EncapsulateApostrophe(System.String)">
<summary>
 Encapsulates the Apostrophe
</summary>
</member>
<member name="M:Fake.StringHelper.RemoveLineBreaks(System.String)">
<summary>
 Removes linebreaks from the given string
</summary>
</member>
<member name="M:Fake.StringHelper.ConvertFileToWindowsLineBreaks(System.String)">
<summary>
 Reads a file line by line and replaces all line breaks to windows line breaks
   - uses a temp file to store the contents in order to prevent OutOfMemory exceptions
</summary>
</member>
<member name="M:Fake.StringHelper.ConvertTextToWindowsLineBreaks(System.String)">
<summary>
 Converts all line breaks in a text to windows line breaks
</summary>
</member>
<member name="P:Fake.StringHelper.MacLineBreaks">
<summary>
 Represents Mac line breaks
</summary>
</member>
<member name="P:Fake.StringHelper.WindowsLineBreaks">
<summary>
 Represents Windows line breaks
</summary>
</member>
<member name="P:Fake.StringHelper.LinuxLineBreaks">
<summary>
 Represents Linux line breaks
</summary>
</member>
<member name="M:Fake.StringHelper.ReplaceInFile(Microsoft.FSharp.Core.FSharpFunc{System.String,System.String},System.String)">
<summary>
 Replaces the text in the given file
</summary>
</member>
<member name="M:Fake.StringHelper.op_LessMultiply(System.String,System.String)">
<summary>
 Checks whether the given text starts with the given prefix
</summary>
</member>
<member name="M:Fake.StringHelper.shortenCurrentDirectory(System.String)">
<summary>
 Replaces any occurence of the currentDirectory with .
</summary>
</member>
<member name="M:Fake.StringHelper.ReadFileAsBytes(System.String)">
<summary>
 Reads a file as one array of bytes
</summary>
</member>
<member name="M:Fake.StringHelper.ReadFileAsString(System.String)">
<summary>
 Reads a file as one text
</summary>
</member>
<member name="M:Fake.StringHelper.AppendToFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Appends all lines to a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.WriteFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Writes a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.ReplaceFile(System.String,System.String)">
<summary>
 Replaces the file with the given string
</summary>
</member>
<member name="M:Fake.StringHelper.WriteStringToFile(System.Boolean,System.String,System.String)">
<summary>
 Writes a string to a file
</summary>
</member>
<member name="M:Fake.StringHelper.WriteBytesToFile(System.String,System.Byte[])">
<summary>
 Writes a byte array to a file
</summary>
</member>
<member name="M:Fake.StringHelper.NormalizeVersion(System.String)">
<summary>
 Removes all trailing .0 from a version string
</summary>
</member>
<member name="M:Fake.StringHelper.WriteToFile(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Writes a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.ReadLine(System.String)">
<summary>
 Reads the first line of a file. This can be helpful to read a password from file.
</summary>
</member>
<member name="M:Fake.StringHelper.ReadFile(System.String)">
<summary>
 Reads a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.liftString(System.String)">
<summary>
 Lifts a string to an option
</summary>
</member>
<member name="M:Fake.StringHelper.trimEndChars(System.Char[],System.String)">
<summary>
 Trims the end of the given string
</summary>
</member>
<member name="M:Fake.StringHelper.trimStartChars(System.Char[],System.String)">
<summary>
 Trims the start of the given string
</summary>
</member>
<member name="M:Fake.StringHelper.trimChars(System.Char[],System.String)">
<summary>
 Trims the given string
</summary>
</member>
<member name="M:Fake.StringHelper.trim(System.String)">
<summary>
 Trims the given string
</summary>
</member>
<member name="M:Fake.StringHelper.trimSpecialChars(System.String)">
<summary>
 Trims all special characters from a string.
</summary>
</member>
<member name="M:Fake.StringHelper.trimSeparator(System.String)">
<summary>
 Trims the given string with the DirectorySeparatorChar
</summary>
</member>
<member name="M:Fake.StringHelper.isLetterOrDigit(System.Char)">
<summary>
 Checks whether the given char is a standard char or digit.
</summary>
</member>
<member name="P:Fake.StringHelper.charsAndDigits">
<summary>
 Returns all standard chars and digits.
</summary>
</member>
<member name="M:Fake.StringHelper.toLower(System.String)">
<summary>
 Converts all characters in a string to lower case.
</summary>
</member>
<member name="M:Fake.StringHelper.isUmlaut(System.Char)">
<summary>
 Checks whether the given char is a german umlaut.
</summary>
</member>
<member name="M:Fake.StringHelper.regex_replace(System.String,System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.StringHelper.getRegEx(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.StringHelper.regexes">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.StringHelper.toText(System.Text.StringBuilder)">
<summary>
 Returns the text from the StringBuilder
</summary>
</member>
<member name="M:Fake.StringHelper.appendFileNamesIfNotNull(System.Collections.Generic.IEnumerable{System.String},System.Text.StringBuilder)">
<summary>
 Appends all notnull fileNames.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfNotNullOrEmpty(System.String,System.String)">
<summary>
 Appends a text if the value is not null or empty.
</summary>
</member>
<member name="M:Fake.StringHelper.appendStringIfValueIsNotNullOrEmpty(System.String)">
<summary>
 Appends a text if the value is not null or empty.
</summary>
</member>
<member name="M:Fake.StringHelper.appendStringIfValueIsNotNull``1(``0)">
<summary>
 Appends a text if the value is not null.
</summary>
</member>
<member name="M:Fake.StringHelper.appendQuotedIfNotNull(System.Object,System.String,System.Text.StringBuilder)">
<summary>
 Appends a quoted text if the value is not null.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfNotNull(System.Object,System.String)">
<summary>
 Appends a text if the value is not null.
</summary>
</member>
<member name="M:Fake.StringHelper.appendWithoutQuotesIfNotNull(System.Object,System.String)">
<summary>
 Appends a text without quoting if the value is not null.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfFalse(System.Boolean)">
<summary>
 Appends a text if the predicate is false.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfTrue(System.Boolean,System.String,System.Text.StringBuilder)">
<summary>
 Appends a text if the predicate is true.
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfSome``1(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.String},System.Text.StringBuilder)">
<summary>
 Appends string of function value if option has some value
</summary>
</member>
<member name="M:Fake.StringHelper.appendWithoutQuotes(System.String,System.Text.StringBuilder)">
<summary>
 Appends a text to a StringBuilder without surrounding quotes.
</summary>
</member>
<member name="M:Fake.StringHelper.append(System.String,System.Text.StringBuilder)">
<summary>
 Appends a text to a StringBuilder.
</summary>
</member>
<member name="M:Fake.StringHelper.replaceFirst(System.String,System.String,System.String)">
<summary>
 Replaces the first occurrence of the pattern with the given replacement.
</summary>
</member>
<member name="P:Fake.StringHelper.endsWithSlash">
<summary>
 Determines whether the last character of the given &lt;see cref=&quot;string&quot; /&gt;
 matches Path.DirectorySeparatorChar.         
</summary>
</member>
<member name="M:Fake.StringHelper.endsWith(System.String,System.String)">
<summary>
 Checks whether the given text ends with the given suffix
</summary>
</member>
<member name="M:Fake.StringHelper.startsWith(System.String,System.String)">
<summary>
 Checks whether the given text starts with the given prefix
</summary>
</member>
<member name="M:Fake.StringHelper.toLines(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Converts a sequence of strings into a string separated with line ends
</summary>
</member>
<member name="M:Fake.StringHelper.splitStr(System.String,System.String)">
<summary>
 Splits the given string at the given string delimiter
</summary>
</member>
<member name="M:Fake.StringHelper.split(System.Char,System.String)">
<summary>
 Splits the given string at the given char delimiter
</summary>
</member>
<member name="M:Fake.StringHelper.trimSlash(System.String)">
<summary>
 Removes the slashes from the end of the given string
</summary>
</member>
<member name="M:Fake.StringHelper.separated(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Converts a sequence of strings to a string with delimiters
</summary>
</member>
<member name="M:Fake.StringHelper.replace(System.String,System.String,System.String)">
<summary>
 Replaces the given pattern in the given text with the replacement
</summary>
</member>
<member name="M:Fake.StringHelper.isNullOrWhiteSpace(System.String)">
<summary>
 Returns if the string is null or empty or completely whitespace
</summary>
</member>
<member name="M:Fake.StringHelper.isNotNullOrEmpty(System.String)">
<summary>
 Returns if the string is not null or empty
</summary>
</member>
<member name="M:Fake.StringHelper.isNullOrEmpty(System.String)">
<summary>
 Returns if the string is null or empty
</summary>
</member>
<member name="M:Fake.StringHelper.productName">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.StringHelper">
<summary>
 Contains basic functions for string manipulation.
</summary>
</member>
<member name="M:Fake.TemplateHelper.processTemplates(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Replaces the templates with the given replacements
</summary>
</member>
<member name="P:Fake.TemplateHelper.saveFiles">
<summary>
 Saves all files (lazy - file by file!)
</summary>
</member>
<member name="M:Fake.TemplateHelper.replaceKeywords``2(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Replaces a bunch of the keywords in all files (lazy - line by line!)
</summary>
</member>
<member name="M:Fake.TemplateHelper.loadTemplates(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Loads all templates (lazy - line by line!)    
</summary>
</member>
<member name="T:Fake.TemplateHelper">
<summary>
 Contains basic templating functions. Used in other helpers.
</summary>
</member>
<member name="M:Fake.CacheHelper.lookup``2(``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``1},System.Collections.Generic.IDictionary{``0,``1})">
<summary>
 Looks for a key in the cache.
 If it is not found the newValueF function is executed and the result is stored in the cache.
</summary>
</member>
<member name="T:Fake.CacheHelper">
<summary>
 Contains functions which allows to deal with a cache.
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlTransform(System.String,System.String)">
<summary>
 Transforms a XML file using a XSL stylesheet file.
 ## Parameters

  - `stylesheetUri` - The Uri for the XSL stylesheet file.
  - `fileName` - The XML file to transform.
</summary>
</member>
<member name="M:Fake.XMLHelper.XslTransform(System.Xml.Xsl.XslCompiledTransform,System.Xml.XmlDocument)">
<summary>
 Transforms a XmlDocument using a XslCompiledTransform.
 ## Parameters

  - `xsl` - The XslCompiledTransform which should be applied.
  - `doc` - The XmlDocument to transform.
</summary>
</member>
<member name="M:Fake.XMLHelper.XslTransformer(System.String)">
<summary>
 Loads the given text into a XslCompiledTransform.
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlPokeInnerTextNS(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.String,System.String)">
<summary>
 Replaces inner text of an xml node in a XML file at the location specified by a XPath expression, with support for namespaces.
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlPokeNS(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.String,System.String)">
<summary>
 Replaces text in a XML file at the location specified by a XPath expression, with support for namespaces.
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathReplaceInnerTextNS``1(System.String,System.String,``0,System.Xml.XmlDocument)">
<summary>
 Replaces inner text in a XML document specified by a XPath expression, with support for namespaces.
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathReplaceNS``1(System.String,System.String,``0,System.Xml.XmlDocument)">
<summary>
 Replaces text in a XML document specified by a XPath expression, with support for namespaces.
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlPokeInnerText(System.String,System.String,System.String)">
<summary>
 Replaces the inner text of an xml node in a XML file at the location specified by a XPath expression.
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlPoke(System.String,System.String,System.String)">
<summary>
 Replaces text in a XML file at the location specified by a XPath expression.
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathValue``1(System.String,``0,System.Xml.XmlDocument)">
<summary>
 Selects a xml node value via XPath from the given document
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathReplaceInnerText(System.String,System.String,System.Xml.XmlDocument)">
<summary>
 Replaces the inner text of an xml node in the XML document specified by a XPath expression.
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathReplace(System.String,System.String,System.Xml.XmlDocument)">
<summary>
 Replaces text in the XML document specified by a XPath expression.
</summary>
</member>
<member name="M:Fake.XMLHelper.DocElement(System.Xml.XmlDocument)">
<summary>
 Gets the DocumentElement of the XmlDocument
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLDoc(System.String)">
<summary>
 Loads the given text into a XmlDocument
</summary>
</member>
<member name="M:Fake.XMLHelper.parseSubNode``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.Xml.XmlNode,``0})">
<summary>
 Parses a XML subnode
</summary>
</member>
<member name="M:Fake.XMLHelper.parse``2(System.String,Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Parses a XmlNode
</summary>
</member>
<member name="M:Fake.XMLHelper.getSubNode(System.String,System.Xml.XmlNode)">
<summary>
 Gets the first sub node with the given name from the given XmlNode
</summary>
</member>
<member name="M:Fake.XMLHelper.getChilds``1(``0)">
<summary>
 Gets a sequence of all child nodes for the given XmlNode
</summary>
</member>
<member name="M:Fake.XMLHelper.getAttribute``1(System.String,``0)">
<summary>
 Gets the attribute with the given name from the given XmlNode
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlCDataElement(System.String,System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an CData element to the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlAttribute``1(System.String,``0,System.Xml.XmlTextWriter)">
<summary>
 Writes an XML attribute to current element of the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlEndElement(System.Xml.XmlTextWriter)">
<summary>
 Writes an XML end element to the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlStartElement(System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an XML start element to the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlComment(System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an XML comment to the given XmlTextWriter
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlWriter(System.String)">
<summary>
 Creates a XmlWriter which writes to the given file name
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLRead_Int(System.Boolean,System.String,System.String,System.String,System.String)">
<summary>
 Reads a value from a XML document using a XPath
 Returns if the value is an int and the value
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLRead(System.Boolean,System.String,System.String,System.String,System.String)">
<summary>
 Reads a value from a XML document using a XPath
</summary>
</member>
<member name="T:Fake.XMLHelper">
<summary>
 Contains functions to read and write XML files.
</summary>
</member>
<member name="T:Fake.REST.PostMethod">
<summary>
 Option type for the HTTP verb
</summary>
</member>
<member name="M:Fake.REST.ExecutePost(System.String,System.String,System.String,System.String)">
<summary>
 Executes an HTTP POST command and retrives the information.
 It returns the response of the request, or null if we got 404 or nothing.
 ## Parameters

  - `url` - The URL to perform the POST operation.
  - `userName` - The username to use with the request.
  - `password` - The password to use with the request.
  - `data` - The data to post.
</summary>
</member>
<member name="M:Fake.REST.ExecutePostCommand(Microsoft.FSharp.Core.FSharpFunc{System.Net.WebHeaderCollection,Microsoft.FSharp.Core.Unit},System.String,System.String,System.String,System.String)">
<summary>
 Executes an HTTP POST command and retrives the information.    
 This function will automatically include a &quot;source&quot; parameter if the &quot;Source&quot; property is set.
 It returns the response of the request, or null if we got 404 or nothing.
 ## Parameters

  - `headerF` - A function which allows to manipulate the HTTP headers.
  - `url` - The URL to perform the POST operation.
  - `userName` - The username to use with the request.
  - `password` - The password to use with the request.
  - `data` - The data to post.
</summary>
</member>
<member name="M:Fake.REST.ExecuteGetCommand(System.String,System.String,System.String)">
<summary>
 Executes an HTTP GET command and retrives the information.
 It returns the response of the request, or null if we got 404 or nothing.
 ## Parameters

  - `userName` - The username to use with the request.
  - `password` - The password to use with the request.
  - `url` - The URL to perform the GET operation.
</summary>
</member>
<member name="T:Fake.REST">
<summary>
 Contains functions to execute typical HTTP/REST calls.
</summary>
</member>
<member name="T:Fake.BuildServerHelper.TraceMode">
<summary>
 The trace mode option.
</summary>
</member>
<member name="T:Fake.BuildServerHelper.BuildServer">
<summary>
 The server type option.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.isLocalBuild">
<summary>
 Is true when the current build is a local build.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.buildVersion">
<summary>
 The current build version as detected from the current build server.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.buildServer">
<summary>
 The current build server
</summary>
</member>
<member name="P:Fake.BuildServerHelper.appVeyorBuildVersion">
<summary>
 AppVeyor build number
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.ccBuildLabel">
<summary>
 CruiseControl.NET Build label
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.jenkinsBuildNumber">
<summary>
 Build number retrieved from Jenkins
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.gitlabCIBuildNumber">
<summary>
 Build number retrieved from GitLab CI
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.isGitlabCI">
<summary>
 Checks if we are on GitLab CI
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.travisBuildNumber">
<summary>
 Build number retrieved from Travis
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.tcBuildNumber">
<summary>
 Build number retrieved from TeamCity
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.tfBuildNumber">
<summary>
 Build number retrieved from Team Foundation
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.isTFBuild">
<summary>
 Checks if we are on Team Foundation
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.isBambooBuild">
<summary>
 Checks if we are on Bamboo
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.bambooBuildNumber">
<summary>
 Build number retrieved from Bamboo
 [omit]
</summary>
</member>
<member name="P:Fake.BuildServerHelper.xmlOutputFile">
<summary>
 Defines the XML output file - used for build servers like CruiseControl.NET.
 This output file can be specified by using the *logfile* build parameter.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.localBuildLabel">
<summary>
 A constant label for local builds
 [omit]            
</summary>
</member>
<member name="P:Fake.BuildServerHelper.verbose">
<summary>
 Defines if FAKE will use verbose tracing.
 This flag can be specified by setting the *verbose* build parameter.
</summary>
</member>
<member name="T:Fake.BuildServerHelper">
<summary>
 Contains functions which allow build scripts to interact with a build server.
</summary>
</member>
<member name="M:Fake.TraceListener.NAntXmlTraceListener.Fake-TraceListener-ITraceListener-Write(Fake.TraceListener.TraceData)">
<summary>
 Writes the given message to the xml file.
</summary>
</member>
<member name="T:Fake.TraceListener.NAntXmlTraceListener">
<summary>
 Implements a TraceListener which writes NAnt like XML files.
 ## Parameters
  - `xmlOutputFile` - Defines the xml output file.
</summary>
</member>
<member name="M:Fake.TraceListener.ConsoleTraceListener.Fake-TraceListener-ITraceListener-Write(Fake.TraceListener.TraceData)">
<summary>
 Writes the given message to the Console.
</summary>
</member>
<member name="T:Fake.TraceListener.ConsoleTraceListener">
<summary>
 Implements a TraceListener for System.Console.
 ## Parameters
  - `importantMessagesToStdErr` - Defines whether to trace important messages to StdErr.
  - `colorMap` - A function which maps TracePriorities to ConsoleColors.
</summary>
</member>
<member name="T:Fake.TraceListener.ITraceListener">
<summary>
 Defines a TraceListener interface
</summary>
</member>
<member name="T:Fake.TraceListener.TraceData">
<summary>
 Defines Tracing information for TraceListeners
</summary>
</member>
<member name="M:Fake.TraceListener.postMessage(Fake.TraceListener.TraceData)">
<summary>
 Allows to post messages to all trace listeners
</summary>
</member>
<member name="M:Fake.TraceListener.addXmlListener(System.String)">
<summary>
 Allows to register a new Xml listeners
</summary>
</member>
<member name="P:Fake.TraceListener.listeners">
<summary>
 A List with all registered listeners
</summary>
</member>
<member name="P:Fake.TraceListener.AutoCloseXmlWriter">
<summary>
 Specifies if the XmlWriter should close tags automatically
</summary>
</member>
<member name="P:Fake.TraceListener.defaultConsoleTraceListener">
<summary>
 The default TraceListener for Console.
</summary>
</member>
<member name="M:Fake.TraceListener.colorMap(Fake.TraceListener.TraceData)">
<summary>
 A default color map which maps TracePriorities to ConsoleColors
</summary>
</member>
<member name="T:Fake.TraceListener">
<summary>
 Defines default listeners for build output traces
</summary>
</member>
<member name="M:Fake.TeamCityHelper.getTeamCityBranchIsDefault">
<summary>
 Get if the current branch is the one configured as default
</summary>
</member>
<member name="M:Fake.TeamCityHelper.getTeamCityBranchName">
<summary>
 Get the display name of the branch as shown in TeamCity
 See [the documentation](https://confluence.jetbrains.com/display/TCD10/Working+with+Feature+Branches#WorkingwithFeatureBranches-branchSpec) for more information
</summary>
</member>
<member name="M:Fake.TeamCityHelper.getTeamCityBranch">
<summary>
 Get the branch of the main VCS root
</summary>
</member>
<member name="M:Fake.TeamCityHelper.getTeamCityRecentlyFailedTests">
<summary>
 Name of recently failing tests
 See [the documentation](https://confluence.jetbrains.com/display/TCD10/Risk+Tests+Reordering+in+Custom+Test+Runner) for more information
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityBuildNumber">
<summary>
 The Build number assigned to the build by TeamCity using the build number format or None if it&apos;s not on TeamCity.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityBuildIsPersonal">
<summary>
 Is set to true if the build is a personal one.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityBuildConfigurationName">
<summary>
 The Name of the Build Configuration the current build belongs to or None if it&apos;s not on TeamCity.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityProjectName">
<summary>
 The Name of the project the current build belongs to or None if it&apos;s not on TeamCity.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityVersion">
<summary>
 The Version of the TeamCity server. This property can be used to determine the build is run within TeamCity.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ComparisonFailure(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Reports a failed comparison.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TestFailed(System.String,System.String,System.String)">
<summary>
 Reports a failed test.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.SetTeamCityParameter(System.String,System.String)">
<summary>
 Reports a parameter value
</summary>
</member>
<member name="M:Fake.TeamCityHelper.SetBuildStatistic(System.String,System.String)">
<summary>
 Reports a build statistic.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.SetBuildNumber(System.String)">
<summary>
 Sets the TeamCity build number.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.PublishArtifact(System.String)">
<summary>
 Publishes an artifact on the TeamcCity build server.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportBuildStatus(System.String,System.String)">
<summary>
 Reports the build status.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.buildStatus(System.String,System.String)">
<summary>
 Create  the build status.
 [omit]
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgressFinish(System.String)">
<summary>
 Reports the progress end.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgressStart(System.String)">
<summary>
 Reports the progress start.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgress(System.String)">
<summary>
 Reports the progress.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.StartTestSuite(System.String)">
<summary>
 Starts the test suite.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.FinishTestSuite(System.String)">
<summary>
 Finishes the test suite.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.IgnoreTestCaseWithDetails(System.String,System.String,System.String)">
<summary>
 Ignores the test case.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.IgnoreTestCase(System.String,System.String)">
<summary>
 Ignores the test case.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.FinishTestCase(System.String,System.TimeSpan)">
<summary>
 Finishes the test case.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.StartTestCase(System.String)">
<summary>
 Starts the test case.
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendTeamCityPartCoverReportXslts">
<summary>
 Send the PartCover xslt transformation rules (Input xlst and output files) to TeamCity
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendTeamCityNCoverReportOrder">
<summary>
 Sends the value for NCover  /sort: argument to TeamCity
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendTeamCityNCoverReportType">
<summary>
 Sends the value for NCover /report: argument to TeamCity
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendTeamCityNCoverExplorerToolArgs">
<summary>
 Sends additional arguments for NCover 1.x to TeamCity
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendTeamCityNCoverExplorerTool">
<summary>
 Sends the path to NCoverExplorer to TeamCity
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendTeamCityNCover3ReporterArgs">
<summary>
 Sends arguments for the NCover report generator to TeamCity
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendTeamCityNCover3Home">
<summary>
 Sends the full path to NCover installation folder to TeamCity
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendTeamCityDotCoverHome">
<summary>
 Sends the full path to the dotCover home folder to override the bundled dotCover to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityDotNetCoverageImportForTool(System.String,Fake.TeamCityHelper.TeamCityDotNetCoverageTool)">
<summary>
 Sends an dotcover, partcover, ncover or ncover3 results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityDotNetCoverageImport(System.String)">
<summary>
 Sends an dotcover, partcover, ncover or ncover3 results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityDotNetDupFinderImport(System.String)">
<summary>
 Sends an ReSharper dupfinder.exe results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityPmdCpdImport(System.String)">
<summary>
 Sends an PMD Copy/Paste Detector results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityPmdImport(System.String)">
<summary>
 Sends an PMD inspections results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityFxCopImport(System.String)">
<summary>
 Sends an FxCop inspection results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityReSharperInspectCodeImport(System.String)">
<summary>
 Sends an ReSharper inspectCode.exe results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityJSLintImport(System.String)">
<summary>
 Sends an JSLint results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityFindBugsImport(System.String)">
<summary>
 Sends an FindBugs results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityCheckstyleImport(System.String)">
<summary>
 Sends an Checkstyle results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityGTestImport(System.String)">
<summary>
 Sends an Google Test results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityMSTestImport(System.String)">
<summary>
 Sends an MSTest results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCitySurefireImport(System.String)">
<summary>
 Sends an Maven Surefire results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityJUnitImport(System.String)">
<summary>
 Sends an JUnit Ant task results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityFXCopImport(System.String)">
<summary>
 Sends an FXCop results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityNUnitImport(System.String)">
<summary>
 Sends an NUnit results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityError(System.String)">
<summary>
 Sends an error to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.teamCityBlock(System.String)">
<summary>
 Open Named Block that will be closed when the block is disposed
 Usage: `use __ = teamCityBlock &quot;My Block&quot;`
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendCloseBlock">
<summary>
 Close Named Block
</summary>
</member>
<member name="P:Fake.TeamCityHelper.sendOpenBlock">
<summary>
 Open Named Block
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendStrToTeamCity(System.String)">
<summary>
 Send message to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendToTeamCity(Microsoft.FSharp.Core.PrintfFormat{Microsoft.FSharp.Core.FSharpFunc{System.String,System.String},Microsoft.FSharp.Core.Unit,System.String,System.String},System.String)">
<summary>
 Send message to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.EncapsulateSpecialChars(System.String)">
<summary>
 Encapsulates special chars
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityChangedFiles.FileChange.revision">

</member>
<member name="P:Fake.TeamCityHelper.TeamCityChangedFiles.FileChange.modificationType">
<summary>
 Type of modification for the file
</summary>
</member>
<member name="P:Fake.TeamCityHelper.TeamCityChangedFiles.FileChange.filePath">
<summary>
 Path of the file that changed, relative to the current checkout directory (&apos;system.teamcity.build.checkoutDir&apos;)
</summary>
</member>
<member name="T:Fake.TeamCityHelper.TeamCityChangedFiles.FileChange">
<summary>
 Describe a change between builds
</summary>
</member>
<member name="T:Fake.TeamCityHelper.TeamCityChangedFiles.ModificationType">
<summary>
 The type of change that occured
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityChangedFiles.get">
<summary>
 Changed files (since previous build) that are included in this build
 See [the documentation](https://confluence.jetbrains.com/display/TCD10/Risk+Tests+Reordering+in+Custom+Test+Runner) for more information
</summary>
</member>
<member name="T:Fake.TeamCityHelper.TeamCityChangedFiles">
<summary>
 Get files changed between builds in TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityBuildParameters.tryGet(System.String)">
<summary>
 Get the value of a parameter by name
 System ones are prefixed with &apos;system.&apos;, runner ones with &apos;runner.&apos; and environment variables with &apos;env.&apos;
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityBuildParameters.getAll">
<summary>
 Get all parameters
 System ones are prefixed with &apos;system.&apos;, runner ones with &apos;runner.&apos; and environment variables with &apos;env.&apos;
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityBuildParameters.tryGetRunner(System.String)">
<summary>
 Get the value of a runner parameter by name
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityBuildParameters.getAllRunner">
<summary>
 Get all runner parameters
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityBuildParameters.tryGetConfiguration(System.String)">
<summary>
 Get the value of a configuration parameter by name
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityBuildParameters.getAllConfiguration">
<summary>
 Get all configuration parameters
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityBuildParameters.tryGetSystem(System.String)">
<summary>
 Get the value of a system parameter by name
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TeamCityBuildParameters.getAllSystem">
<summary>
 Get all system parameters
</summary>
</member>
<member name="T:Fake.TeamCityHelper.TeamCityBuildParameters">
<summary>
 TeamCity build parameters
 See [Predefined Build Parameters documentation](https://confluence.jetbrains.com/display/TCD10/Predefined+Build+Parameters) for more information
</summary>
</member>
<member name="T:Fake.TeamCityHelper">
<summary>
 Contains helper functions which allow FAKE to communicate with a TeamCity agent
</summary>
</member>
<member name="T:Fake.TeamCityRESTHelper.Project">
<summary>
 Record type which stores TeamCity project properties
</summary>
</member>
<member name="T:Fake.TeamCityRESTHelper.BuildConfiguration">
<summary>
 Record type which stores Build configuration properties
</summary>
</member>
<member name="T:Fake.TeamCityRESTHelper.Build">
<summary>
 Record type which stores Build properties
</summary>
</member>
<member name="T:Fake.TeamCityRESTHelper.VCSRoot">
<summary>
 Record type which stores VCSRoot properties
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getProjects(System.String,System.String,System.String)">
<summary>
 Gets all projects on the TeamCity server.
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getProject(System.String,System.String,System.String,System.String)">
<summary>
 Gets informnation about a project from the TeamCity server.
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getBuildConfig(System.String,System.String,System.String,System.String)">
<summary>
 Gets information about a build configuration from the TeamCity server.
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getFirstNode(System.String,System.String,System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getRESTVersion(System.String,System.String,System.String)">
<summary>
 Returns the REST version of the TeamCity server
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.prepareURL(System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.TeamCityRESTHelper">
<summary>
 Contains functions which allow FAKE to interact with the [TeamCity REST API](http://confluence.jetbrains.com/display/TCD8/REST+API).
</summary>
</member>
<member name="M:Fake.TraceHelper.Log(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Logs the given files with the message.
</summary>
</member>
<member name="M:Fake.TraceHelper.logToConsole(System.String,System.Diagnostics.EventLogEntryType)">
<summary>
 Traces the message to the console
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartTaskUsing(System.String,System.String)">
<summary>
 Traces the begin of a task and closes it again after disposing of the return value
 (call it with &apos;use&apos;)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceEndTask(System.String,System.String)">
<summary>
 Traces the end of a task
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartTask(System.String,System.String)">
<summary>
 Traces the begin of a task
</summary>
</member>
<member name="M:Fake.TraceHelper.traceEndTarget(System.String)">
<summary>
 Traces the end of a target   
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartTarget(System.String,System.String,System.String)">
<summary>
 Traces the begin of a target
</summary>
</member>
<member name="M:Fake.TraceHelper.closeTag(System.String)">
<summary>
 Removes an opening tag from the internal tag stack
</summary>
</member>
<member name="M:Fake.TraceHelper.openTag(System.String)">
<summary>
 Puts an opening tag on the internal tag stack
</summary>
</member>
<member name="M:Fake.TraceHelper.traceEndBuild">
<summary>
 Traces the end of the build
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartBuild">
<summary>
 Traces the begin of the build
</summary>
</member>
<member name="M:Fake.TraceHelper.traceHeader(System.String)">
<summary>
 Traces a header
</summary>
</member>
<member name="M:Fake.TraceHelper.traceLine">
<summary>
 Traces a line
</summary>
</member>
<member name="P:Fake.TraceHelper.fakeVersionStr">
<summary>
 Gets the FAKE Version string
</summary>
</member>
<member name="M:Fake.TraceHelper.TraceEnvironmentVariables">
<summary>
 Traces the EnvironmentVariables
</summary>
</member>
<member name="M:Fake.TraceHelper.traceException(System.Exception)">
<summary>
 Traces an exception details (in red)
</summary>
</member>
<member name="M:Fake.TraceHelper.exceptionAndInnersToString(System.Exception)">
<summary>
 Converts an exception and its inner exceptions to a nice string.
</summary>
</member>
<member name="M:Fake.TraceHelper.traceError(System.String)">
<summary>
 Traces an error (in red)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceFAKE``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a trace to the command line (in yellow)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceImportant(System.String)">
<summary>
 Writes a trace to stderr (in yellow)  
</summary>
</member>
<member name="M:Fake.TraceHelper.traceVerbose(System.String)">
<summary>
 Writes a trace to the command line (in green) if the verbose mode is activated.
</summary>
</member>
<member name="M:Fake.TraceHelper.tracef``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a message to the command line (in green) and without a line break
</summary>
</member>
<member name="M:Fake.TraceHelper.tracefn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a message to the command line (in green)
</summary>
</member>
<member name="M:Fake.TraceHelper.trace(System.String)">
<summary>
 Writes a trace to the command line (in green)
</summary>
</member>
<member name="M:Fake.TraceHelper.logVerbosefn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified string if the verbose mode is activated.
</summary>
</member>
<member name="M:Fake.TraceHelper.logf``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified message (without line break)
</summary>
</member>
<member name="M:Fake.TraceHelper.logfn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified message
</summary>
</member>
<member name="M:Fake.TraceHelper.log(System.String)">
<summary>
 Logs the specified string        
</summary>
</member>
<member name="P:Fake.TraceHelper.fakeVersion">
<summary>
 Gets the FAKE version no.
</summary>
</member>
<member name="P:Fake.TraceHelper.fakePath">
<summary>
 Gets the path of the current FAKE instance
</summary>
</member>
<member name="T:Fake.TraceHelper">
<summary>
 This module contains function which allow to trace build output
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.ensureServiceHasStopped(System.String,System.TimeSpan)">
<summary>
 Waits until the local service with the given name has been stopped or fails after given timeout
 ## Parameters
  - `name` - The name of the service in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.ensureRemoteServiceHasStopped(System.String,System.String,System.TimeSpan)">
<summary>
 Waits until the remote service with the given name has been stopped or fails after given timeout
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.ensureServiceHasStarted(System.String,System.TimeSpan)">
<summary>
 Waits until the local service with the given name has been started or fails after given timeout
 ## Parameters
  - `name` - The name of the service in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.ensureRemoteServiceHasStarted(System.String,System.String,System.TimeSpan)">
<summary>
 Waits until the remote service with the given name has been started or fails after given timeout
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.stopService(System.String)">
<summary>
 Stops all local services with given name.
 ## Parameters
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.stopRemoteService(System.String,System.String)">
<summary>
 Stops all services with given name.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.startService(System.String)">
<summary>
 Starts all local services with given name.
 ## Parameters
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.startRemoteService(System.String,System.String)">
<summary>
 Starts all remote services with given name.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getServiceStatus(System.String)">
<summary>
 Returns status of the local service with given name or fails when service is not found.
 ## Parameters
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getRemoteServiceStatus(System.String,System.String)">
<summary>
 Returns status of the remote service with given name or fails when service is not found.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.checkServiceExists(System.String)">
<summary>
 Returns whether a local service with the given name exists.
 ## Parameters
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.checkRemoteServiceExists(System.String,System.String)">
<summary>
 Returns whether a remote service with the given name exists.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getService(System.String)">
<summary>
 Returns the first local service with given name or None.
 ## Parameters
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getRemoteService(System.String,System.String)">
<summary>
 Returns the first remote service with given name or None.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getServices(System.String)">
<summary>
 Returns sequence of local services with given name.
 ## Parameters
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.getRemoteServices(System.String,System.String)">
<summary>
 Returns sequence of remote services with given name.
 ## Parameters
  - `host` - The hostname of the remote machine.
  - `name` - The name of the services in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.isService(System.String,System.ServiceProcess.ServiceController)">
<summary>
 Returns whether the given service has the given name as display or service name.
 ## Parameters
  - `name` - The name to check for.
  - `service` - The service in question.
</summary>
</member>
<member name="M:Fake.ServiceControllerHelpers.friendlyName(System.String,System.String)">
<summary>
 Get friendly service name for displaying in logs
</summary>
</member>
<member name="P:Fake.ServiceControllerHelpers.localhost">
<summary>
 Host value used for querying local services.
</summary>
</member>
<member name="T:Fake.ServiceControllerHelpers">
<summary>
 Contains tasks which allow to control NT services.
</summary>
</member>
<member name="M:Fake.GuardedAwaitObservable.Async.GuardedAwaitObservable.Static``1(System.IObservable{``0},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Behaves like AwaitObservable, but calls the specified guarding function
 after a subscriber is registered with the observable.
</summary>
</member>
<member name="M:Fake.GuardedAwaitObservable.synchronize``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit},``0})">
<summary>
 Helper that can be used for writing CPS-style code that resumes
 on the same thread where the operation was started.
</summary>
</member>
<member name="M:Fake.ProcessHelper.Shell.Exec(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Runs the given process, waits for it&apos;s completion and returns the exit code.
 ## Parameters

  - `cmd` - The command which should be run in elavated context.
  - `args` - The process arguments (optional).
  - `directory` - The working directory (optional).
</summary>
</member>
<member name="M:Fake.ProcessHelper.Shell.AsyncExec(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Runs the given process asynchronously.
 ## Parameters

  - `cmd` - The command which should be run in elavated context.
  - `args` - The process arguments (optional).
  - `directory` - The working directory (optional).
</summary>
</member>
<member name="T:Fake.ProcessHelper.Shell">
<summary>
 Allows to exec shell operations synchronously and asynchronously.
</summary>
</member>
<member name="P:Fake.ProcessHelper.ExecParams.Args">
<summary>
 Command-line argument pairs. The value will be quoted if it contains
 a string, and the result will be appended to the CommandLine property.
 If the key ends in a letter or number, a space will be inserted between
 the key and the value.
</summary>
</member>
<member name="P:Fake.ProcessHelper.ExecParams.CommandLine">
<summary>
 Command-line parameters in a string.
</summary>
</member>
<member name="P:Fake.ProcessHelper.ExecParams.WorkingDirectory">
<summary>
 The working directory for the program. Defaults to &quot;&quot;.
</summary>
</member>
<member name="P:Fake.ProcessHelper.ExecParams.Program">
<summary>
 The path to the executable, without arguments.
</summary>
</member>
<member name="T:Fake.ProcessHelper.ExecParams">
<summary>
 Parameter type for process execution.
</summary>
</member>
<member name="T:Fake.ProcessHelper.ProcessResult">
<summary>
 A process result including error code, message log and errors.
</summary>
</member>
<member name="T:Fake.ProcessHelper.ConsoleMessage">
<summary>
 A record type which captures console messages
</summary>
</member>
<member name="M:Fake.ProcessHelper.shellExec(Fake.ProcessHelper.ExecParams)">
<summary>
 Execute an external program and return the exit code.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.ensureProcessesHaveStopped(System.String,System.TimeSpan)">
<summary>
 Waits until the processes with the given name have stopped or fails after given timeout.
 ## Parameters
  - `name` - The name of the processes in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.ProcessHelper.killAllCreatedProcesses">
<summary>
 Kills all processes that are created by the FAKE build script unless &quot;donotkill&quot; flag was set.
</summary>
</member>
<member name="P:Fake.ProcessHelper.killCreatedProcesses">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.killMSBuild">
<summary>
 Kills the MSBuild process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.killFSI">
<summary>
 Kills the F# Interactive (FSI) process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.killProcess(System.String)">
<summary>
 Kills all processes with the given name
</summary>
</member>
<member name="M:Fake.ProcessHelper.getProcessesByName(System.String)">
<summary>
 Returns all processes with the given name
</summary>
</member>
<member name="M:Fake.ProcessHelper.killProcessById(System.Int32)">
<summary>
 Kills all processes with the given id
</summary>
</member>
<member name="M:Fake.ProcessHelper.kill(System.Diagnostics.Process)">
<summary>
 Kills the given process
</summary>
</member>
<member name="M:Fake.ProcessHelper.asyncShellExec(Fake.ProcessHelper.ExecParams)">
<summary>
 Execute an external program asynchronously and return the exit code,
 logging output and error messages to FAKE output. You can compose the result
 with Async.Parallel to run multiple external programs at once, but be
 sure that none of them depend on the output of another.
</summary>
</member>
<member name="P:Fake.ProcessHelper.defaultParams">
<summary>
 Default parameters for process execution.
</summary>
</member>
<member name="M:Fake.ProcessHelper.findPath(System.String,System.String,System.String)">
<summary>
 Tries to find the tool via AppSettings. If no path has the right tool we are trying the PATH system variable.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.tryFindPath(System.String,System.String,System.String)">
<summary>
 Tries to find the tool via AppSettings. If no path has the right tool we are trying the PATH system variable.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.tryFindFileInDirsThenPath(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 tries to find the tool on the paths given. If not found then try on the system PATH.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.appSettings(System.String,System.String)">
<summary>
 Returns the AppSettings for the key - Splitted on ;
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.tryFindFileOnPath(System.String)">
<summary>
 Searches the current directory and the directories within the PATH
 environment variable for the given file. If successful returns the full
 path to the file.
 ## Parameters
  - `file` - The file to locate
</summary>
</member>
<member name="M:Fake.ProcessHelper.findFile(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Searches the given directories for the given file, failing if not found.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.tryFindFile(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Searches the given directories for all occurrences of the given file name
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.parametersToString(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.String,System.String}}})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.boolParam``2(``0,System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.optionParam``2(``0,Microsoft.FSharp.Core.FSharpOption{``1})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.multipleStringParams``1(``0)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.stringParam``1(``0,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.UseDefaults``1">
<summary>
 Use default Parameters
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.toParam(System.String)">
<summary>
 Adds quotes and a blank around the string´.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.quoteIfNeeded(System.String)">
<summary>
 Adds quotes around the string if needed
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.quote(System.String)">
<summary>
 Adds quotes around the string
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.StartRemoteService(System.String,System.String)">
<summary>
 Starts a remote windows service. Waits up to two minutes for a response.
</summary>
</member>
<member name="M:Fake.ProcessHelper.StartService(System.String)">
<summary>
 Starts a local windows service. Waits up to two minutes for a response.
</summary>
</member>
<member name="M:Fake.ProcessHelper.StopRemoteService(System.String,System.String)">
<summary>
 Stops a remote windows service. Waits up to two minutes for a response.
</summary>
</member>
<member name="M:Fake.ProcessHelper.StopService(System.String)">
<summary>
 Stops a local windows service. Waits up to two minutes for a response.
</summary>
</member>
<member name="M:Fake.ProcessHelper.RunService(System.String,System.String)">
<summary>
 Sends a command to a local windows service.
</summary>
</member>
<member name="M:Fake.ProcessHelper.RunRemoteService(System.String,System.String,System.String)">
<summary>
 Sends a command to a remote windows service.
</summary>
</member>
<member name="M:Fake.ProcessHelper.StartProcess(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Starts the given process and forgets about it.
</summary>
</member>
<member name="M:Fake.ProcessHelper.directExec(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process, waits for its completion and returns if it succeeded.
</summary>
</member>
<member name="M:Fake.ProcessHelper.fireAndForget(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Starts the given process and returns immediatly.
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns true if the exit code was 0.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.setEnvironmentVariables(System.Diagnostics.ProcessStartInfo,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Sets the environment Settings for the given startInfo.
 Existing values will be overriden.
 [omit]
</summary>
</member>
<member name="P:Fake.ProcessHelper.pathDirectories">
<summary>
 Gets the list of valid directories included in the PATH environment variable.
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcessElevated(System.String,System.String,System.TimeSpan)">
<summary>
 Runs the given process in an elevated context and returns the exit code.
 ## Parameters

  - `cmd` - The command which should be run in elavated context.
  - `args` - The process arguments.
  - `timeOut` - The timeout for the process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcess(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns the exit code.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
 ## Sample

     let result = ExecProcess (fun info -&gt;
                       info.FileName &lt;- &quot;c:/MyProc.exe&quot;
                       info.WorkingDirectory &lt;- &quot;c:/workingDirectory&quot;
                       info.Arguments &lt;- &quot;-v&quot;) (TimeSpan.FromMinutes 5.0)

     if result &lt;&gt; 0 then failwithf &quot;MyProc.exe returned with a non-zero exit code&quot;
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess3(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns if the exit code was 0.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcessAndReturnExitCode(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns the exit code.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess2(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan,System.Boolean)">
<summary>
 Runs the given process and returns the exit code.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
  - `silent` - If this flag is set then the process output is redicted to the trace.
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcessRedirected(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns the process result.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcessAndReturnMessages(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan)">
<summary>
 Runs the given process and returns the process result.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcessWithLambdas(Microsoft.FSharp.Core.FSharpFunc{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.TimeSpan,System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process and returns the exit code.
 ## Parameters

  - `configProcessStartInfoF` - A function which overwrites the default ProcessStartInfo.
  - `timeOut` - The timeout for the process.
  - `silent` - If this flag is set then the process output is redirected to the given output functions `errorF` and `messageF`.
  - `errorF` - A function which will be called with the error log.
  - `messageF` - A function which will be called with the message log.
</summary>
</member>
<member name="P:Fake.ProcessHelper.enableProcessTracing">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.ProcessHelper.redirectOutputToTrace">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.ProcessHelper.start(System.Diagnostics.Process)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.ProcessHelper.startedProcesses">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.ProcessHelper">
<summary>
 Contains functions which can be used to start other tools.
</summary>
</member>
<member name="M:Fake.PsExecHelper.execRemote(System.String,System.String,System.String,System.String,System.String,System.TimeSpan)">
<summary>
 Use Sysinternals PsExec to execute a process on a remote machine.
 ## Parameters

 - `host` - The hostname of the machine to connect to.
 - `username` - A username valid for connecting to the remote machine.
 - `password` - The cleartext password of the given user.
 - `exe` - The path to the file that is to be executed.
 - `inputs` - The command-line arguments to pass to the remote process.
 - `timeOut` - The timeout for PsExec.
</summary>
</member>
<member name="T:Fake.PsExecHelper">
<summary>
 Contains functions for working with Sysinternals PsExec
</summary>
</member>
<member name="T:Fake.NpmHelper.NpmParams">
<summary>
 The Npm parameter type
</summary>
</member>
<member name="T:Fake.NpmHelper.NpmCommand">
<summary>
 The list of supported Npm commands. The `Custom` alternative
 can be used for other commands not in the list until they are
 implemented
</summary>
</member>
<member name="T:Fake.NpmHelper.InstallArgs">
<summary>
 Arguments for the Npm install command
</summary>
</member>
<member name="M:Fake.NpmHelper.Npm(Microsoft.FSharp.Core.FSharpFunc{Fake.NpmHelper.NpmParams,Fake.NpmHelper.NpmParams})">
<summary>
 Runs npm with the given modification function. Make sure to have npm installed,
 you can install npm with nuget or a regular install. To change which `Npm` executable
 to use you can set the `NpmFilePath` parameter with the `setParams` function.

 ## Parameters

  - `setParams` - Function used to overwrite the Npm default parameters.

 ## Sample

        Target &quot;Web&quot; (fun _ -&gt;
            Npm (fun p -&gt;
                   { p with
                       Command = Install Standard
                       WorkingDirectory = &quot;./src/FAKESimple.Web/&quot;
                   })

            Npm (fun p -&gt;
                   { p with
                       Command = (Run &quot;build&quot;)
                       WorkingDirectory = &quot;./src/FAKESimple.Web/&quot;
                   })
        )
</summary>
</member>
<member name="P:Fake.NpmHelper.defaultNpmParams">
<summary>
 Npm default parameters
</summary>
</member>
<member name="P:Fake.NpmHelper.npmFileName">
<summary>
 Default paths to Npm
</summary>
</member>
<member name="T:Fake.NpmHelper">
<summary>
 Contains function to run npm tasks
</summary>
</member>
<member name="T:Fake.BowerHelper.BowerParams">
<summary>
 The Bower parameter type
</summary>
</member>
<member name="T:Fake.BowerHelper.BowerCommand">
<summary>
 The list of support Bower commands. The `Custom` alternative
 can be used for other commands not in the list until they are
 implemented
</summary>
</member>
<member name="T:Fake.BowerHelper.InstallArgs">
<summary>
 Arguments for the Bower install command
</summary>
</member>
<member name="M:Fake.BowerHelper.Bower(Microsoft.FSharp.Core.FSharpFunc{Fake.BowerHelper.BowerParams,Fake.BowerHelper.BowerParams})">
<summary>
 Runs bower with the given modification function. Make sure to have bower installed,
 you can install bower with nuget or a regular install. To change which `Bower` executable
 to use you can set the `BowerFilePath` parameter with the `setParams` function.

 ## Parameters

 - `setParams` - Function used to overwrite the Bower default parameters.

 ## Sample

         Target &quot;Web&quot; (fun _ -&gt;
             Bower (fun p -&gt;
                       { p with
                           Command = Install Standard
                           WorkingDirectory = &quot;./src/FakeSimple.Web/&quot;
                       })

             Bower (fun p -&gt;
                       { p with
                           Command = (Run &quot;build&quot;)
                           WorkingDirectory = &quot;./src/FAKESimple.Web/&quot;
                       })
         )
</summary>
</member>
<member name="P:Fake.BowerHelper.defaultBowerParams">
<summary>
 Bower default parameters
</summary>
</member>
<member name="P:Fake.BowerHelper.bowerFileName">
<summary>
 Default paths to Bower
</summary>
</member>
<member name="T:Fake.BowerHelper">
<summary>
 Contains function to run bower tasks
</summary>
</member>
<member name="T:Fake.YarnHelper.YarnParams">
<summary>
 The Yarn parameter type
</summary>
</member>
<member name="T:Fake.YarnHelper.YarnCommand">
<summary>
 The list of supported Yarn commands. The `Custom` alternative
 can be used for other commands not in the list until they are
 implemented
</summary>
</member>
<member name="T:Fake.YarnHelper.InstallArgs">
<summary>
 Arguments for the Yarn install command
</summary>
</member>
<member name="M:Fake.YarnHelper.Yarn(Microsoft.FSharp.Core.FSharpFunc{Fake.YarnHelper.YarnParams,Fake.YarnHelper.YarnParams})">
<summary>
 Runs yarn with the given modification function. Make sure to have yarn installed,
 you can install yarn with nuget or a regular install. To change which `Yarn` executable
 to use you can set the `YarnFilePath` parameter with the `setParams` function.

 ## Parameters

 - `setParams` - Function used to overwrite the Yarn default parameters.

 ## Sample

         Target &quot;Web&quot; (fun _ -&gt;
             Yarn (fun p -&gt;
                     { p with
                         Command = Install Standard
                         WorkingDirectory = &quot;./src/FAKESimple.Web/&quot;
                     })

             Yarn (fun p -&gt;
                     { p with
                         Command = (Run &quot;build&quot;)
                         WorkingDirectory = &quot;./src/FAKESimple.Web/&quot;
                     })
         )
</summary>
</member>
<member name="P:Fake.YarnHelper.defaultYarnParams">
<summary>
 Yarn default parameters
</summary>
</member>
<member name="P:Fake.YarnHelper.yarnFileName">
<summary>
 Default paths to Yarn
</summary>
</member>
<member name="T:Fake.YarnHelper">
<summary>
 Contains function to run yarn tasks
</summary>
</member>
<member name="P:Fake.AppVeyor.UpdateBuildParams.CommitterEmail">
<summary>
 Committer email address
</summary>
</member>
<member name="P:Fake.AppVeyor.UpdateBuildParams.CommitterName">
<summary>
 Committer name
</summary>
</member>
<member name="P:Fake.AppVeyor.UpdateBuildParams.AuthorEmail">
<summary>
 Commit author email address
</summary>
</member>
<member name="P:Fake.AppVeyor.UpdateBuildParams.AuthorName">
<summary>
 Commit author name
</summary>
</member>
<member name="P:Fake.AppVeyor.UpdateBuildParams.Committed">
<summary>
 Commit date
</summary>
</member>
<member name="P:Fake.AppVeyor.UpdateBuildParams.CommitId">
<summary>
 Commit hash
</summary>
</member>
<member name="P:Fake.AppVeyor.UpdateBuildParams.Message">
<summary>
 Commit message
</summary>
</member>
<member name="P:Fake.AppVeyor.UpdateBuildParams.Version">
<summary>
 Build version; must be unique for the current project
</summary>
</member>
<member name="T:Fake.AppVeyor.UpdateBuildParams">
<summary>
 AppVeyor parameters for update build as [described](https://www.appveyor.com/docs/build-worker-api/#update-build-details)
</summary>
</member>
<member name="P:Fake.AppVeyor.PushArtifactParams.Type">
<summary>
 Type of the artifact
</summary>
</member>
<member name="P:Fake.AppVeyor.PushArtifactParams.DeploymentName">
<summary>
 Deployment name
</summary>
</member>
<member name="P:Fake.AppVeyor.PushArtifactParams.FileName">
<summary>
 File name to display in the artifact tab
</summary>
</member>
<member name="P:Fake.AppVeyor.PushArtifactParams.Path">
<summary>
 The full local path to the artifact
</summary>
</member>
<member name="T:Fake.AppVeyor.PushArtifactParams">
<summary>
 AppVeyor parameters for artifact push as [described](https://www.appveyor.com/docs/build-worker-api/#push-artifact)
</summary>
</member>
<member name="T:Fake.AppVeyor.ArtifactType">
<summary>
 Type of artifact that is pushed
</summary>
</member>
<member name="T:Fake.AppVeyor.TestResultsType">
<summary>
 Union type representing the available test result formats accepted by AppVeyor.
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoTagName">
<summary>
 contains tag name for builds started by tag
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoTag">
<summary>
 true if build has started by pushed tag; otherwise false
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoScm">
<summary>
 git or mercurial
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoProvider">
<summary>
 GitHub, BitBucket or Kiln
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoName">
<summary>
 Repository name in format owner-name/repo-name
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitTimestamp">
<summary>
 Commit date/time
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitMessageExtended">
<summary>
 The rest of the commit message after line break (if exists)
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitMessage">
<summary>
 Commit message
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitAuthorEmail">
<summary>
 Commit author&apos;s email address
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommitAuthor">
<summary>
 Commit author&apos;s name
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoCommit">
<summary>
 Commit ID (SHA)
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.RepoBranch">
<summary>
 Build branch
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.PullRequestTitle">
<summary>
 GitHub Pull Request title
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.PullRequestNumber">
<summary>
 GitHub Pull Request number
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.ProjectSlug">
<summary>
 Project slug (as seen in project details URL)
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.ProjectName">
<summary>
 Project name
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.ProjectId">
<summary>
 AppVeyor unique project ID
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.Platform">
<summary>
 Platform name set on Build tab of project settings (or through platform parameter in appveyor.yml).
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.JobName">
<summary>
 The job name
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.JobId">
<summary>
 AppVeyor unique job ID
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.IsScheduledBuild">
<summary>
 If the build runs by scheduler;
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.IsReBuild">
<summary>
 If the build has been started by the &quot;Re-Build commit/PR&quot; button or from the same API
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.IsForcedBuild">
<summary>
 If the build has been started by the &quot;New Build&quot; button or from the same API
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.Configuration">
<summary>
 Configuration name set on Build tab of project settings (or through configuration parameter in appveyor.yml).  
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.BuildVersion">
<summary>
 Build version
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.BuildNumber">
<summary>
 Build number
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.BuildId">
<summary>
 AppVeyor unique build ID
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.BuildFolder">
<summary>
 Path to clone directory
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.ApiUrl">
<summary>
 AppVeyor Build Agent API URL
</summary>
</member>
<member name="P:Fake.AppVeyor.AppVeyorEnvironment.AccountName">
<summary>
 AppVeyor Account Name
</summary>
</member>
<member name="T:Fake.AppVeyor.AppVeyorEnvironment">
<summary>
 AppVeyor environment variables as [described](http://www.appveyor.com/docs/environment-variables)
</summary>
</member>
<member name="M:Fake.AppVeyor.UpdateBuildVersion(System.String)">
<summary>
 Update build version. This must be unique for the current project.
</summary>
</member>
<member name="M:Fake.AppVeyor.UpdateBuild(Microsoft.FSharp.Core.FSharpFunc{Fake.AppVeyor.UpdateBuildParams,Fake.AppVeyor.UpdateBuildParams})">
<summary>
 Update build details
</summary>
</member>
<member name="M:Fake.AppVeyor.PushArtifacts(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Push multiple artifacts
</summary>
</member>
<member name="M:Fake.AppVeyor.PushArtifact(Microsoft.FSharp.Core.FSharpFunc{Fake.AppVeyor.PushArtifactParams,Fake.AppVeyor.PushArtifactParams})">
<summary>
 Push an artifact
</summary>
</member>
<member name="P:Fake.AppVeyor.defaultPushArtifactParams">
<summary>
 AppVeyor artifact push default parameters
</summary>
</member>
<member name="M:Fake.AppVeyor.SetVariable(System.String,System.String)">
<summary>
 Set environment variable
</summary>
</member>
<member name="M:Fake.AppVeyor.UploadTestResultsXml(Fake.AppVeyor.TestResultsType,System.String)">
<summary>
 Uploads all the test results &quot;.xml&quot; files in a directory to make them visible in Test tab of the build console.
</summary>
</member>
<member name="M:Fake.AppVeyor.UploadTestResultsFile(Fake.AppVeyor.TestResultsType,System.String)">
<summary>
 Uploads a test result file to make them visible in Test tab of the build console.
</summary>
</member>
<member name="M:Fake.AppVeyor.FinishTestCase(System.String,System.String,System.TimeSpan)">
<summary>
 Finishes the test case.
</summary>
</member>
<member name="M:Fake.AppVeyor.TestSucceeded(System.String,System.String)">
<summary>
 Reports a succeeded test.
</summary>
</member>
<member name="M:Fake.AppVeyor.IgnoreTestCase``1(System.String,System.String,``0)">
<summary>
 Ignores the test case.      
</summary>
</member>
<member name="M:Fake.AppVeyor.TestFailed(System.String,System.String,System.String,System.String)">
<summary>
 Reports a failed test.
</summary>
</member>
<member name="M:Fake.AppVeyor.StartTestCase(System.String,System.String)">
<summary>
 Starts the test case.
</summary>
</member>
<member name="M:Fake.AppVeyor.StartTestSuite``1(``0)">
<summary>
 Starts the test suite.
</summary>
</member>
<member name="M:Fake.AppVeyor.FinishTestSuite``1(``0)">
<summary>
 Finishes the test suite.
</summary>
</member>
<member name="T:Fake.AppVeyor">
<summary>
 Contains code to configure FAKE for AppVeyor integration
</summary>
</member>
<member name="P:Fake.BitbucketPipelines.BitbucketPipelinesEnvironment.Tag">
<summary>
 The tag of a commit that kicked off the build. This value is only available on tags.
</summary>
</member>
<member name="P:Fake.BitbucketPipelines.BitbucketPipelinesEnvironment.RepoSlug">
<summary>
 The URL-friendly version of a repository name.
</summary>
</member>
<member name="P:Fake.BitbucketPipelines.BitbucketPipelinesEnvironment.RepoOwner">
<summary>
 The name of the account in which the repository lives
</summary>
</member>
<member name="P:Fake.BitbucketPipelines.BitbucketPipelinesEnvironment.Commit">
<summary>
 The commit hash of a commit that kicked off the build
</summary>
</member>
<member name="P:Fake.BitbucketPipelines.BitbucketPipelinesEnvironment.Branch">
<summary>
 The branch on which the build was kicked off. This value is only available on branches.
</summary>
</member>
<member name="T:Fake.BitbucketPipelines.BitbucketPipelinesEnvironment">
<summary>
 Bitbucket Pipelines environment variables as [described](https://confluence.atlassian.com/bitbucket/environment-variables-in-bitbucket-pipelines-794502608.html)
</summary>
</member>
<member name="T:Fake.BitbucketPipelines">
<summary>
 Contains code to configure FAKE for Bitbucket Pipelines integration
</summary>
</member>
<member name="M:Fake.TaskRunnerHelper.runWithRetries``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.Int32)">
<summary>
 Retries the given function until a retry limit is reached or the function succeeds without exception.
 ## Parameters

  - `f` - This function will be started.
  - `retries` - A retry limit.
</summary>
</member>
<member name="M:Fake.TaskRunnerHelper.waitFor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Boolean},System.TimeSpan,System.Int32,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Waits until the given function returns true or the timeout is reached.
 ## Parameters

  - `f` - This function will be started.
  - `timeout` - A System.TimeSpan representing the timeout.
  - `testMS` - An interval at which FAKE checks if the function has succeeded.
  - `timeoutF` - This function will be run if the timeout has been reached.
</summary>
</member>
<member name="T:Fake.TaskRunnerHelper">
<summary>
 Contains a helper which can be used to implement timeouts and retries.
</summary>
</member>
<member name="T:Fake.Globbing">
<summary>
 This module contains a file pattern globbing implementation.
</summary>
</member>
<member name="M:Fake.FileSystem.FileIncludes.SetBaseDirectory(System.String)">
<summary>
 Sets a directory as BaseDirectory.
</summary>
</member>
<member name="M:Fake.FileSystem.FileIncludes.IsMatch(System.String)">
<summary>
 Checks if a particular file is matched
</summary>
</member>
<member name="M:Fake.FileSystem.FileIncludes.ButNot(System.String)">
<summary>
 Ignores files with the given pattern
</summary>
</member>
<member name="M:Fake.FileSystem.FileIncludes.And(System.String)">
<summary>
 Adds the given pattern to the file includes
</summary>
</member>
<member name="T:Fake.FileSystem.FileIncludes">
<summary>
 Internal representation of a file set.
</summary>
</member>
<member name="M:Fake.FileSystem.findToolFolderInSubPath(System.String,System.String)">
<summary>
 Looks for a tool in all subfolders - returns the folder where the tool was found.
</summary>
</member>
<member name="M:Fake.FileSystem.findToolInSubPath(System.String,System.String)">
<summary>
 Looks for a tool first in its default path, if not found the in ./packages/ and then
 in all subfolders of the root folder - returns the tool file name.
</summary>
</member>
<member name="M:Fake.FileSystem.op_BangBang(System.String)">
<summary>
 Includes a single pattern and scans the files - !! x = AllFilesMatching x
</summary>
</member>
<member name="M:Fake.FileSystem.op_MinusMinus(Fake.FileSystem.FileIncludes,System.String)">
<summary>
 Exclude operator
</summary>
</member>
<member name="M:Fake.FileSystem.op_PlusPlus(Fake.FileSystem.FileIncludes,System.String)">
<summary>
 Add Include operator
</summary>
</member>
<member name="M:Fake.FileSystem.SetBaseDir(System.String,Fake.FileSystem.FileIncludes)">
<summary>
 Sets a directory as baseDirectory for fileIncludes. 
</summary>
</member>
<member name="M:Fake.FileSystem.Include(System.String)">
<summary>
 Include files
</summary>
</member>
<member name="T:Fake.FileSystem">
<summary>
 This module contains a file pattern globbing implementation.
</summary>
</member>
<member name="M:Fake.FileHelper.directory(System.String)">
<summary>
 Get the directory of the specified path
 ## Parameters

 - &apos;path&apos; - The path from which the directory is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.fileNameWithoutExt(System.String)">
<summary>
 Get the filename for the specified path without it&apos;s extension
 ## Parameters

 - &apos;path&apos; - The path from which the filename is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.filename(System.String)">
<summary>
 Get the filename for the specified path
 ## Parameters

 - &apos;path&apos; - The path from which the filename is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.hasExt(System.String,System.String)">
<summary>
 Tests whether the file has specified extensions (containing the leading &apos;.&apos;)
 ## Parameters

 - &apos;extension&apos; - The extension to fine containing the leading &apos;.&apos;.
 - &apos;fileName&apos; - Name of the file from which the extension is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.changeExt(System.String,System.String)">
<summary>
 Change the extension of the file.
 ## Parameters

 - &apos;extension&apos; - The new extension containing the leading &apos;.&apos;.
 - &apos;fileName&apos; - Name of the file from which the extension is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.ext(System.String)">
<summary>
 Get the filename extension including the leading &apos;.&apos;, or an empty string if the file has no extension.
 ## Parameters

 - &apos;fileName&apos; - Name of the file from which the extension is retrieved.
</summary>
</member>
<member name="M:Fake.FileHelper.FileVersion(System.String)">
<summary>
 Get the version a file.
 ## Parameters

  - &apos;fileName&apos; - Name of file from which the version is retrieved. The path can be relative.
</summary>
</member>
<member name="M:Fake.FileHelper.RegexReplaceInFilesWithEncoding(System.String,System.String,System.Text.Encoding,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Replace all occurences of the regex pattern with the given replacement in the specified files
 ## Parameters

 - `pattern` - The string to search for a match
 - `replacement` - The replacement string
 - `encoding` - The encoding to use when reading and writing the files
 - `files` - The paths of the files to process
</summary>
</member>
<member name="M:Fake.FileHelper.RegexReplaceInFileWithEncoding(System.String,System.String,System.Text.Encoding,System.String)">
<summary>
 Replace all occurences of the regex pattern with the given replacement in the specified file
 ## Parameters

 - `pattern` - The string to search for a match
 - `replacement` - The replacement string
 - `encoding` - The encoding to use when reading and writing the file
 - `file` - The path of the file to process
</summary>
</member>
<member name="M:Fake.FileHelper.ReplaceInFiles(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Replaces all occurences of the patterns in the given files with the given replacements.
 ## Parameters

  - `replacements` - A sequence of tuples with the patterns and the replacements.
  - `files` - The files to process.
</summary>
</member>
<member name="M:Fake.FileHelper.WriteConfigFile``2(System.String,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
<summary>
 Creates a config file with the parameters as &quot;key;value&quot; lines
</summary>
</member>
<member name="M:Fake.FileHelper.MoveFile(System.String,System.String)">
<summary>
 Moves a single file to the target and overwrites the existing file.
 ## Parameters
 
  - `target` - The target directory.
  - `fileName` - The FileName.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyRecursive(System.String,System.String)">
<summary>
 Copies the file structure recursively.
</summary>
</member>
<member name="M:Fake.FileHelper.copyRecursive(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
<summary>
 Copies the file structure recursively.
</summary>
</member>
<member name="M:Fake.FileHelper.GeneratePatch(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks the srcFiles for changes to the last release.
 ## Parameters
 
  - `lastReleaseDir` - The directory of the last release.
  - `patchDir` - The target directory.
  - `srcFiles` - The source files.
</summary>
</member>
<member name="M:Fake.FileHelper.GeneratePatchWithFindOldFileFunction(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.String}})">
<summary>
 Checks the srcFiles for changes to the last release.
 ## Parameters
 
  - `lastReleaseDir` - The directory of the last release
  - `patchDir` - The target directory
  - `srcFiles` - The source files
  - `findOldFileF` - A function which finds the old file
</summary>
</member>
<member name="M:Fake.FileHelper.TestFile(System.String)">
<summary>
 Checks if the file exists
</summary>
</member>
<member name="M:Fake.FileHelper.TestDir(System.String)">
<summary>
 Checks if the directory exists
</summary>
</member>
<member name="M:Fake.FileHelper.CompareFiles(System.Boolean,System.String,System.String)">
<summary>
 Compares the given files for changes.
 If delete is set to true then equal files will be removed.
</summary>
</member>
<member name="M:Fake.FileHelper.FilesAreEqual(System.IO.FileInfo,System.IO.FileInfo)">
<summary>
 Checks if the two files are byte-to-byte equal.
</summary>
</member>
<member name="M:Fake.FileHelper.AppendTextFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Appends all given files to one file.
 ## Parameters
 
  - `newFileName` - The target FileName.
  - `files` - The original FileNames as a sequence.
</summary>
</member>
<member name="M:Fake.FileHelper.ReadCSVFile(System.String)">
<summary>
 Reads a csv file line by line
 delimiter is a ,
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteDirs(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Deletes multiple directories
</summary>
</member>
<member name="M:Fake.FileHelper.CleanDirs(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Cleans multiple directories
</summary>
</member>
<member name="M:Fake.FileHelper.CleanDir(System.String)">
<summary>
 Cleans a directory by removing all files and sub-directories.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyDir(System.String,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean})">
<summary>
 Copies a directory recursivly. If the target directory does not exist, it will be created.
 ## Parameters
 
  - `target` - The target directory.
  - `source` - The source directory.
  - `filterFile` - A file filter predicate.
</summary>
</member>
<member name="M:Fake.FileHelper.allFiles(System.String)">
<summary>
 Includes all files
</summary>
</member>
<member name="M:Fake.FileHelper.excludeSVNFiles(System.String)">
<summary>
 Exclude SVN files (path with .svn)
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the files to the target - Alias for Copy
 ## Parameters
 
  - `target` - The target directory.
  - `files` - The orginal file names.
</summary>
</member>
<member name="M:Fake.FileHelper.SilentCopy(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies a list of files to the specified directory without any output.
 ## Parameters
 
  - `target` - The target directory.
  - `files` - List of files to copy.
</summary>
</member>
<member name="M:Fake.FileHelper.Rename(System.String,System.String)">
<summary>
 Renames the file or directory to the target name.
 ## Parameters
 
  - `target` - The target file or directory name.
  - `fileName` - The orginal file or directory name.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyCached(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the files from a cache folder.
 If the files are not cached or the original files have a different write time the cache will be refreshed.
 ## Parameters
 
  - `target` - The target FileName.
  - `cacheDir` - The cache directory.
  - `files` - The orginal files.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyTo(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the given files to the target.
 ## Parameters
 
  - `target` - The target directory.
  - `files` - The original file names as a sequence.
</summary>
</member>
<member name="M:Fake.FileHelper.Copy(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the files to the target.
 ## Parameters
 
  - `target` - The target directory.
  - `files` - The original file names as a sequence.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyWithSubfoldersTo(System.String,System.Collections.Generic.IEnumerable{Fake.FileSystem.FileIncludes})">
<summary>
 Copies several file groups, each represented by a FileIncludes object,
 to the target folder preserving the folder structure
 starting from the BaseDirectory of each FileIncludes.
 ## Parameters

  - `target` - The target directory.
  - `files` - A sequence of file groups.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFileWithSubfolder(System.String,System.String,System.String)">
<summary>
 Copies a single file to the target folder preserving the folder structure
 starting from the specified base folder.
 ## Parameters

  - `baseDir` - The base directory.
  - `target` - The target directory.
  - `fileName` - The file name.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFileIntoSubFolder(System.String,System.String)">
<summary>
 Copies a single file to a relative subfolder of the target.
 ## Parameters

  - `target` - The target directory
  - `fileName` - The fileName
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFile(System.String,System.String)">
<summary>
 Copies a single file to the target and overwrites the existing file.
 ## Parameters
 
  - `target` - The target directory or file.
  - `fileName` - The FileName.
</summary>
</member>
<member name="M:Fake.FileHelper.|FileInfoNameSections|(System.IO.FileInfo)">
<summary>
 Active Pattern for determining FileInfoNameSections.
</summary>
</member>
<member name="M:Fake.FileHelper.|FileInfoFullName|(System.IO.FileInfo)">
<summary>
 Active Pattern for determining file name.
</summary>
</member>
<member name="M:Fake.FileHelper.|EndsWith|_|(System.String,System.String)">
<summary>
 Active Pattern for determining file extension.
</summary>
</member>
<member name="M:Fake.FileHelper.|File|Directory|(System.IO.FileSystemInfo)">
<summary>
 Active pattern which discriminates between files and directories.
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteFiles(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Deletes the given files.
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteFile(System.String)">
<summary>
 Deletes a file if it exists.
</summary>
</member>
<member name="M:Fake.FileHelper.CreateFile(System.String)">
<summary>
 Creates a file if it does not exist.
</summary>
</member>
<member name="M:Fake.FileHelper.CreateDir(System.String)">
<summary>
 Creates a directory if it does not exist.
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteDir(System.String)">
<summary>
 Deletes a directory if it exists.
</summary>
</member>
<member name="M:Fake.FileHelper.SetReadOnly(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Sets all given files readonly.
</summary>
</member>
<member name="M:Fake.FileHelper.SetDirReadOnly(System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Sets all files in the directory readonly.
</summary>
</member>
<member name="M:Fake.FileHelper.setDirectoryReadOnly(System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Sets the directory readonly 
</summary>
</member>
<member name="M:Fake.FileHelper.recursively(Microsoft.FSharp.Core.FSharpFunc{System.IO.DirectoryInfo,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.IO.FileInfo,Microsoft.FSharp.Core.Unit},System.IO.DirectoryInfo)">
<summary>
 Performs the given actions on all files and subdirectories
</summary>
</member>
<member name="T:Fake.FileHelper">
<summary>
 Contains helper function which allow to deal with files and directories.
</summary>
</member>
<member name="M:Fake.FileUtils.mv(System.String,System.String)">
<summary>
 Like &quot;mv&quot; in a shell. Moves/renames a file
 &lt;param name=&quot;src&quot;&gt;The source&lt;/param&gt;
 &lt;param name=&quot;dest&quot;&gt;The destination&lt;/param&gt;
</summary>
</member>
<member name="M:Fake.FileUtils.popd">
<summary>
 Restore the previous directory stored in the stack
</summary>
</member>
<member name="M:Fake.FileUtils.pushd(System.String)">
<summary>
 Store the current directory in the directory stack before changing to a new one
</summary>
</member>
<member name="P:Fake.FileUtils.dirStack">
<summary>
 The stack of directories operated on by pushd and popd
</summary>
</member>
<member name="M:Fake.FileUtils.pwd">
<summary>
 Gets working directory
</summary>
</member>
<member name="M:Fake.FileUtils.cd(System.String)">
<summary>
 Changes working directory
</summary>
</member>
<member name="M:Fake.FileUtils.chdir(System.String)">
<summary>
 Changes working directory
</summary>
</member>
<member name="M:Fake.FileUtils.cp(System.String,System.String)">
<summary>
 Like &quot;cp&quot; in a shell. Copies a single file.
 &lt;param name=&quot;src&quot;&gt;The source&lt;/param&gt;
 &lt;param name=&quot;dest&quot;&gt;The destination&lt;/param&gt;
</summary>
</member>
<member name="M:Fake.FileUtils.cp_r(System.String,System.String)">
 <summary>
 Like "cp -r" in a shell. Copies a file or directory recursively.
 </summary>
 <param name="src">The source</param>
 <param name="dest">The destination</param>
</member>
<member name="M:Fake.FileUtils.mkdir(System.String)">
<summary>
 Creates a directory if it doesn&apos;t exist.
</summary>
</member>
<member name="M:Fake.FileUtils.rm_rf(System.String)">
<summary>
 Like &quot;rm -rf&quot; in a shell. Removes files recursively, ignoring nonexisting files
</summary>
</member>
<member name="M:Fake.FileUtils.rm(System.String)">
<summary>
 Deletes a file if it exists
</summary>
</member>
<member name="T:Fake.FileUtils">
<summary>
 Shell-like functions. Similar to [Ruby&apos;s FileUtils](http://www.ruby-doc.org/stdlib-2.0.0/libdoc/rake/rdoc/FileUtils.html).
</summary>
</member>
<member name="M:Fake.FuchuHelper.Fuchu(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Execute Fuchu tests from one or more assemblies.
 Multiple assemblies are run concurrently.
 ## Parameters
 
  - `testExes` - The paths of the executables containing Fuchu tests to run.
</summary>
</member>
<member name="T:Fake.UnitTestCommon.TestRunnerErrorLevel.DontFailBuild">
<summary>
 With this option set, no exception is thrown if a test is broken.
</summary>
</member>
<member name="T:Fake.UnitTestCommon.TestRunnerErrorLevel.FailOnFirstError">
<summary>
 This option instructs FAKE to break the build if a test runner finds the first error.
</summary>
</member>
<member name="T:Fake.UnitTestCommon.TestRunnerErrorLevel.Error">
<summary>
 This option instructs FAKE to break the build if a test runner reports an error.
</summary>
</member>
<member name="T:Fake.UnitTestCommon.TestRunnerErrorLevel">
<summary>
 Option which allows to specify if a test runner error should break the build.
</summary>
</member>
<member name="T:Fake.UnitTestCommon">
<summary>
 This module contains types and functions that are common for unit test helpers.
</summary>
</member>
<member name="T:Fake.UnitTestHelper.TestResults">
<summary>
 Basic data type to represent test results
</summary>
</member>
<member name="T:Fake.UnitTestHelper.Test">
<summary>
 Basic data type to represent tests
</summary>
</member>
<member name="T:Fake.UnitTestHelper.TestStatus">
<summary>
 Basic data type to represent test status
</summary>
</member>
<member name="M:Fake.UnitTestHelper.reportTestResults(Fake.UnitTestHelper.TestResults)">
<summary>
 Reports the given test results to the detected build server
</summary>
</member>
<member name="M:Fake.UnitTestHelper.reportToAppVeyor(Fake.UnitTestHelper.TestResults)">
<summary>
 Reports the given test results to [AppVeyor](http://www.appveyor.com/).
</summary>
</member>
<member name="M:Fake.UnitTestHelper.reportToTeamCity(Fake.UnitTestHelper.TestResults)">
<summary>
 Reports the given test results to [TeamCity](http://www.jetbrains.com/teamcity/).
</summary>
</member>
<member name="T:Fake.UnitTestHelper">
<summary>
 This module contains functions which allow to report unit test results to build servers.
</summary>
</member>
<member name="M:Fake.NUnitXml.AllSucceeded``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Returns whether all tests in the given test result have succeeded
</summary>
</member>
<member name="M:Fake.NUnitXml.GetTestAssemblies(System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NUnitXml.NUnitMerge.mergeXDocs``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Merges non-empty list of test result XDocuments into a single XElement
</summary>
</member>
<member name="T:Fake.NUnitXml.NUnitMerge">
<summary>
 Used by the NUnitParallel helper, can also be used to merge test results
 from multiple calls to the normal NUnit helper.
</summary>
</member>
<member name="T:Fake.NUnitXml">
<summary>
 Contains types and functions for working with [NUnit](http://www.nunit.org/) unit tests result xml.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.Fixture">
<summary>
 Default: &quot;&quot;
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.ErrorLevel">
<summary>
 Default: [TestRunnerErrorLevel](fake-unittestcommon-testrunnererrorlevel.html).Error
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.Domain">
<summary>
 See [NUnitDomainModel](fake-nunitcommon-nunitdomainmodel.html).
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.DisableShadowCopy">
<summary>
 Disables shadow copying of the assembly in order to provide improved performance.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.TimeOut">
<summary>
 The default timeout to be used for test cases. If any test exceeds the timeout value, it is cancelled and reported as an error.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.XsltTransformFile">
<summary>
 The path to a custom XSLT transform file to be used to process the XML report.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.WorkingDir">
<summary>
 The working directory.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.ShowLabels">
<summary>
 Causes an identifying label to be displayed at the start of each test case.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.ProcessModel">
<summary>
 Controls how NUnit loads tests in processes. See: [NUnitProcessModel](fake-nunitcommon-nunitprocessmodel.html).
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.Framework">
<summary>
 Allows you to specify the version of the runtime to be used in executing tests.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.ErrorOutputFile">
<summary>
 Redirects error output created by the tests from standard error output (console) to the file specified as value.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.Out">
<summary>
 Redirects output created by the tests from standard output (console) to the file specified as value.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.OutputFile">
<summary>
 The output path of the nUnit XML report.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.StopOnError">
<summary>
 Causes execution of the test run to terminate immediately on the first test failure or error.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.DontTestInNewThread">
<summary>
 Suppresses use of a separate thread for running the tests and uses the main thread instead.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.ToolName">
<summary>
 NUnit console runner name. ( `nunit-console.exe`)
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.ToolPath">
<summary>
 The path to the NUnit console runner: `nunit-console.exe`
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.ExcludeCategory">
<summary>
 The [Categories](http://www.nunit.org/index.php?p=category&amp;r=2.6.4) to be excluded in a test run. Multiple categories may be specified on either option, by using commas to separate them.
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitParams.IncludeCategory">
<summary>
 The [Categories](http://www.nunit.org/index.php?p=category&amp;r=2.6.4) to be included in a test run. Multiple categories may be specified on either option, by using commas to separate them.
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitParams">
<summary>
 The [NUnit](http://www.nunit.org/) Console Parameters type.
 FAKE will use [NUnitDefaults](fake-nunitcommon.html) for values not provided.

 For reference, see: [NUnit-Console Command Line Options](http://www.nunit.org/index.php?p=consoleCommandLine&amp;r=2.6.4)
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel.MultipleDomainModel">
<summary>
 A separate test domain is created for each assembly
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel.SingleDomainModel">
<summary>
 A test domain is created - this is how NUnit worked prior to version 2.4
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel.NoDomainModel">
<summary>
 No domain is created - the tests are run in the primary domain. This normally requires copying the NUnit assemblies into the same directory as your tests.
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel.DefaultDomainModel">
<summary>
 The default is to use multiple domains if multiple assemblies are listed on the command line. Otherwise a single domain is used.
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitDomainModel">
<summary>
 The /domain option controls of the creation of AppDomains for running tests. See [NUnit-Console Command Line Options](http://www.nunit.org/index.php?p=consoleCommandLine&amp;r=2.6.4)
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitProcessModel">
<summary>
 Process model for nunit to use, see [Project Editor](http://www.nunit.org/index.php?p=projectEditor&amp;r=2.6.4)
</summary>
</member>
<member name="T:Fake.NUnitCommon.NUnitErrorLevel">
<summary>
 Option which allows to specify if a NUnit error should break the build.
</summary>
</member>
<member name="M:Fake.NUnitCommon.|OK|TestsFailed|FatalError|(System.Int32)">
<summary>
 NUnit console returns negative error codes for errors and sum of failed, ignored and exceptional tests otherwise. 
 Zero means that all tests passed.
</summary>
</member>
<member name="M:Fake.NUnitCommon.getWorkingDir(Fake.NUnitCommon.NUnitParams)">
<summary>
 Tries to detect the working directory as specified in the parameters or via TeamCity settings
 [omit]
</summary>
</member>
<member name="M:Fake.NUnitCommon.buildNUnitdArgs(Fake.NUnitCommon.NUnitParams,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.NUnitCommon.NUnitDefaults">
<summary>
 The [NUnitParams](fake-nunitcommon-nunitparams.html) default parameters. 

 ## Defaults
 - `IncludeCategory` - `&quot;&quot;`
 - `ExcludeCategory` - `&quot;&quot;`
 - `ToolPath` - The `nunit-console.exe` path if it exists in a subdirectory of the current directory.
 - `ToolName` - `&quot;nunit-console.exe&quot;`
 - `DontTestInNewThread`- `false`
 - `StopOnError` - `false`
 - `OutputFile` - `&quot;TestResult.xml&quot;`
 - `Out` - `&quot;&quot;`
 - `ErrorOutputFile` - `&quot;&quot;`
 - `WorkingDir` - `&quot;&quot;`
 - `Framework` - `&quot;&quot;`
 - `ProcessModel` - `DefaultProcessModel`
 - `ShowLabels` - `true`
 - `XsltTransformFile` - `&quot;&quot;`
 - `TimeOut` - 5 minutes
 - `DisableShadowCopy` - `false`
 - `Domain` - `DefaultDomainModel`
 - `ErrorLevel` - `Error`
 - `Fixture` - `&quot;&quot;`
</summary>
</member>
<member name="T:Fake.NUnitCommon">
<summary>
 Contains types and utility functions relaited to running [NUnit](http://www.nunit.org/) unit tests.
</summary>
</member>
<member name="M:Fake.NUnitSequential.NUnit(Microsoft.FSharp.Core.FSharpFunc{Fake.NUnitCommon.NUnitParams,Fake.NUnitCommon.NUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs NUnit on a group of assemblies.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default [NUnitParams](fake-nunitcommon-nunitparams.html) value.
  - `assemblies` - Sequence of one or more assemblies containing NUnit unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\Test.*.dll&quot;) 
           |&gt; NUnit (fun p -&gt; { p with ErrorLevel = DontFailBuild })
     )
</summary>
</member>
<member name="T:Fake.NUnitSequential">
<summary>
 Contains tasks to run [NUnit](http://www.nunit.org/) unit tests.
</summary>
</member>
<member name="M:Fake.NUnitParallel.NUnitParallel(Microsoft.FSharp.Core.FSharpFunc{Fake.NUnitCommon.NUnitParams,Fake.NUnitCommon.NUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs NUnit in parallel on a group of assemblies.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default [NUnitParams](fake-nunitcommon-nunitparams.html) value.
  - `assemblies` - Sequence of one or more assemblies containing NUnit unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\Test.*.dll&quot;) 
           |&gt; NUnitParallel (fun p -&gt; { p with ErrorLevel = DontFailBuild })
     )
</summary>
</member>
<member name="T:Fake.NUnitParallel">
<summary>
 Contains tasks to run [NUnit](http://www.nunit.org/) unit tests in parallel.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ExcludeTraits">
<summary>
 Exclude named traits with comma separated values
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.IncludeTraits">
<summary>
 Include named traits with comma separated values
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ErrorLevel">
<summary>
 Test runner error level. Option which allows to specify if an xUnit error should break the build.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.OutputDir">
<summary>
 The output directory. It&apos;s the current directoy if nothing else is specified.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.TimeOut">
<summary>
 If the timeout is reached the xUnit task will be killed. Default is 5 minutes.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.Verbose">
<summary>
 If set to true xUnit will generate verbose output.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ShadowCopy">
<summary>
 If set to true xUnit will run in ShadowCopy mode.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.WorkingDir">
<summary>
 The working directory (optional).
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.XmlOutput">
<summary>
 If set to true XML output will be generated.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.NUnitXmlOutput">
<summary>
 If set to true a HTML output file will be generated in NUnit format.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.HtmlOutput">
<summary>
 If set to true a HTML output file will be generated.
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ConfigFile">
<summary>
 The file name of the config file (optional).
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitParams.ToolPath">
<summary>
 The path to the xunit.console.clr4.exe - FAKE will scan all subfolders to find it automatically.
</summary>
</member>
<member name="T:Fake.XUnitHelper.XUnitParams">
<summary>
 DEPRECATED.
 The xUnit parameter type
</summary>
</member>
<member name="T:Fake.XUnitHelper.XUnitErrorLevel">
<summary>
 DEPRECATED.
 Option which allows to specify if an xUnit error should break the build.
</summary>
</member>
<member name="M:Fake.XUnitHelper.xUnit(Microsoft.FSharp.Core.FSharpFunc{Fake.XUnitHelper.XUnitParams,Fake.XUnitHelper.XUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 DEPRECATED. See [`Fake.Testing.XUnit.xUnit`](fake-testing-xunit.html).

 Runs xUnit unit tests in the given assemblies via the given xUnit runner.
 Will fail if the runner terminates with non-zero exit code for any of the assemblies.
 Offending assemblies will be listed in the error message.

 The xUnit runner terminates with a non-zero exit code if any of the tests
 in the given assembly fail.
 ## Parameters

  - `setParams` - Function used to manipulate the default XUnitParams value.
  - `assemblies` - Sequence of one or more assemblies containing xUnit unit tests.

 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\xUnit.Test.*.dll&quot;)
           |&gt; xUnit (fun p -&gt; {p with OutputDir = testDir })
     )
</summary>
</member>
<member name="M:Fake.XUnitHelper.buildXUnitArgs(Fake.XUnitHelper.XUnitParams,System.String)">
<summary>
 DEPRECATED.
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.XUnitHelper.XUnitDefaults">
<summary>
 DEPRECATED.
</summary>
</member>
<member name="P:Fake.XUnitHelper.emptyTrait">
<summary>
 DEPRECATED.
 The xUnit default parameters
</summary>
</member>
<member name="T:Fake.XUnitHelper">
<summary>
 DEPRECATED. See [`Fake.Testing.XUnit`](fake-testing-xunit.html).

 Contains tasks to run [xUnit](https://github.com/xunit/xunit) unit tests.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.WorkingDirectory">
<summary>
 Working directory
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.PrintVersion">
<summary>
 Prints the version on startup. Default is true
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.CustomArgs">
<summary>
 Custom arguments to use in the case the helper not yet supports them
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.ListTests">
<summary>
 Doesn&apos;t run tests, print out list of tests instead.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.Run">
<summary>
 Run only provided tests.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.FilterTestList">
<summary>
 Filter a specific test list to run.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.FilterTestCase">
<summary>
 Filter a specific test case to run.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.Filter">
<summary>
 Filter a specific hierarchy to run.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.FailOnFocusedTests">
<summary>
 Fails the build if focused tests exist. Default is true
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.SummaryLocation">
<summary>
 Prints out summary after all tests are finished including their source code location.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.Summary">
<summary>
 Prints out summary after all tests are finished.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.ParallelWorkers">
<summary>
 Number of parallel workers (defaults to the number of logical processors).
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.Parallel">
<summary>
 Run all tests in parallel. Default is true.
</summary>
</member>
<member name="P:Fake.Testing.Expecto.ExpectoParams.Debug">
<summary>
 Extra verbose output for your tests.
</summary>
</member>
<member name="T:Fake.Testing.Expecto.ExpectoParams">
<summary>
 CLI parameters available if you use Tests.runTestsInAssembly defaultConfig argv in your code:
</summary>
</member>
<member name="T:Fake.Testing.Expecto">
<summary>
 Contains tasks to run [expecto](https://github.com/haf/expecto) v2 unit tests.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.ErrorLevel">
<summary>
 Default: [TestRunnerErrorLevel](fake-unittestcommon-testrunnererrorlevel.html).Error
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Labels">
<summary>
 Specify whether to write test case names to the output.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.TeamCity">
<summary>
 Turns on use of TeamCity service messages.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.ShadowCopy">
<summary>
 Tells .NET to copy loaded assemblies to the shadowcopy directory.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.ResultSpecs">
<summary>
 Output specs for saving the test results. Default value is TestResult.xml
 Passing empty list does not save any result (--noresult option in NUnit)
 For more information, see: [NUnit3 command line options](https://github.com/nunit/docs/wiki/Console-Command-Line)
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.ErrorDir">
<summary>
 File path to contain error output from the tests.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.OutputDir">
<summary>
 File path to contain text output from the tests.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.WorkingDir">
<summary>
 Path of the directory to use for output files.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.StopOnError">
<summary>
 Causes execution of the test run to terminate immediately on the first test failure or error.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Workers">
<summary>
 Specify the NUMBER of worker threads to be used in running tests.
 This setting is used to control running your tests in parallel and is used in conjunction with the Parallelizable Attribute.
 If not specified, workers defaults to the number of processors on the machine, or 2, whichever is greater.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Seed">
<summary>
 Set the random seed used to generate test cases
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.TimeOut">
<summary>
 The default timeout to be used for test cases. If any test exceeds the timeout value, it is cancelled and reported as an error.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.DisposeRunners">
<summary>
 Dispose each test runner after it has finished running its tests
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Force32bit">
<summary>
 Run tests in a 32-bit process on 64-bit systems.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Framework">
<summary>
 Allows you to specify the version of the runtime to be used in executing tests.
 Default value is runtime under which the assembly was built. See: [NUnit3Runtime](fake-testing-nunit3-nunit3runtime.html).
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Domain">
<summary>
 Controls how NUnit loads tests in processes. See: [NUnit3ProcessModel](fake-testing-nunit3-nunit3domainmodel.html).
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Agents">
<summary>
 Number of agents that may be allowed to run simultaneously assuming you are not running inprocess.
 If not specified, all agent processes run tests at the same time, whatever the number of assemblies.
 This setting is used to control running your assemblies in parallel.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.ProcessModel">
<summary>
 Controls how NUnit loads tests in processes. See [NUnit3ProcessModel](fake-testing-nunit3-nunit3processmodel.html)
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Config">
<summary>
 Name of a project configuration to load (e.g.: Debug)
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Where">
<summary>
 An expression indicating which tests to run. It may specify test names, classes, methods, 
 catgories or properties comparing them to actual values with the operators ==, !=, =~ and !~. 
 See [NUnit documentation](https://github.com/nunit/docs/wiki/Test-Selection-Language) for a full description of the syntax.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.Testlist">
<summary>
 The name (or path) of a file containing a list of tests to run or explore, one per line.
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Params.ToolPath">
<summary>
 The path to the NUnit3 console runner: `nunit3-console.exe`
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3Params">
<summary>
 The NUnit 3 Console Parameters type. FAKE will use [NUnit3Defaults](fake-testing-nunit3.html) for values not provided.

 For reference, see: [NUnit3 command line options](https://github.com/nunit/docs/wiki/Console-Command-Line)
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.LabelsLevel">
<summary>
 The --labels option in NUnit3 console runner. Specify whether to write test case names to the output.
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3ErrorLevel">
<summary>
 Option which allows to specify if a NUnit error should break the build.
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3Runtime.Other">
<summary>
 NUnit should use runtime specified by this value
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3Runtime.Mono">
<summary>
 NUnit should use Mono framework but can select its version
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3Runtime.Net">
<summary>
 NUnit should use .NET framework but can select its version
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3Runtime.Default">
<summary>
 Uses the runtime under which the assembly was built.
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3Runtime">
<summary>
 The --framework option in running NUnit 3. There are three kinds - VXY, which means either .NET framework or Mono, NetXY (use .NET framework with given version)
 and MonoXY (Mono framework with given version). You can use Net or Mono to let NUnit select the version.
 You can pass any value using Other. 
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3DomainModel.MultipleDomainModel">
<summary>
 A separate test domain is created for each assembly
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3DomainModel.SingleDomainModel">
<summary>
 A test domain is created - this is how NUnit worked prior to version 2.4
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3DomainModel.NoDomainModel">
<summary>
 No domain is created - the tests are run in the primary domain. This normally requires copying the NUnit assemblies into the same directory as your tests.
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3DomainModel.DefaultDomainModel">
<summary>
 The default is to use multiple domains if multiple assemblies are listed on the command line. Otherwise a single domain is used.
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3DomainModel">
<summary>
 The --domain option controls of the creation of AppDomains for running tests. See [NUnit-Console Command Line Options](http://www.nunit.org/index.php?p=consoleCommandLine&amp;r=2.6.4)
</summary>
</member>
<member name="T:Fake.Testing.NUnit3.NUnit3ProcessModel">
<summary>
 Process model for NUnit 3 to use.
</summary>
</member>
<member name="M:Fake.Testing.NUnit3.getWorkingDir(Fake.Testing.NUnit3.NUnit3Params)">
<summary>
 Tries to detect the working directory as specified in the parameters or via TeamCity settings
 [omit]
</summary>
</member>
<member name="P:Fake.Testing.NUnit3.NUnit3Defaults">
<summary>
 The [NUnit3Params](fake-testing-nunit3-nunit3params.html) default parameters.

 - `ToolPath` - The `nunit-console.exe` path if it exists in a subdirectory of the current directory.
 - `Testlist` - `&quot;&quot;`
 - `Where` - `&quot;&quot;`
 - `Config` - `&quot;&quot;`
 - `ProcessModel` - `DefaultProcessModel`
 - `Agents` - `None` 
 - `Domain` - `DefaultDomainModel`
 - `Framework` - `&quot;&quot;`
 - `Force32bit` - `false`
 - `DisposeRunners` - `false`
 - `Timeout` - `2147483647 milliseconds`
 - `Seed` - `-1` (negative seed is ignored by NUnit and is not sent to it)
 - `Workers` - `None`
 - `StopOnError` - `false`
 - `WorkingDir` - `&quot;&quot;`
 - `OutputDir` - `&quot;&quot;`
 - `ErrorDir` - `&quot;&quot;`
 - `ResultSpecs` - `&quot;TestResult.xml&quot;`
 - `ShadowCopy` - `false`
 - `TeamCity` - `false`
 - `ErrorLevel` - `Error`
 ## Defaults
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.ForceTeamCity">
<summary>
 Forces TeamCity mode (normally auto-detected)
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.ExcludeTraits">
<summary>
 List of traits to exclude.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.IncludeTraits">
<summary>
 List of traits to include.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.ErrorLevel">
<summary>
 Test runner error level.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.TimeOut">
<summary>
 Maximum time to allow xUnit to run before being killed.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.Silent">
<summary>
 Run xUnit without reporting test progress.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.ShadowCopy">
<summary>
 Run xUnit with shadow copy enabled.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.WorkingDir">
<summary>
 The working directory for running the xunit console rnner.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.XmlOutputPath">
<summary>
 The output path of the xUnit XML report.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.NUnitXmlOutputPath">
<summary>
 The output path of the xUnit XML report (in the NUnit style).
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.HtmlOutputPath">
<summary>
 The output path of the xUnit HTML report.
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitParams.ToolPath">
<summary>
 The path to the xUnit console runner: `xunit.console.clr4.exe`
</summary>
</member>
<member name="T:Fake.Testing.XUnit.XUnitParams">
<summary>
 The xUnit parameter type.
</summary>
</member>
<member name="M:Fake.Testing.XUnit.xUnit(Microsoft.FSharp.Core.FSharpFunc{Fake.Testing.XUnit.XUnitParams,Fake.Testing.XUnit.XUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs xUnit unit tests in the given assemblies via the given xUnit runner.
 Will fail if the runner terminates with non-zero exit code for any of the assemblies.

 The xUnit runner terminates with a non-zero exit code if any of the tests
 in the given assembly fail.

 This task runs xUnit once per assembly specified, prepending the assembly file name to
 the output report filenames to ensure that there is a unique report file for each
 assembly tested.

 ## Parameters

  - `setParams` - Function used to manipulate the default XUnitParams value.
  - `assemblies` - Sequence of one or more assemblies containing xUnit unit tests.

 ## Sample usage
 The sample below will generate HTML reports in `testDir` with names following the
 pattern `xUnit.Test.Example.dll.html`.

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir @@ &quot;xUnit.Test.*.dll&quot;)
           |&gt; xUnit (fun p -&gt; {p with HtmlOutputPath = testDir @@ &quot;html&quot;})
     )
</summary>
</member>
<member name="M:Fake.Testing.XUnit.xUnitSingle(Microsoft.FSharp.Core.FSharpFunc{Fake.Testing.XUnit.XUnitParams,Fake.Testing.XUnit.XUnitParams},System.String)">
<summary>
 Runs xUnit unit tests in the given assemblies via the given xUnit runner.
 Will fail if the runner terminates with non-zero exit code for any of the assemblies.

 The xUnit runner terminates with a non-zero exit code if any of the tests
 in the given assembly fail.

 ## Parameters

  - `setParams` - Function used to manipulate the default `XUnitParams` value.
  - `assemblies` - Sequence of one or more assemblies containing xUnit unit tests.

 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         xUnit (fun p -&gt; {p with HtmlOutputPath = testDir @@ &quot;xunit.html&quot;}) &quot;xUnit.Test.dll&quot;
     )
</summary>
</member>
<member name="P:Fake.Testing.XUnit.XUnitDefaults">
<summary>
 The xUnit default parameters.

 ## Defaults

 - `HtmlOutputPath` - `None`
 - `XmlOutputPath` - `None`
 - `NUnitXmlOutputPath` - `None`
 - `IncludeTraits` - `[]`
 - `ExcludeTraits` - `[]`
 - `ShadowCopy` - `true`
 - `ErrorLevel` - `Error`
 - `ToolPath` - The `xunit.console.clr4.exe` path if it exists in a subdirectory of the current directory.
 - `WorkingDir` - `None`
 - `TimeOut` - 5 minutes
 - `ForceTeamCity` - `false`
 - `Silent` - `false`
</summary>
</member>
<member name="T:Fake.Testing.XUnit">
<summary>
 Contains tasks to run [xUnit](https://github.com/xunit/xunit) v1 unit tests.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.Method">
<summary>
 Run xUnit against a specific method
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.Class">
<summary>
 Run xUnit against a specific class
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.Namespace">
<summary>
 Run xUnit against a specific namespace
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.Wait">
<summary>
 Waits for input after completion.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.ForceAppVeyor">
<summary>
 Forces AppVeyor CI mode (normally auto-detected).
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.ForceTeamCity">
<summary>
 Forces TeamCity mode (normally auto-detected).
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.ExcludeTraits">
<summary>
 List of traits to exclude.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.IncludeTraits">
<summary>
 List of traits to include.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.ErrorLevel">
<summary>
 Test runner error level.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.TimeOut">
<summary>
 Maximum time to allow xUnit to run before being killed.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.Silent">
<summary>
 Run xUnit without reporting test progress.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.ShadowCopy">
<summary>
 Run xUnit with shadow copy enabled.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.WorkingDir">
<summary>
 The working directory for running the xunit console runner.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.NUnitXmlOutputPath">
<summary>
 The output path of the NUnit XML report.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.XmlV1OutputPath">
<summary>
 The output path of the xUnit XML report (in the xUnit v1 style).
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.XmlOutputPath">
<summary>
 The output path of the xUnit XML report.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.HtmlOutputPath">
<summary>
 The output path of the xUnit HTML report.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.MaxThreads">
<summary>
 The xUnit thread limiting strategy.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.Parallel">
<summary>
 The xUnit parallelization mode.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.NoAppDomain">
<summary>
 Do not use app domains to run test code.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Params.ToolPath">
<summary>
 The path to the xUnit console runner: `xunit.console.exe`
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.XUnit2Params">
<summary>
 The xUnit2 parameter type.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.CollectionConcurrencyMode.MaxThreads">
<summary>
 Limits the number of concurrently executing collections to `count`.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.CollectionConcurrencyMode.Unlimited">
<summary>
 Does not limit the number of concurrently executing collections.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.CollectionConcurrencyMode.Default">
<summary>
 Uses the default concurrency mode for collections.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.CollectionConcurrencyMode">
<summary>
 The collection concurrency mode used by the xUnit2 runner.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.ParallelMode.All">
<summary>
 Parallelize assemblies and collections.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.ParallelMode.Assemblies">
<summary>
 Only parallelize assemblies.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.ParallelMode.Collections">
<summary>
 Only parallelize collections.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.ParallelMode.NoParallelization">
<summary>
 Turn off all parallelization.
</summary>
</member>
<member name="T:Fake.Testing.XUnit2.ParallelMode">
<summary>
 The parallelization mode of the xUnit2 runner.
</summary>
</member>
<member name="M:Fake.Testing.XUnit2.xUnit2(Microsoft.FSharp.Core.FSharpFunc{Fake.Testing.XUnit2.XUnit2Params,Fake.Testing.XUnit2.XUnit2Params},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs xUnit v2 unit tests in the given assemblies via the given xUnit2 runner.
 Will fail if the runner terminates with non-zero exit code.

 The xUnit2 runner terminates with a non-zero exit code if any of the tests
 in the given assembly fail.

 ## Parameters

  - `setParams` - Function used to manipulate the default `XUnit2Params` value.
  - `assemblies` - Sequence of one or more assemblies containing xUnit unit tests.

 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir @@ &quot;xUnit.Test.*.dll&quot;)
         |&gt; xUnit2 (fun p -&gt; { p with HtmlOutputPath = Some (testDir @@ &quot;xunit.html&quot;) })
     )
</summary>
</member>
<member name="M:Fake.Testing.XUnit2.discoverNoAppDomainExists(Fake.Testing.XUnit2.XUnit2Params)">
<summary>
 Helper method to detect if the xunit console runner supports the -noappdomain flag.
 If the xunit console runner does not support this flag, it will change the value to false
 so it does not interfere with older versions.
</summary>
</member>
<member name="P:Fake.Testing.XUnit2.XUnit2Defaults">
<summary>
 The xUnit2 default parameters.

 ## Defaults

 - `NoAppDomain` - `false`
 - `Parallel` - `NoParallelization`
 - `MaxThreads` - `Default`
 - `HtmlOutputPath` - `None`
 - `XmlOutputPath` - `None`
 - `XmlV1OutputPath` - `None`
 - `IncludeTraits` - `[]`
 - `ExcludeTraits` - `[]`
 - `ShadowCopy` - `true`
 - `ErrorLevel` - `Error`
 - `ToolPath` - The `xunit.console.exe` path if it exists in a subdirectory of the current directory.
 - `WorkingDir` - `None`
 - `TimeOut` - 5 minutes
 - `ForceTeamCity` - `false`
 - `ForceAppVeyor` - `false`
 - `Silent` - `false`
 - `Wait` - `false`
 - `Namespace` - `None`
 - `Class` - `None`
 - `Method` - `None`
</summary>
</member>
<member name="T:Fake.Testing.XUnit2">
<summary>
 Contains tasks to run [xUnit](https://github.com/xunit/xunit) v2 unit tests.
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.OutputDir">
<summary>
 output directory
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.HtmlOutput">
<summary>
 output results to HTML file
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.XmlOutputV1">
<summary>
 output results to xUnit.net v1 style XML file
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.XmlOutput">
<summary>
 output results to xUnit.net v2 style XML file
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ExcludeTraits">
<summary>
 Exclude named traits with comma separated values
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.IncludeTraits">
<summary>
 Include named traits with comma separated values
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ErrorLevel">
<summary>
 Test runner error level. Option which allows to specify if an xUnit error should break the build.
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.TimeOut">
<summary>
 If the timeout is reached the xUnit task will be killed. Default is 5 minutes.
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.WorkingDir">
<summary>
 The working directory (optional).
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.Appveyor">
<summary>
 forces AppVeyor CI mode (normally auto-detected)
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.Teamcity">
<summary>
 forces TeamCity mode (normally auto-detected)
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ShadowCopy">
<summary>
 Shadow copy
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.Silent">
<summary>
 Output running test count
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.MaxThreads">
<summary>
 maximum thread count for collection parallelization
 0 - run with unbounded thread count
 &gt;0 - limit task thread pool size to &apos;count&apos;
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.Parallel">
<summary>
 set parallelization based on option
   none - turn off all parallelization
   collections - only parallelize collections
   assemblies - only parallelize assemblies
   all - parallelize assemblies &amp; collections
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ConfigFile">
<summary>
 The file name of the config file (optional).
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Params.ToolPath">
<summary>
 The path to the xunit.console.exe - FAKE will scan all subfolders to find it automatically.
</summary>
</member>
<member name="T:Fake.XUnit2Helper.XUnit2Params">
<summary>
 DEPRECATED.
 The xUnit parameter type
</summary>
</member>
<member name="T:Fake.XUnit2Helper.XUnit2ErrorLevel">
<summary>
 DEPRECATED.
 Option which allows to specify if an xUnit error should break the build.
</summary>
</member>
<member name="T:Fake.XUnit2Helper.ParallelOption">
<summary>
 DEPRECATED.
</summary>
</member>
<member name="M:Fake.XUnit2Helper.xUnit2(Microsoft.FSharp.Core.FSharpFunc{Fake.XUnit2Helper.XUnit2Params,Fake.XUnit2Helper.XUnit2Params},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 DEPRECATED. See [`Fake.Testing.XUnit2.xUnit2`](fake-testing-xunit2.html).

 Runs xUnit unit tests in the given assemblies via the given xUnit runner.
 Will fail if the runner terminates with non-zero exit code for any of the assemblies.
 Offending assemblies will be listed in the error message.

 The xUnit runner terminates with a non-zero exit code if any of the tests
 in the given assembly fail.
 ## Parameters

  - `setParams` - Function used to manipulate the default XUnitParams value.
  - `assemblies` - Sequence of one or more assemblies containing xUnit unit tests.

 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\xUnit.Test.*.dll&quot;)
           |&gt; xUnit2 (fun p -&gt; {p with OutputDir = testDir })
     )
</summary>
</member>
<member name="M:Fake.XUnit2Helper.buildXUnit2Args(Fake.XUnit2Helper.XUnit2Params,System.String)">
<summary>
 DEPRECATED.
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.XUnit2Helper.XUnit2Defaults">
<summary>
 DEPRECATED.
</summary>
</member>
<member name="P:Fake.XUnit2Helper.empty2Trait">
<summary>
 DEPRECATED.
 The xUnit default parameters
</summary>
</member>
<member name="T:Fake.XUnit2Helper">
<summary>
 DEPRECATED. See [`Fake.Testing.XUnit2`](fake-testing-xunit2.html).

 Contains tasks to run [xUnit](https://github.com/xunit/xunit) unit tests.
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.ErrorLevel">
<summary>
 An error level setting to specify whether a failed test should break the build
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.TimeOut">
<summary>
 A timeout for the test runner
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.IncludeTags">
<summary>
 Tests with theses tags are included by MSpec
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.ExcludeTags">
<summary>
 Tests with theses tags are ignored by MSpec
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.Silent">
<summary>
 Can be used to run MSpec in silent mode.
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.WorkingDir">
<summary>
 Working directory (optional)
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.XmlOutputPath">
<summary>
 Output file path for xml reports (optional).
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.HtmlOutputDir">
<summary>
 Output directory for html reports (optional).
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecParams.ToolPath">
<summary>
 FileName of the mspec runner exe. Use mspec-clr4.exe if you are on .NET 4.0 or above.
</summary>
</member>
<member name="T:Fake.MSpecHelper.MSpecParams">
<summary>
 Parameter type to configure the MSpec runner.
</summary>
</member>
<member name="M:Fake.MSpecHelper.MSpec(Microsoft.FSharp.Core.FSharpFunc{Fake.MSpecHelper.MSpecParams,Fake.MSpecHelper.MSpecParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 This task to can be used to run [machine.specifications](https://github.com/machine/machine.specifications) on test libraries.
 ## Parameters

  - `setParams` - Function used to overwrite the MSpec default parameters.
  - `assemblies` - The file names of the test assemblies.

 ## Sample

     !! (testDir @@ &quot;Test.*.dll&quot;) 
       |&gt; MSpec (fun p -&gt; {p with ExcludeTags = [&quot;HTTP&quot;]; HtmlOutputDir = reportDir})

 ## Hint
 
 XmlOutputPath expects a full file path whereas the HtmlOutputDir expects a directory name
</summary>
</member>
<member name="M:Fake.MSpecHelper.buildMSpecArgs(Fake.MSpecHelper.MSpecParams,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.MSpecHelper.MSpecDefaults">
<summary>
 MSpec default parameters - tries to locate mspec-clr4.exe in any subfolder.
</summary>
</member>
<member name="T:Fake.MSpecHelper">
<summary>
 Contains a task to run [machine.specifications](https://github.com/machine/machine.specifications) tests.
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.NoIsolation">
<summary>
 Run tests in isolation (optional).
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.ErrorLevel">
<summary>
 Option which allow to specify if a MSTest error should break the build.
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.ToolPath">
<summary>
 Path to MSTest.exe 
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.TimeOut">
<summary>
 A timeout for the test runner (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.WorkingDir">
<summary>
 Working directory (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.TestSettingsPath">
<summary>
 Path to the Test Settings file (.testsettings)  (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.TestMetadataPath">
<summary>
 Path to the Test Metadata file (.vdmdi)  (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.ResultsDir">
<summary>
 Test results directory (optional)
</summary>
</member>
<member name="P:Fake.MSTest.MSTestParams.Category">
<summary>
 Test category filter  (optional). The test category filter consists of one or more test category names separated by the logical operators &apos;&amp;&apos;, &apos;|&apos;, &apos;!&apos;, &apos;&amp;!&apos;. The logical operators &apos;&amp;&apos; and &apos;|&apos; cannot be used together to create a test category filter.
</summary>
</member>
<member name="T:Fake.MSTest.MSTestParams">
<summary>
 Parameter type to configure the MSTest.exe.
</summary>
</member>
<member name="T:Fake.MSTest.ErrorLevel">
<summary>
 Option which allow to specify if a MSTest error should break the build.
</summary>
</member>
<member name="M:Fake.MSTest.MSTest(Microsoft.FSharp.Core.FSharpFunc{Fake.MSTest.MSTestParams,Fake.MSTest.MSTestParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs MSTest command line tool on a group of assemblies.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default MSTestParams value.
  - `assemblies` - Sequence of one or more assemblies containing Microsoft Visual Studio Unit Test Framework unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\*.Tests.dll&quot;) 
           |&gt; MSTest (fun p -&gt; { p with Category = &quot;group1&quot; })
     )
</summary>
</member>
<member name="M:Fake.MSTest.buildMSTestArgs``1(Fake.MSTest.MSTestParams,``0)">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.MSTest.MSTestDefaults">
<summary>
 MSTest default parameters.
</summary>
</member>
<member name="P:Fake.MSTest.mstestexe">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSTest.mstestPaths">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.MSTest">
<summary>
 Contains tasks to run [MSTest](http://en.wikipedia.org/wiki/Visual_Studio_Unit_Testing_Framework/) unit tests.
</summary>
</member>
<member name="P:Fake.ProcessTestRunner.ProcessTestRunnerParams.ErrorLevel">
<summary>
 Option which allows to specify if a test runner error should break the build.
</summary>
</member>
<member name="P:Fake.ProcessTestRunner.ProcessTestRunnerParams.TimeOut">
<summary>
 If the timeout is reached the xUnit task will be killed. Default is 5 minutes.
</summary>
</member>
<member name="P:Fake.ProcessTestRunner.ProcessTestRunnerParams.WorkingDir">
<summary>
 The working directory (optional).
</summary>
</member>
<member name="T:Fake.ProcessTestRunner.ProcessTestRunnerParams">
<summary>
 The ProcessTestRunner parameter type.
</summary>
</member>
<member name="M:Fake.ProcessTestRunner.RunConsoleTests(Microsoft.FSharp.Core.FSharpFunc{Fake.ProcessTestRunner.ProcessTestRunnerParams,Fake.ProcessTestRunner.ProcessTestRunnerParams},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Runs the given processes and returns the process results.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default parameter value.
  - `processes` - Sequence of one or more filenames and arguments to run.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         [&quot;process1.exe&quot;,&quot;argument1&quot;
          &quot;process2.exe&quot;,&quot;argument2&quot;]
           |&gt; RunConsoleTests (fun p -&gt; {p with TimeOut = TimeSpan.FromMinutes 1. })
     )
</summary>
</member>
<member name="M:Fake.ProcessTestRunner.runConsoleTests(Fake.ProcessTestRunner.ProcessTestRunnerParams,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Runs the given processes and returns the process result messages.
</summary>
</member>
<member name="M:Fake.ProcessTestRunner.RunConsoleTest(Fake.ProcessTestRunner.ProcessTestRunnerParams,System.String,System.String)">
<summary>
 Runs the given process and returns the process result.
</summary>
</member>
<member name="P:Fake.ProcessTestRunner.ProcessTestRunnerDefaults">
<summary>
 The ProcessTestRunner defaults.
</summary>
</member>
<member name="T:Fake.ProcessTestRunner">
<summary>
 Allows to execute processes as unit tests.
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.TestAdapterPath">
<summary>
 Path to test adapter e.g. xUnit (optional)
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.ErrorLevel">
<summary>
 Error level for controlling how VSTest failures should break the build (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.TimeOut">
<summary>
 A timeout for the test runner (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.ToolPath">
<summary>
 Path to VSTest.Console.exe (optional). By default the default install location is searched.
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.ListSettingsProviders">
<summary>
 List installed settings providers (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.ListLoggers">
<summary>
 List installed loggers (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.ListExecutors">
<summary>
 List installed test executors (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.ListDiscoverers">
<summary>
 List installed test discoverers (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.ListTestsPath">
<summary>
 List discovered tests from the given container path (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.Logger">
<summary>
 The logger to use for test results (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.TestCaseFilter">
<summary>
 Run tests that match the given expression (optional). Cannot be used with the Tests argument
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.Framework">
<summary>
 Target .NET framework version to use for test execution (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.Platform">
<summary>
 Target platform architecture for test execution (optional). Valid options include &quot;x86&quot;, &quot;x64&quot; and &quot;ARM&quot;.
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.UseVsixExtensions">
<summary>
 Use installed VSIX extensions in VSTest (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.InIsolation">
<summary>
 Run the tests in an isolated process (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.EnableCodeCoverage">
<summary>
 Enables code coverage collection (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.Tests">
<summary>
 Names of the tests that should be run (optional).
</summary>
</member>
<member name="P:Fake.VSTest.VSTestParams.SettingsPath">
<summary>
 Path to the run settings file to run tests with additional settings such as data collectors (optional).
</summary>
</member>
<member name="T:Fake.VSTest.VSTestParams">
<summary>
 Parameter type to configure [VSTest.Console.exe](https://msdn.microsoft.com/en-us/library/jj155800.aspx)
</summary>
</member>
<member name="T:Fake.VSTest.ErrorLevel">
<summary>
 Option which allow to specify if a VSTest error should break the build.
</summary>
</member>
<member name="M:Fake.VSTest.VSTest(Microsoft.FSharp.Core.FSharpFunc{Fake.VSTest.VSTestParams,Fake.VSTest.VSTestParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs VSTest command line tool (VSTest.Console.exe) on a group of assemblies.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default VSTestParams values.
  - `assemblies` - Sequence of one or more assemblies containing Microsoft Visual Studio Unit Test Framework unit tests.
 
 ## Sample usage

     Target &quot;Test&quot; (fun _ -&gt;
         !! (testDir + @&quot;\*.Tests.dll&quot;) 
           |&gt; VSTest (fun p -&gt; { p with SettingsPath = &quot;Local.RunSettings&quot; })
     )
</summary>
</member>
<member name="M:Fake.VSTest.buildVSTestArgs(Fake.VSTest.VSTestParams,System.String)">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 [omit]
</summary>
</member>
<member name="P:Fake.VSTest.VSTestDefaults">
<summary>
 VSTest default parameters.
</summary>
</member>
<member name="P:Fake.VSTest.vsTestExe">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.VSTest.vsTestPaths">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.VSTest">
<summary>
 Contains tasks to run [VSTest](https://msdn.microsoft.com/en-us/library/ms182486.aspx) unit tests.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Version(System.String)">
<summary>
 Creates an attribute which holds the assembly version
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Trademark(System.String)">
<summary>
 Creates an attribute which holds the trademark
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Title(System.String)">
<summary>
 Creates an attribute which holds the product title
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.StringAttribute(System.String,System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Creates a simple attribute with string values. Used as base for other attributes
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Product(System.String)">
<summary>
 Creates an attribute which holds the product name
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Metadata(System.String,System.String)">
<summary>
 Create an attribute which specifies metadata about the assembly
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.KeyName(System.String)">
<summary>
 Creates an attribute which holds the assembly key name
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.KeyFile(System.String)">
<summary>
 Creates an attribute which holds the assembly key file
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.InternalsVisibleTo(System.String)">
<summary>
 Creates an attribute which holds the &quot;InternalVisibleTo&quot; data
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.InformationalVersion(System.String)">
<summary>
 Creates an attribute which holds an assembly information version
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Guid(System.String)">
<summary>
 Creates an attribute which holds the Guid
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.FileVersion(System.String)">
<summary>
 Creates an attribute which holds the assembly file version
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Description(System.String)">
<summary>
 Creates an attribute which holds the product description
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.DelaySign(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Creates an attribute which specifies if the assembly uses delayed signing
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Culture(System.String)">
<summary>
 Creates an attribute which holds the assembly culture information
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Copyright(System.String)">
<summary>
 Creates an attribute which holds the copyright information
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Configuration(System.String)">
<summary>
 Creates an attribute which holds the assembly configuration
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.Company(System.String)">
<summary>
 Creates an attribute which holds the company information
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.ComVisible(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Creates an attribute which specifies if the assembly is visible via COM
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.CLSCompliant(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Creates an attribute which specifies if the assembly is CLS compliant
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.Attribute.BoolAttribute(System.String,System.Boolean,System.String)">
<summary>
 Creates a simple attribute with boolean values. Used as base for other attributes
</summary>
</member>
<member name="T:Fake.AssemblyInfoFile.Attribute">
<summary>
 Represents AssemblyInfo attributes
</summary>
</member>
<member name="T:Fake.AssemblyInfoFile.AssemblyInfoFileConfig">
<summary>
 Represents options for configuring the emission of AssemblyInfo
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.UpdateAttributes(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute})">
<summary>
 Update a set of attributes in an AssemblyInfo file. Fails if any attribute is not found.
 ## Parameters
  - `assemblyInfoFile` - The file to update. Language C#, F#, VB or C++ is determined from the extension.
  - `attributes` - The Attributes that should be updated matched on Name (Namespace is not used).
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.GetAttributeValue(System.String,System.String)">
<summary>
 Read the value of a single attribute from an AssemblyInfo file. Note that string values are returned with surrounding &quot;&quot;.
 ## Parameters
  - `attrName` - Name of the attribute without &quot;Attribute&quot; at the end.
  - `assemblyInfoFile` - The file to read from. Language C#, F#, VB or C++ is determined from the extension.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.GetAttribute(System.String,System.String)">
<summary>
 Read a single attribute from an AssemblyInfo file.
 ## Parameters
  - `attrName` - Name of the attribute without &quot;Attribute&quot; at the end.
  - `assemblyInfoFile` - The file to read from. Language C#, F#, VB or C++ is determined from the extension.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.GetAttributes(System.String)">
<summary>
 Read attributes from an AssemblyInfo file and return as a sequence of Attribute.
 ## Parameters
  - `assemblyInfoFile` - The file to read attributes from. Language C#, F#, VB or C++ is determined from the extension.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateCppCliAssemblyInfo(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute})">
<summary>
  Creates a C++/CLI AssemblyInfo file with the given attributes.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateVisualBasicAssemblyInfo(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute})">
<summary>
 Creates a VB AssemblyInfo file with the given attributes.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateFSharpAssemblyInfo(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute})">
<summary>
 Creates a F# AssemblyInfo file with the given attributes.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateCSharpAssemblyInfo(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute})">
<summary>
 Creates a C# AssemblyInfo file with the given attributes.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateCppCliAssemblyInfoWithConfig(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute},Fake.AssemblyInfoFile.AssemblyInfoFileConfig)">
<summary>
 Creates a C++/CLI AssemblyInfo file with the given attributes and configuration.
 Does not generate an AssemblyVersionInformation class.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateVisualBasicAssemblyInfoWithConfig(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute},Fake.AssemblyInfoFile.AssemblyInfoFileConfig)">
<summary>
 Creates a VB AssemblyInfo file with the given attributes and configuration.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateFSharpAssemblyInfoWithConfig(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute},Fake.AssemblyInfoFile.AssemblyInfoFileConfig)">
<summary>
 Creates a F# AssemblyInfo file with the given attributes and configuration.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="M:Fake.AssemblyInfoFile.CreateCSharpAssemblyInfoWithConfig(System.String,System.Collections.Generic.IEnumerable{Fake.AssemblyInfoFile.Attribute},Fake.AssemblyInfoFile.AssemblyInfoFileConfig)">
<summary>
 Creates a C# AssemblyInfo file with the given attributes and configuration.
 The generated AssemblyInfo file contains an AssemblyVersionInformation class which can be used to retrieve the current version no. from inside of an assembly.
</summary>
</member>
<member name="T:Fake.AssemblyInfoFile">
<summary>
 Contains tasks to generate AssemblyInfo files for C# and F#.
 There is also a tutorial about the [AssemblyInfo tasks](../assemblyinfo.html) available.
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.ReplaceAssemblyInfoVersionsBulk(Fake.FileSystem.FileIncludes,Microsoft.FSharp.Core.FSharpFunc{Fake.AssemblyInfoHelper.AssemblyInfoReplacementParams,Fake.AssemblyInfoHelper.AssemblyInfoReplacementParams})">
<summary>
 Update all AssemblyInfos that were passed with given FileInclude
 ## Parameters

 - &apos;dir&apos; - The directory (subdirectories will be included), which inhabits the AssemblyInfo files.
 - &apos;replacementParameters&apos; - The replacement parameters for the AssemblyInfo files.

 ## Sample

     let assemblyInfos = !!(@&quot;.\src\**\AssemblyInfo.cs&quot;) 
                            --(@&quot;**\*Scripts*\**&quot;)

     ReplaceAssemblyInfoVersionsBulk assemblyInfos (fun f -&gt; 
         { f with
                 AssemblyVersion = asmVersion
                 AssemblyInformationalVersion = asmInfoVersion
         })                          
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.BulkReplaceAssemblyInfoVersions(System.String,Microsoft.FSharp.Core.FSharpFunc{Fake.AssemblyInfoHelper.AssemblyInfoReplacementParams,Fake.AssemblyInfoHelper.AssemblyInfoReplacementParams})">
<summary>
 Update all AssemblyInfo.[fs|cs|vb] files in the specified directory and its subdirectories
 ## Parameters

 - &apos;dir&apos; - The directory (subdirectories will be included), which inhabits the AssemblyInfo files.
 - &apos;replacementParameters&apos; - The replacement parameters for the AssemblyInfo files.

 ## Sample

        BulkReplaceAssemblyInfoVersions &quot;test/&quot; (fun f -&gt; 
                                                   {f with
                                                       AssemblyVersion = &quot;1.1.1.1&quot;
                                                       AssemblyInformationalVersion = &quot;1.1.1.1&quot;})
</summary>
</member>
<member name="P:Fake.AssemblyInfoHelper.AssemblyInfoReplacementDefaults">
<summary>
 AssemblyInfoReplacement default params
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.AssemblyInfo(Microsoft.FSharp.Core.FSharpFunc{Fake.AssemblyInfoHelper.AssemblyInfoParams,Fake.AssemblyInfoHelper.AssemblyInfoParams})">
<summary>
 Generates an AssemblyInfo file for projects
 **Obsolete - Please use the new AssemblyInfoFile tasks**
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.generateFile(Fake.AssemblyInfoHelper.AssemblyInfoParams,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.IO.TextWriter)">
<summary>
 generates the assembly info file
</summary>
</member>
<member name="P:Fake.AssemblyInfoHelper.AssemblyInfoDefaults">
<summary>
 AssemblyInfo default params
</summary>
</member>
<member name="T:Fake.AssemblyInfoHelper">
<summary>
 Generates an AssemblyInfo file
</summary>
</member>
<member name="T:Fake.FxCopHelper.FxCopParams">
<summary>
 Parameter type for the FxCop tool
</summary>
</member>
<member name="T:Fake.FxCopHelper.FxCopErrorLevel">
<summary>
 The FxCop error reporting level
</summary>
</member>
<member name="M:Fake.FxCopHelper.FxCop(Microsoft.FSharp.Core.FSharpFunc{Fake.FxCopHelper.FxCopParams,Fake.FxCopHelper.FxCopParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Run FxCop on a group of assemblies.
</summary>
</member>
<member name="P:Fake.FxCopHelper.FxCopDefaults">
<summary>
 FxCop Default parameters
</summary>
</member>
<member name="M:Fake.FxCopHelper.checkForErrors(System.String)">
<summary>
 This checks the result file with some XML queries for errors
 [omit]
</summary>
</member>
<member name="T:Fake.FxCopHelper">
<summary>
 Contains a task which can be used to run [FxCop](http://msdn.microsoft.com/en-us/library/bb429476(v=vs.80).aspx) on .NET assemblies. There is also a [tutorial](../fxcop.html) for this task available.
</summary>
</member>
<member name="M:Fake.FSharpFormatting.run(System.String)">
<summary>
 Runs fsformatting.exe with the given command in the given repository directory.
</summary>
</member>
<member name="P:Fake.FSharpFormatting.toolPath">
<summary>
 Specifies the fsformatting executable
</summary>
</member>
<member name="T:Fake.FSharpFormatting">
<summary>
 Contains tasks which allow to run FSharp.Formatting for generating documentation.
</summary>
</member>
<member name="T:Fake.NCoverHelper.NCoverParams">
<summary>
 The NCover parameter type.
</summary>
</member>
<member name="M:Fake.NCoverHelper.NCover(Microsoft.FSharp.Core.FSharpFunc{Fake.NCoverHelper.NCoverParams,Fake.NCoverHelper.NCoverParams},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs NCover on a group of assemblies.
 ## Parameters

  - `setParams` - Function used to overwrite the NCover default parameters.
  - `assemblies` - The test assemblies, which should be inspected.
  - `excludeAssemblies` - These assemblies are excluded.
</summary>
</member>
<member name="P:Fake.NCoverHelper.NCoverDefaults">
<summary>
 NCover default parameters.
</summary>
</member>
<member name="T:Fake.NCoverHelper">
<summary>
 Contains a task which can be used to run [NCover](http://www.ncover.com/) on .NET assemblies.
</summary>
</member>
<member name="M:Fake.NDepend.NDepend(Microsoft.FSharp.Core.FSharpFunc{Fake.NDepend.NDependParams,Fake.NDepend.NDependParams})">
<summary>
 Runs [NDepend](http://www.ndepend.com/) on a .NET project file.
 ## Parameters

  - `setParams` - Function used to manipulate the default NDependDefaults value.

 ## Sample

      NDepend (fun p -&gt; { p with 
                         ProjectFile = currentDirectory @@ &quot;NDependProjectFile.ndproj&quot;
                         CoverageFiles = [artifactsDir @@ &quot;DotCover.xml&quot; ]
              })
</summary>
</member>
<member name="T:Fake.NDepend">
<summary>
 Contains a task which allows to run [NDepend](http://www.ndepend.com/) on .NET project files.
</summary>
</member>
<member name="T:Fake.MsBuildLogger.ErrorLogger">
<summary>
 TeamCity Logger for MSBuild
</summary>
</member>
<member name="T:Fake.MsBuildLogger.TeamCityLogger">
<summary>
 TeamCity Logger for MSBuild
</summary>
</member>
<member name="M:Fake.MsBuildLogger.MSBuildLogger.RegisterEvents(Microsoft.Build.Framework.IEventSource)">
<summary>
 Abstract function which registers an event listener.
</summary>
</member>
<member name="T:Fake.MsBuildLogger.MSBuildLogger">
<summary>
 Abstract MSBuild Logger class.
</summary>
</member>
<member name="P:Fake.MsBuildLogger.ErrorLoggerFile">
<summary>
 The ErrorLogFile
</summary>
</member>
<member name="M:Fake.MsBuildLogger.errToStr(Microsoft.Build.Framework.BuildErrorEventArgs)">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.MsBuildLogger">
<summary>
 Contains Logger implementations for MsBuild.
</summary>
</member>
<member name="T:Fake.MSBuildHelper.MSBuildParams">
<summary>
 A type for MSBuild task parameters
</summary>
</member>
<member name="T:Fake.MSBuildHelper.MSBuildFileLoggerConfig">
<summary>
 A type for MSBuild configuration
</summary>
</member>
<member name="T:Fake.MSBuildHelper.MSBuildLogParameter">
<summary>
 MSBuild log option
</summary>
</member>
<member name="T:Fake.MSBuildHelper.MSBuildVerbosity">
<summary>
 MSBuild verbosity option
</summary>
</member>
<member name="T:Fake.MSBuildHelper.MSBuildProject">
<summary>
 A type to represent MSBuild project files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.BuildWebsites(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given web project files with debug configuration and copies them to the given websiteDir.
 ## Parameters
  - `outputPath` - The output path.
  - `projectFiles` - The project file paths.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.BuildWebsitesConfig(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given web project files in specified configuration and copies them to the given outputPath.
 ## Parameters
  - `outputPath` - The output path.
  - `configuration` - MSBuild configuration.
  - `projectFiles` - The project file paths.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.BuildWebsite(System.String,System.String)">
<summary>
 Builds the given web project file with debug configuration and copies it to the given outputPath.
 ## Parameters
  - `outputPath` - The output path.
  - `projectFile` - The project file path.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.BuildWebsiteConfig(System.String,System.String,System.String)">
<summary>
 Builds the given web project file in the specified configuration and copies it to the given outputPath.
 ## Parameters
  - `outputPath` - The output path.
  - `configuration` - MSBuild configuration.
  - `projectFile` - The project file path.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildReleaseExt(System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}},System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files in release mode and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `properties` - A list with tuples of property name and property values.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildWithDefaults(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files in release mode to the default outputs.
 ## Parameters
  - `targets` - A string with the target names which should be run by MSBuild.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildRelease(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildDebug(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuild(System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files or solution files and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `properties` - A list with tuples of property name and property values.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildWithProjectProperties(System.String,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files and collects the output files.
 ## Parameters
  - `outputPath` - If it is null or empty then the project settings are used.
  - `targets` - A string with the target names which should be run by MSBuild.
  - `properties` - A list with tuples of property name and property values.
  - `projects` - A list of project or solution files.
</summary>
</member>
<member name="M:Fake.MSBuildHelper.build(Microsoft.FSharp.Core.FSharpFunc{Fake.MSBuildHelper.MSBuildParams,Fake.MSBuildHelper.MSBuildParams},System.String)">
<summary>
 Runs a MSBuild project
 ## Parameters
  - `setParams` - A function that overwrites the default MsBuildParams
  - `project` - A string with the path to the project file to build.

 ## Sample

     let buildMode = getBuildParamOrDefault &quot;buildMode&quot; &quot;Release&quot;
     let setParams defaults =
             { defaults with
                 Verbosity = Some(Quiet)
                 Targets = [&quot;Build&quot;]
                 Properties =
                     [
                         &quot;Optimize&quot;, &quot;True&quot;
                         &quot;DebugSymbols&quot;, &quot;True&quot;
                         &quot;Configuration&quot;, buildMode
                     ]
              }
     build setParams &quot;./MySolution.sln&quot;
           |&gt; DoNothing
</summary>
</member>
<member name="P:Fake.MSBuildHelper.MSBuildLoggers">
<summary>
 Defines the loggers to use for MSBuild task
</summary>
</member>
<member name="P:Fake.MSBuildHelper.ErrorLoggerName">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSBuildHelper.TeamCityLoggerName">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.serializeMSBuildParams(Fake.MSBuildHelper.MSBuildParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.getAllParameters``1(``0,``0,``0,``0,``0,``0,``0,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSBuildHelper.MSBuildDefaults">
<summary>
 Defines a default for MSBuild task parameters
</summary>
</member>
<member name="M:Fake.MSBuildHelper.getProjectReferences(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.processReferences(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.String},System.String,System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.getReferenceElements(System.String,System.String,System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.loadProject(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuildHelper.xname(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSBuildHelper.msbuildNamespace">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.MSBuildHelper.msBuildExe">
<summary>
 Tries to detect the right version of MSBuild.
   - On all OS&apos;s, we check a `MSBuild` environment variable which is either
     * a direct path to a file to use, or
     * a directory that contains a file called `msbuild` on non-Windows systems, or `MSBuild.exe` on Windows systems
   - In addition, on non-Windows systems we check the current PATH for the following binaries, in this order:
     * `msbuild`
     * `xbuild`
   - In addition, on Windows systems we
     * try to read the MSBuild tool location from the AppSettings file using a parameter named `MSBuild`, and finally
     * if a `VisualStudioVersion` environment variable is specified, we try to use the specific MSBuild version, matching that Visual Studio version.
</summary>
</member>
<member name="T:Fake.MSBuildHelper.BuildException">
<summary>
 An exception type to signal build errors.
</summary>
</member>
<member name="T:Fake.MSBuildHelper">
<summary>
 Contains tasks which allow to use MSBuild (or xBuild on Linux/Unix) to build .NET project files or solution files.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.ArchiveFileSpec">
<summary>
 A description of a file to be added to an archive.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.archiveFileSpecWithBaseDir(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Constructs a file specification which will archive the file with a path relative to the `baseDir`.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.archiveFileSpec(System.IO.FileInfo)">
<summary>
 Constructs a file specification which will archive the file at the root.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.CompressDirWithDefaults(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Creates a tar.gz archive containing all the files in a directory.
 ## Parameters
  - `baseDir` - The base directory to be archived. This directory will be the root of the resulting archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.CompressDir(System.Boolean,System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Creates a tar archive containing all the files in a directory.
 ## Parameters
  - `flatten` - If set to true then all subfolders are merged into the root folder of the archive.
  - `baseDir` - The base directory to be archived. This directory will be the root of the resulting archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.StoreWithDefaults(System.IO.DirectoryInfo,System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Creates a tar archive with the given files with default parameters.
 ## Parameters
  - `baseDir` - The relative directory of the files to be archived. Use this parameter to influence directory structure within the archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `files` - A sequence of files to store.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.StoreSpecs(System.IO.FileInfo,System.Collections.Generic.IEnumerable{Fake.ArchiveHelper.ArchiveFileSpec})">
<summary>
 Creates a tar archive with the given archive file specifications.
 ## Parameters
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `fileSpecs` - A sequence of archive file specifications.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.Store(System.Boolean,System.IO.DirectoryInfo,System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Creates a tar archive with the given files.
 ## Parameters
  - `flatten` - If set to true then all subfolders are merged into the root folder of the archive.
  - `baseDir` - The relative directory of the files to be archived. Use this parameter to influence directory structure within the archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `files` - A sequence of files to store.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.Extract(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Extracts a tar archive to a given directory.
 ## Parameters
  - `targetDir` - The directory into which the archived files will be extracted.
  - `archiveFile` - The archive to be extracted.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.store(System.IO.FileInfo,System.Collections.Generic.IEnumerable{Fake.ArchiveHelper.ArchiveFileSpec})">
<summary>
 Constructs a function that will create a tar archive from a set of files.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.createFile(System.IO.FileInfo)">
<summary>
 Creates a `TarOutputStream` wrapping a file using the given parameters.
 ## Parameters
  - `file` - The `FileInfo` describing the location to which the archive should be written. Will be overwritten if it exists.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.extractStream(System.IO.Stream)">
<summary>
 Wraps an input stream with a tar container extractor.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.storeStream(System.IO.Stream)">
<summary>
 Wraps an output stream with a tar container store.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.addEntry(ICSharpCode.SharpZipLib.Tar.TarOutputStream)">
<summary>
 Adds a file, specified by an `ArchiveFileSpec`, to a `TarOutputStream`.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.BZip2.CompressDirWithDefaults(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Creates a tar.bz2 archive containing all the files in a directory.
 ## Parameters
  - `baseDir` - The base directory to be compressed. This directory will be the root of the resulting archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.BZip2.CompressDir(System.Boolean,System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Creates a tar.bz2 archive containing all the files in a directory.
 ## Parameters
  - `flatten` - If set to true then all subfolders are merged into the root folder of the archive.
  - `baseDir` - The base directory to be compressed. This directory will be the root of the resulting archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.BZip2.CompressWithDefaults(System.IO.DirectoryInfo,System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Creates a tar.bz2 archive with the given files with default parameters.
 ## Parameters
  - `baseDir` - The relative directory of the files to be compressed. Use this parameter to influence directory structure within the archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `files` - A sequence of files to compress.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.BZip2.CompressSpecs(System.IO.FileInfo,System.Collections.Generic.IEnumerable{Fake.ArchiveHelper.ArchiveFileSpec})">
<summary>
 Creates a tar.bz2 archive with the given archive file specifications.
 ## Parameters
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `fileSpecs` - A sequence of archive file specifications.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.BZip2.Compress(System.Boolean,System.IO.DirectoryInfo,System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Creates a tar.bz2 archive with the given files.
 ## Parameters
  - `flatten` - If set to true then all subfolders are merged into the root folder of the archive.
  - `baseDir` - The relative directory of the files to be compressed. Use this parameter to influence directory structure within the archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `files` - A sequence of files to compress.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.BZip2.extract(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Extracts a tar.bz2 archive to a given directory.
 ## Parameters
  - `extractDir` - The directory into which the archived files will be extracted.
  - `archiveFile` - The archive to be extracted.
</summary>
</member>
<member name="P:Fake.ArchiveHelper.Tar.BZip2.compress">
<summary>
 Constructs a function that will create a tar.bz2 archive from a set of files.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.BZip2.createFile(System.IO.FileInfo)">
<summary>
 Creates a `TarOutputStream` wrapping a file.
 ## Parameters
  - `file` - The `FileInfo` describing the location to which the archive should be written. Will be overwritten if it exists.
</summary>
</member>
<member name="P:Fake.ArchiveHelper.Tar.BZip2.extractStream">
<summary>
 Wraps an input stream with a tar.gz decompressor.
</summary>
</member>
<member name="P:Fake.ArchiveHelper.Tar.BZip2.compressStream">
<summary>
 Wraps an output stream with a tar.bz2 compressor.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.Tar.BZip2">
<summary>
 Operations and tasks for working with tar archives compressed with BZip2.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.CompressDirWithDefaults(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Creates a tar.gz archive containing all the files in a directory.
 ## Parameters
  - `baseDir` - The base directory to be compressed. This directory will be the root of the resulting archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.CompressDir(Microsoft.FSharp.Core.FSharpFunc{Fake.ArchiveHelper.GZip.GZipCompressionParams,Fake.ArchiveHelper.GZip.GZipCompressionParams},System.Boolean,System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Creates a tar.gz archive containing all the files in a directory.
 ## Parameters
  - `setParams` - A function which modifies the default compression parameters.
  - `flatten` - If set to true then all subfolders are merged into the root folder of the archive.
  - `baseDir` - The base directory to be compressed. This directory will be the root of the resulting archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.CompressWithDefaults(System.IO.DirectoryInfo,System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Creates a tar.gz archive with the given files with default parameters.
 ## Parameters
  - `baseDir` - The relative directory of the files to be compressed. Use this parameter to influence directory structure within the archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `files` - A sequence of files to compress.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.CompressSpecs(Microsoft.FSharp.Core.FSharpFunc{Fake.ArchiveHelper.GZip.GZipCompressionParams,Fake.ArchiveHelper.GZip.GZipCompressionParams},System.IO.FileInfo,System.Collections.Generic.IEnumerable{Fake.ArchiveHelper.ArchiveFileSpec})">
<summary>
 Creates a tar.gz archive with the given archive file specifications.
 ## Parameters
  - `setParams` - A function which modifies the default compression parameters.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `fileSpecs` - A sequence of archive file specifications.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.Compress(Microsoft.FSharp.Core.FSharpFunc{Fake.ArchiveHelper.GZip.GZipCompressionParams,Fake.ArchiveHelper.GZip.GZipCompressionParams},System.Boolean,System.IO.DirectoryInfo,System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Creates a tar.gz archive with the given files.
 ## Parameters
  - `setParams` - A function which modifies the default compression parameters.
  - `flatten` - If set to true then all subfolders are merged into the root folder of the archive.
  - `baseDir` - The relative directory of the files to be compressed. Use this parameter to influence directory structure within the archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `files` - A sequence of files to compress.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.Extract(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Extracts a tar.gz archive to a given directory.
 ## Parameters
  - `extractDir` - The directory into which the archived files will be extracted.
  - `archiveFile` - The archive to be extracted.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.compress(Fake.ArchiveHelper.GZip.GZipCompressionParams)">
<summary>
 Constructs a function that will create a tar.gz archive from a set of files.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.createFile(Fake.ArchiveHelper.GZip.GZipCompressionParams,System.IO.FileInfo)">
<summary>
 Creates a `TarOutputStream` wrapping a file using the given parameters.
 ## Parameters
  - `gzipParams` - The gzip compression parameters.
  - `file` - The `FileInfo` describing the location to which the archive should be written. Will be overwritten if it exists.
</summary>
</member>
<member name="P:Fake.ArchiveHelper.Tar.GZip.extractStream">
<summary>
 Wraps an input stream with a tar.gz decompressor.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Tar.GZip.compressStream(Fake.ArchiveHelper.GZip.GZipCompressionParams)">
<summary>
 Wraps an output stream with a tar.gz compressor.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.Tar.GZip">
<summary>
 Operations and tasks for working with tar archives compressed with GZip.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.Tar">
<summary>
 Operations and tasks for working with tar archives.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.BZip2.CompressFile(System.IO.FileInfo,System.IO.FileInfo)">
<summary>
 Compresses a file using bzip2.
 ## Parameters
  - `outFile` - The compressed output file. If existing, will be overwritten.
  - `file` - The file to be compressed.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.BZip2.ExtractFile(System.IO.FileInfo,System.IO.FileInfo)">
<summary>
 Extracts a file compressed with bzip2.
 ## Parameters
  - `outFile` - The extracted output file. If existing, will be overwritten.
  - `file` - The compressed file.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.BZip2.createFile(System.IO.FileInfo)">
<summary>
 Creates a `BZip2OutputStream` wrapping a file.
 ## Parameters
  - `file` - The `FileInfo` describing the location to which the compressed file should be written. Will be overwritten if it exists.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.BZip2.extractStream(System.IO.Stream)">
<summary>
 Wraps an input stream with a bzip2 decompressor.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.BZip2.compressStream(System.IO.Stream)">
<summary>
 Wraps an output stream with a bzip2 compressor.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.BZip2">
<summary>
 Operations and tasks for working with gzip compressed files.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.GZip.GZipCompressionParams">
<summary>
 The gzip archive compression parameters.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.GZip.CompressFileWithDefaults(System.IO.FileInfo,System.IO.FileInfo)">
<summary>
 Compresses a file using gzip.
 ## Parameters
  - `outFile` - The compressed output file. If existing, will be overwritten.
  - `file` - The file to be compressed.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.GZip.CompressFile(Microsoft.FSharp.Core.FSharpFunc{Fake.ArchiveHelper.GZip.GZipCompressionParams,Fake.ArchiveHelper.GZip.GZipCompressionParams},System.IO.FileInfo,System.IO.FileInfo)">
<summary>
 Compresses a file using gzip.
 ## Parameters
  - `setParams` - A function which modifies the default compression parameters.
  - `outFile` - The compressed output file. If existing, will be overwritten.
  - `file` - The file to be compressed.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.GZip.ExtractFile(System.IO.FileInfo,System.IO.FileInfo)">
<summary>
 Extracts a file compressed with gzip.
 ## Parameters
  - `outFile` - The extracted output file. If existing, will be overwritten.
  - `file` - The compressed file.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.GZip.createFile(Fake.ArchiveHelper.GZip.GZipCompressionParams,System.IO.FileInfo)">
<summary>
 Creates a `GZipOutputStream` wrapping a file using the given parameters.
 ## Parameters
  - `gzipParams` - The gzip compression parameters.
  - `file` - The `FileInfo` describing the location to which the compressed file should be written. Will be overwritten if it exists.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.GZip.extractStream(System.IO.Stream)">
<summary>
 Wraps an input stream with a zip decompressor.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.GZip.compressStream(Fake.ArchiveHelper.GZip.GZipCompressionParams,System.IO.Stream)">
<summary>
 Wraps an output stream with a gzip compressor.
</summary>
</member>
<member name="P:Fake.ArchiveHelper.GZip.GZipCompressionDefaults">
<summary>
 The default gzip archive compression parameters
 ## Defaults
  - `Level` - `CompressionLevel.Default`
</summary>
</member>
<member name="T:Fake.ArchiveHelper.GZip">
<summary>
 Operations and tasks for working with gzip compressed files.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.Zip.ZipCompressionParams">
<summary>
 The zip archive compression parameters.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.CompressDirWithDefaults(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Creates a zip archive containing all the files in a directory.
 ## Parameters
  - `baseDir` - The base directory to be compressed. This directory will be the root of the resulting archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.CompressDir(Microsoft.FSharp.Core.FSharpFunc{Fake.ArchiveHelper.Zip.ZipCompressionParams,Fake.ArchiveHelper.Zip.ZipCompressionParams},System.Boolean,System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Creates a zip archive containing all the files in a directory.
 ## Parameters
  - `setParams` - A function which modifies the default compression parameters.
  - `flatten` - If set to true then all subfolders are merged into the root folder of the archive.
  - `baseDir` - The base directory to be compressed. This directory will be the root of the resulting archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.CompressWithDefaults(System.IO.DirectoryInfo,System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Creates a zip archive with the given files with default parameters.
 ## Parameters
  - `baseDir` - The relative directory of the files to be compressed. Use this parameter to influence directory structure within the archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `files` - A sequence of files to compress.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.CompressSpecs(Microsoft.FSharp.Core.FSharpFunc{Fake.ArchiveHelper.Zip.ZipCompressionParams,Fake.ArchiveHelper.Zip.ZipCompressionParams},System.IO.FileInfo,System.Collections.Generic.IEnumerable{Fake.ArchiveHelper.ArchiveFileSpec})">
<summary>
 Creates a zip archive with the given archive file specifications.
 ## Parameters
  - `setParams` - A function which modifies the default compression parameters.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `fileSpecs` - A sequence of archive file specifications.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.Compress(Microsoft.FSharp.Core.FSharpFunc{Fake.ArchiveHelper.Zip.ZipCompressionParams,Fake.ArchiveHelper.Zip.ZipCompressionParams},System.Boolean,System.IO.DirectoryInfo,System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Creates a zip archive with the given files.
 ## Parameters
  - `setParams` - A function which modifies the default compression parameters.
  - `flatten` - If set to true then all subfolders are merged into the root folder of the archive.
  - `baseDir` - The relative directory of the files to be compressed. Use this parameter to influence directory structure within the archive.
  - `archiveFile` - The output archive file. If existing, will be overwritten.
  - `files` - A sequence of files to compress.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.Extract(System.IO.DirectoryInfo,System.IO.FileInfo)">
<summary>
 Extracts a zip archive to a given directory.
 ## Parameters
  - `extractDir` - The directory into which the archived files will be extracted.
  - `archiveFile` - The archive to be extracted.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.compress(Fake.ArchiveHelper.Zip.ZipCompressionParams)">
<summary>
 Constructs a function that will create a zip archive from a set of files.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.createFile(Fake.ArchiveHelper.Zip.ZipCompressionParams,System.IO.FileInfo)">
<summary>
 Creates a `ZipOutputStream` wrapping a file using the given parameters.
 ## Parameters
  - `zipParams` - The zip compression parameters.
  - `file` - The `FileInfo` describing the location to which the archive should be written. Will be overwritten if it exists.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.extractStream(System.IO.Stream)">
<summary>
 Wraps an input stream with a zip decompressor.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.compressStream(Fake.ArchiveHelper.Zip.ZipCompressionParams,System.IO.Stream)">
<summary>
 Wraps an output stream with a zip compressor.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.Zip.addZipEntry(ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
<summary>
 Adds a file, specified by an `ArchiveFileSpec`, to a `ZipOutputStream`.
</summary>
</member>
<member name="P:Fake.ArchiveHelper.Zip.ZipCompressionDefaults">
<summary>
 The default zip archive compression parameters
 ## Defaults
  - `Level` - `CompressionLevel.Default`
  - `Comment` - `None`
</summary>
</member>
<member name="T:Fake.ArchiveHelper.Zip">
<summary>
 Operations and tasks for working with zip archives.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.CompressionLevel.T">
<summary>
 Defines the compression level type.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.CompressionLevel.value(Fake.ArchiveHelper.CompressionLevel.T)">
<summary>
 Retrieves the numeric compression level.
</summary>
</member>
<member name="M:Fake.ArchiveHelper.CompressionLevel.create(System.Int32)">
<summary>
 Constructs a `CompressionLevel`. Level is clipped to a value between 0 and 9.
</summary>
</member>
<member name="P:Fake.ArchiveHelper.CompressionLevel.Default">
<summary>
 The default compression level.
</summary>
</member>
<member name="T:Fake.ArchiveHelper.CompressionLevel">
<summary>
 Provides validation of comression levels used for the zip and gzip compression algorithms.
</summary>
</member>
<member name="T:Fake.ArchiveHelper">
<summary>
 Provides utility tasks for storing and compressing files in archives.
</summary>
</member>
<member name="M:Fake.ZipHelper.ZipOfIncludes(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,Fake.FileSystem.FileIncludes}})">
<summary>
 Creates a zip file with the given files.
 ## Parameters
  - `fileName` - The file name of the resulting zip file.
  - `files` - A sequence of target folders and files to include relative to their base directory.

 ## Sample

 The following sample creates a zip file containing the files from the two target folders and FileIncludes.

 - The files from the first FileInclude will be placed in the root of the zip file.
 - The files from the second FileInclude will be placed under the directory `app_data\jobs\continuous\MyWebJob` in the zip file.


     Target &quot;Zip&quot; (fun _ -&gt;
         [   &quot;&quot;, !! &quot;MyWebApp/*.html&quot;
                 ++ &quot;MyWebApp/bin/**/*.dll&quot;
                 ++ &quot;MyWebApp/bin/**/*.pdb&quot;
                 ++ &quot;MyWebApp/fonts/**&quot;
                 ++ &quot;MyWebApp/img/**&quot;
                 ++ &quot;MyWebApp/js/**&quot;
                 -- &quot;MyWebApp/js/_references.js&quot;
                 ++ &quot;MyWebApp/web.config&quot;
             @&quot;app_data\jobs\continuous\MyWebJob&quot;, !! &quot;MyWebJob/bin/Release/*.*&quot;
         ]
         |&gt; ZipOfIncludes (sprintf @&quot;bin\MyWebApp.%s.zip&quot; buildVersion)
     )

</summary>
</member>
<member name="M:Fake.ZipHelper.CreateZipOfIncludes(System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.String,Fake.FileSystem.FileIncludes}})">
<summary>
 Creates a zip file with the given files.
 ## Parameters
  - `fileName` - The file name of the resulting zip file.
  - `comment` - A comment for the resulting zip file.
  - `level` - The compression level.
  - `files` - A sequence of target folders and files to include relative to their base directory.
</summary>
</member>
<member name="M:Fake.ZipHelper.UnzipFirstMatchingFileInMemory(Microsoft.FSharp.Core.FSharpFunc{ICSharpCode.SharpZipLib.Zip.ZipEntry,System.Boolean},System.String)">
<summary>
 Unzips a single file from the archive with the given file name.
 ## Parameters
  - `predicate` - The predictae for the searched file in the archive.
  - `zipFileName` - The file name of the zip file.
</summary>
</member>
<member name="M:Fake.ZipHelper.UnzipSingleFileInMemory(System.String,System.String)">
<summary>
 Unzips a single file from the archive with the given file name.
 ## Parameters
  - `fileToUnzip` - The file inside the archive.
  - `zipFileName` - The file name of the zip file.
</summary>
</member>
<member name="M:Fake.ZipHelper.Unzip(System.String,System.String)">
<summary>
 Unzips a file with the given file name.
 ## Parameters
  - `target` - The target directory.
  - `fileName` - The file name of the zip file.
</summary>
</member>
<member name="M:Fake.ZipHelper.ZipFile(System.String,System.String)">
<summary>
 Creates a zip file with the given file.
 ## Parameters
  - `fileName` - The file name of the resulting zip file.
  - `targetFileName` - The file to zip.
</summary>
</member>
<member name="M:Fake.ZipHelper.Zip(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates a zip file with the given files.
 ## Parameters
  - `workingDir` - The relative dir of the zip files. Use this parameter to influence directory structure within zip file.
  - `fileName` - The file name of the resulting zip file.
  - `files` - A sequence with files to zip.
</summary>
</member>
<member name="M:Fake.ZipHelper.CreateZip(System.String,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates a zip file with the given files
 ## Parameters
  - `workingDir` - The relative dir of the zip files. Use this parameter to influence directory structure within zip file.
  - `fileName` - The fileName of the resulting zip file.
  - `comment` - A comment for the resulting zip file.
  - `level` - The compression level.
  - `flatten` - If set to true then all subfolders are merged into the root folder.
  - `files` - A sequence with files to zip.
</summary>
</member>
<member name="P:Fake.ZipHelper.DefaultZipLevel">
<summary>
 The default zip level
</summary>
</member>
<member name="T:Fake.ZipHelper">
<summary>
 This module contains helper function to create and extract zip archives.
</summary>
</member>
<member name="P:Fake.StrongNamingHelper.StrongNameParams.WorkingDir">
<summary>
 The directory where the Strong naming process will be started.
</summary>
</member>
<member name="P:Fake.StrongNamingHelper.StrongNameParams.TimeOut">
<summary>
 The timeout for the Strong naming process.
</summary>
</member>
<member name="P:Fake.StrongNamingHelper.StrongNameParams.ToolPath">
<summary>
 (Required) Path to the sn.exe
</summary>
</member>
<member name="T:Fake.StrongNamingHelper.StrongNameParams">
<summary>
 Strong naming parameters
</summary>
</member>
<member name="M:Fake.StrongNamingHelper.DisableVerification(System.String,System.String)">
<summary>
 Registers the given assembly for verification skipping.
</summary>
</member>
<member name="M:Fake.StrongNamingHelper.StrongName(Microsoft.FSharp.Core.FSharpFunc{Fake.StrongNamingHelper.StrongNameParams,Fake.StrongNamingHelper.StrongNameParams},System.String)">
<summary>
 Runs sn.exe with the given command.
</summary>
</member>
<member name="P:Fake.StrongNamingHelper.StrongNameDefaults">
<summary>
 Strong naming default parameters
</summary>
</member>
<member name="T:Fake.StrongNamingHelper">
<summary>
 This module contains helper function for Microsoft&apos;s sn.exe
</summary>
</member>
<member name="P:Fake.GACHelper.GACParams.WorkingDir">
<summary>
 The directory where the process will be started.
</summary>
</member>
<member name="P:Fake.GACHelper.GACParams.TimeOut">
<summary>
 The timeout for the process.
</summary>
</member>
<member name="P:Fake.GACHelper.GACParams.ToolPath">
<summary>
 (Required) Path to the gacutil
</summary>
</member>
<member name="T:Fake.GACHelper.GACParams">
<summary>
 GAC parameters
</summary>
</member>
<member name="M:Fake.GACHelper.GAC(Microsoft.FSharp.Core.FSharpFunc{Fake.GACHelper.GACParams,Fake.GACHelper.GACParams},System.String)">
<summary>
 Runs gacutil with the given command.
</summary>
</member>
<member name="P:Fake.GACHelper.GACDefaults">
<summary>
 GACutil default parameters
</summary>
</member>
<member name="P:Fake.GACHelper.gacutilToolPath">
<summary>
 Path to newest `gacutil.exe`
</summary>
</member>
<member name="T:Fake.GACHelper">
<summary>
 This module contains helper function for the GAC
</summary>
</member>
<member name="P:Fake.NGenHelper.NGenParams.WorkingDir">
<summary>
 The directory where the process will be started.
</summary>
</member>
<member name="P:Fake.NGenHelper.NGenParams.TimeOut">
<summary>
 The timeout for the process.
</summary>
</member>
<member name="P:Fake.NGenHelper.NGenParams.ToolPath">
<summary>
 (Required) Path to the NGenutil
</summary>
</member>
<member name="T:Fake.NGenHelper.NGenParams">
<summary>
 NGen parameters
</summary>
</member>
<member name="M:Fake.NGenHelper.Install(Microsoft.FSharp.Core.FSharpFunc{Fake.NGenHelper.NGenParams,Fake.NGenHelper.NGenParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs ngen.exe install on given assemblies.
</summary>
</member>
<member name="M:Fake.NGenHelper.NGen(Microsoft.FSharp.Core.FSharpFunc{Fake.NGenHelper.NGenParams,Fake.NGenHelper.NGenParams},System.String)">
<summary>
 Runs ngen.exe with the given command.
</summary>
</member>
<member name="P:Fake.NGenHelper.NGenDefaults">
<summary>
 NGen default parameters
</summary>
</member>
<member name="T:Fake.NGenHelper">
<summary>
 This module contains helper function for the ngen.exe
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuParams.OutputPath">
<summary>
 The output path of the generated docs. The default is &quot;./output/&quot;.
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuParams.TimeOut">
<summary>
 Allows to specify a timeout for docu. The default is 5 minutes.
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuParams.TemplatesPath">
<summary>
 The HTML templates for the generated docs.
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuParams.ToolPath">
<summary>
 The tool path - FAKE tries to find docu.exe automatically in any sub folder.
</summary>
</member>
<member name="T:Fake.DocuHelper.DocuParams">
<summary>
 The parameter type for docu.
</summary>
</member>
<member name="M:Fake.DocuHelper.Docu(Microsoft.FSharp.Core.FSharpFunc{Fake.DocuHelper.DocuParams,Fake.DocuHelper.DocuParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Generates a HTML documentation from XML docs via the docu.exe.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default docu parameters.
  - `assemblies` - Sequence of one or more assemblies containing the XML docs.
</summary>
</member>
<member name="P:Fake.DocuHelper.DocuDefaults">
<summary>
 The Docu default params
</summary>
</member>
<member name="T:Fake.DocuHelper">
<summary>
 Contains helper functions to run the XML documentation tool &quot;docu&quot;.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.XmlDocs">
<summary>
 True -&gt; XML documentation files are merged to produce an XML documentation file for the target assembly.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.UnionMerge">
<summary>
 True -&gt; types with the same name are all merged into a single type in the target assembly.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.TargetPlatform">
<summary>
 v1 or v1.1 or v2 or v4 or version,platform
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.SearchDirectories">
<summary>
 Directories to be used to search for input assemblies
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.DebugInfo">
<summary>
 True (default) -&gt; creates a .pdb file for the output assembly and merges into it any .pdb files found for input assemblies.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.Closed">
<summary>
 True -&gt; transitive closure of the input assemblies is computed and added to the list of input assemblies.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.AttributeFile">
<summary>
 Path to an assembly that will be used to get all of the assembly-level attributes
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.AllowWildcards">
<summary>
 Wild cards in file names are expanded and all matching files will be used as input.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.AllowMultipleAssemblyLevelAttributes">
<summary>
 Assembly-level attributes names that have the same type are copied over into the target directory
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.AllowDuplicateTypes">
<summary>
 Duplicate types policy
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.Libraries">
<summary>
 Assemblies to merge with the primary assembly
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.Version">
<summary>
 Version to use for the merged assembly
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeParams.ToolPath">
<summary>
 Path to ILMerge.exe
</summary>
</member>
<member name="T:Fake.ILMergeHelper.ILMergeParams">
<summary>
 Parameter type for ILMerge
</summary>
</member>
<member name="T:Fake.ILMergeHelper.TargetKind">
<summary>
 Option type to configure ILMerge&apos;s target output.
</summary>
</member>
<member name="T:Fake.ILMergeHelper.InternalizeTypes">
<summary>
 Option type to configure ILMerge&apos;s processing of internal types.
</summary>
</member>
<member name="T:Fake.ILMergeHelper.AllowDuplicateTypes.DuplicateTypes">
<summary>
 List of types to allow to be duplicated
</summary>
</member>
<member name="T:Fake.ILMergeHelper.AllowDuplicateTypes.AllPublicTypes">
<summary>
 All public types are allowed to be duplicated and renamed
</summary>
</member>
<member name="T:Fake.ILMergeHelper.AllowDuplicateTypes.NoDuplicateTypes">
<summary>
 No duplicates of public types allowed
</summary>
</member>
<member name="T:Fake.ILMergeHelper.AllowDuplicateTypes">
<summary>
 Option type to configure ILMerge&apos;s processing of duplicate types.
</summary>
</member>
<member name="M:Fake.ILMergeHelper.ILMerge(Microsoft.FSharp.Core.FSharpFunc{Fake.ILMergeHelper.ILMergeParams,Fake.ILMergeHelper.ILMergeParams},System.String,System.String)">
<summary>
 Uses ILMerge to merge .NET assemblies.
 ## Parameters

  - `setParams` - Function used to create an ILMergeParams value with your required settings. Called with an ILMergeParams value configured with the defaults.
  - `outputFile` - Output file path for the merged assembly.
  - `primaryAssembly` - The assembly you want ILMerge to consider as the primary.
</summary>
</member>
<member name="M:Fake.ILMergeHelper.getArguments(System.String,System.String,Fake.ILMergeHelper.ILMergeParams)">
<summary>
 Builds the arguments for the ILMerge task
 [omit]
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeDefaults">
<summary>
 ILMerge default parameters. Tries to automatically locate ilmerge.exe in a subfolder.
</summary>
</member>
<member name="T:Fake.ILMergeHelper">
<summary>
 Contains task a task which allows to merge .NET assemblies with [ILMerge](http://research.microsoft.com/en-us/people/mbarnett/ilmerge.aspx).
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.VariableName">
<summary>
 Substitute File/@Source=&quot;SourceDir&quot; with a preprocessor or a wix variable  (Parameter: -var)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.ComponentGroupName">
<summary>
 Component group name, cannot contain spaces. (Parameter: -cg)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.DirectoryReference">
<summary>
 Directory reference to root directories, cannot contains spaces. (Parameter: -dr)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.SupressUniqueIds">
<summary>
 Suppress unique identifiers for files, components, &amp; directories.(Parameter: -suid)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.SupressRegistry">
<summary>
 Suppress registry harvesting. (Parameter: -sreg)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.SupressRootDirectory">
<summary>
 Suppress harvesting the root directory as an element. (Parameter: -srd)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.SupressDirectoryFragments">
<summary>
 Suppress generation of fragments for directories and components. (Parameter: -sfrag)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.SupressComElements">
<summary>
 Suppress COM elements. (Parameter: -scom)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.GenerateGuidNow">
<summary>
 Generate guids now. All components are given a guid when heat is run. (Parameter: -gg)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.AutoGenerateGuid">
<summary>
 Auto generate component guids at compile time, e.g. set Guid=&quot;*&quot;. (Parameter: -ag)
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.TimeOut">
<summary>
 Timeout for the call to Heat
</summary>
</member>
<member name="P:Fake.WiXHelper.HeatParams.ToolDirectory">
<summary>
 Directory that contains the Heat tool
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.Platform">
<summary>
 Specify architecture of package. For 64Bit Setups set ProgramFilesFolder to ProgramFiles64, package platform to X64, all components to Win64 = yes and all files&apos; processorArchitecture to X64.
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.CustomReplacements">
<summary>
 You can add custom replacements for the wix xml here.
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.ActionSequences">
<summary>
 You can nest InstallExecuteSequence actions in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.CustomActions">
<summary>
 You can nest custom actions in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.Features">
<summary>
 You can nest feature elements in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.BuildNumber">
<summary>
 Build Number of product
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.Components">
<summary>
 Nest Components in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.DirectoryRefs">
<summary>
 You can nest DirectoryRefs in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.Directories">
<summary>
 Nest directories in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.WiXVariables">
<summary>
 Nest WiXVariables in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.UIRefs">
<summary>
 Nest UIRefs in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.MajorUpgrade">
<summary>
 Nest major upgrade elements in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.Upgrade">
<summary>
 You can nest upgrade elements in here
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.UpgradeGuid">
<summary>
 The upgrade code GUID for the product.
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.ProductPublisher">
<summary>
 The manufacturer of the product.
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.ProductVersion">
<summary>
 The product&apos;s version string.
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.ProductLanguage">
<summary>
 The decimal language ID (LCID) for the product.
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.Description">
<summary>
 Product description
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.ProgramFilesFolder">
<summary>
 The program files folder
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.ProductName">
<summary>
 The descriptive name of the product.
</summary>
</member>
<member name="P:Fake.WiXHelper.Script.ProductCode">
<summary>
 The product code GUID for the product.
</summary>
</member>
<member name="T:Fake.WiXHelper.Script">
<summary>
 Parameters for WiX Script properties, use ToString for creating the string xml nodes
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXVariable.Value">
<summary>
 The value of the variable. The value cannot be an empty string because that would make it possible to accidentally set a column to null. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXVariable.Overridable">
<summary>
 Set this value to &apos;yes&apos; in order to make the variable&apos;s value overridable either by another WixVariable entry or via the command-line option -d&lt;name&gt;=&lt;value&gt; for light.exe.
 If the same variable is declared overridable in multiple places it will cause an error (since WiX won&apos;t know which value is correct). The default value is &apos;no&apos;. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXVariable.Id">
<summary>
 The name of the variable.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXVariable">
<summary>
 Parameters for WiX Variable, use ToString for creating the string xml nodes
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXMajorUpgrade.DowngradeErrorMessage">
<summary>
 The message displayed if users try to install a product with a lower version number when a product with a higher version is installed. Used only when AllowDowngrades is no (the default). 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXMajorUpgrade.AllowDowngrades">
<summary>
 When set to no (the default), products with lower version numbers are blocked from installing when a product with a higher version is installed; the DowngradeErrorMessage 
 attribute must also be specified. When set to yes, any version can be installed over any other version. 	 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXMajorUpgrade.Schedule">
<summary>
 Determines the scheduling of the RemoveExistingProducts standard action, which is when the installed product is removed. The default is &quot;afterInstallValidate&quot; which removes the 
 installed product entirely before installing the upgrade product. It&apos;s slowest but gives the most flexibility in changing components and features in the upgrade product.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXMajorUpgrade">
<summary>
 Parameters for WiX Major Upgrade
</summary>
</member>
<member name="T:Fake.WiXHelper.MajorUpgradeSchedule.AfterInstallFinalize">
<summary>
 Schedules RemoveExistingProducts after the InstallFinalize standard action. This is similar to the afterInstallExecute and afterInstallExecuteAgain schedulings but takes place outside 
 the installation transaction so if installation of the upgrade product fails, Windows Installer does not roll back the removal of the installed product, 
 so the machine will have both versions installed. 
</summary>
</member>
<member name="T:Fake.WiXHelper.MajorUpgradeSchedule.AfterInstallExecuteAgain">
<summary>
 Schedules RemoveExistingProducts between the InstallExecuteAgain and InstallFinalize standard actions. 
 This is identical to the afterInstallExecute scheduling but after the InstallExecuteAgain standard action instead of InstallExecute. 
</summary>
</member>
<member name="T:Fake.WiXHelper.MajorUpgradeSchedule.AfterInstallExecute">
<summary>
 Schedules RemoveExistingProducts between the InstallExecute and InstallFinalize standard actions. This scheduling installs the upgrade product &quot;on top of&quot; the installed product then lets 
 RemoveExistingProducts uninstall any components that don&apos;t also exist in the upgrade product. Note that this scheduling requires strict adherence to the component rules because it relies 
 on component reference counts to be accurate during installation of the upgrade product and removal of the installed product. For more information, see Bob Arnson&apos;s blog post 
 &quot;Paying for Upgrades&quot; for details. If installation of the upgrade product fails, Windows Installer also rolls back the removal of the installed product -- in other words, reinstalls it. 
</summary>
</member>
<member name="T:Fake.WiXHelper.MajorUpgradeSchedule.AfterInstallInitialize">
<summary>
 Schedules RemoveExistingProducts after the InstallInitialize standard action. This is similar to the afterInstallValidate scheduling, but if the installation of the upgrade product fails, 
 Windows Installer also rolls back the removal of the installed product -- in other words, reinstalls it. 
</summary>
</member>
<member name="T:Fake.WiXHelper.MajorUpgradeSchedule.AfterInstallValidate">
<summary>
 (Default) Schedules RemoveExistingProducts after the InstallValidate standard action. This scheduling removes the installed product entirely before installing the upgrade product. 
 It&apos;s slowest but gives the most flexibility in changing components and features in the upgrade product. Note that if the installation of the upgrade product fails, 
 the machine will have neither version installed. 
</summary>
</member>
<member name="T:Fake.WiXHelper.MajorUpgradeSchedule">
<summary>
 Used for determing when to run RemoveExistingProducts on major upgrade
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgradeVersion.IncludeMaximum">
<summary>
 Set to &quot;yes&quot; to make the range of versions detected include the value specified in Maximum.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgradeVersion.IncludeMinimum">
<summary>
 Set to &quot;no&quot; to make the range of versions detected exclude the value specified in Minimum. This attribute is &quot;yes&quot; by default.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgradeVersion.Property">
<summary>
 When the FindRelatedProducts action detects a related product installed on the system, it appends the product code to the property specified in this field. 
 Windows Installer documentation for the Upgrade table states that the property specified in this field must be a public property and must be added to the 
 SecureCustomProperties property. WiX automatically appends the property specified in this field to the SecureCustomProperties property when creating an MSI. 
 Each UpgradeVersion must have a unique Property value. After the FindRelatedProducts action is run, the value of this property is a list of product codes,
 separated by semicolons (;), detected on the system.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgradeVersion.Maximum">
<summary>
 Specifies the upper boundary of the range of product versions detected by FindRelatedProducts.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgradeVersion.Minimum">
<summary>
 Specifies the lower bound on the range of product versions to be detected by FindRelatedProducts.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgradeVersion.OnlyDetect">
<summary>
 Set to &quot;yes&quot; to detect products and applications but do not uninstall.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXUpgradeVersion">
<summary>
 Parameters for WiX Upgrade Version
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgrade.UpgradeVersion">
<summary>
 You can nest WiXUpgradeVersion sequences in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgrade.Id">
<summary>
 This value specifies the upgrade code for the products that are to be detected by the FindRelatedProducts action.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXUpgrade">
<summary>
 Parameters for WiX Upgrade
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUIRef.Id">
<summary>
 Name of referenced UI
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXUIRef">
<summary>
 Parameters for WiX UI Reference, use ToString for creating the string xml nodes
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomActionExecution.Condition">
<summary>
 Conditions that have to be fulfilled for running execution
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomActionExecution.Target">
<summary>
 Name of the standard or custom action that the verb points to
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomActionExecution.Verb">
<summary>
 Specify if action should be executed before or after target action
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomActionExecution.ActionId">
<summary>
 The action to which the Custom element applies.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXCustomActionExecution">
<summary>
 Parameters for WiX Custom Action executions (In InstallExecuteSequence), use ToString for creating the string xml nodes
</summary>
</member>
<member name="T:Fake.WiXHelper.ActionExecutionVerb.Before">
<summary>
 Specifies that action should be executed before some standard or custom action
</summary>
</member>
<member name="T:Fake.WiXHelper.ActionExecutionVerb.After">
<summary>
 Specifies that action should be executed after some standard or custom action
</summary>
</member>
<member name="T:Fake.WiXHelper.ActionExecutionVerb">
<summary>
 Used for specifying the point of time for action execution in WiXCustomActionExecution
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomAction.Return">
<summary>
 Set this attribute to set the return behavior of the custom action. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomAction.ExeCommand">
<summary>
 This attribute specifies the command line parameters to supply to an externally run executable. 
 This attribute is typically used with the BinaryKey attribute for a type 2 custom action, the FileKey attribute for a type 18 
 custom action, the Property attribute for a type 50 custom action, or the Directory attribute for a type 34 custom action that 
 specify the executable to run. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomAction.Impersonate">
<summary>
 This attribute specifies whether the Windows Installer, which executes as LocalSystem, should impersonate the user context of 
 the installing user when executing this custom action. Typically the value should be &apos;yes&apos;, except when the custom action needs 
 elevated privileges to apply changes to the machine. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomAction.Execute">
<summary>
 This attribute indicates the scheduling of the custom action.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomAction.FileKey">
<summary>
 This attribute specifies a reference to a File element with matching Id attribute that will execute the custom action code 
 in the file after the file is installed. This attribute is typically used with the ExeCommand attribute to specify 
 a type 18 custom action that runs an installed executable, with the DllEntry attribute to specify an installed custom action 
 DLL to use for a type 17 custom action, or with the VBScriptCall or JScriptCall attributes to specify a type 21 or 22 custom action. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomAction.Id">
<summary>
	The identifier of the custom action. 
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXCustomAction">
<summary>
 Parameters for WiX custom action, use ToString for creating the string xml nodes
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionReturn.Ignore">
<summary>
 Indicates that the custom action will run synchronously and the return code will not be checked. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionReturn.Check">
<summary>
 Indicates that the custom action will run synchronously and the return code will be checked for success. This is the default. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionReturn.AsyncWait">
<summary>
 Indicates that the custom action will run asynchronously but the installer will wait for the return code at sequence end. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionReturn.AsyncNoWait">
<summary>
 Indicates that the custom action will run asyncronously and execution may continue after the installer terminates. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionReturn">
<summary>
 Used in WiXCustomAction for determing the return type
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionExecute.SecondSequence">
<summary>
 Indicates that a custom action should be run a second time if it was previously run in an earlier sequence. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionExecute.Rollback">
<summary>
 Indicates that a custom action will run in the rollback sequence when a failure occurs during installation, usually to undo changes made by a deferred custom action. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionExecute.OncePerProcess">
<summary>
 Indicates that the custom action will only run in the first sequence that runs it in the same process. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionExecute.Immediate">
<summary>
 Indicates that the custom action will run during normal processing time with user privileges. This is the default. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionExecute.FirstSequence">
<summary>
 Indicates that the custom action will only run in the first sequence that runs it. 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionExecute.Deferred">
<summary>
 Indicates that the custom action runs in-script (possibly with elevated privileges). 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionExecute.Commit">
<summary>
 Indicates that the custom action will run after successful completion of the installation script (at the end of the installation). 
</summary>
</member>
<member name="T:Fake.WiXHelper.CustomActionExecute">
<summary>
 Used in WiXCustomAction for determing when to run the custom action
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.Platform">
<summary>
 Specify architecture of package. For 64Bit Setups set ProgramFilesFolder to ProgramFiles64, package platform to X64, all components to Win64 = yes and all files&apos; processorArchitecture to X64.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.ActionSequences">
<summary>
 You can nest InstallExecuteSequence actions in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.CustomActions">
<summary>
 You can nest custom actions in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.Features">
<summary>
 You can nest feature elements in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.BuildNumber">
<summary>
 Build Number of product
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.Directories">
<summary>
 Nest directories in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.WiXVariables">
<summary>
 Nest WiXVariables in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.UIRefs">
<summary>
 Nest UIRefs in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.MajorUpgrade">
<summary>
 Nest major upgrade elements in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.Upgrade">
<summary>
 You can nest upgrade elements in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.UpgradeGuid">
<summary>
 The upgrade code GUID for the product.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.ProductPublisher">
<summary>
 The manufacturer of the product.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.ProductVersion">
<summary>
 The product&apos;s version string.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.ProductLanguage">
<summary>
 The decimal language ID (LCID) for the product.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.Description">
<summary>
 Product description
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.ProgramFilesFolder">
<summary>
 The program files folder
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.ProductName">
<summary>
 The descriptive name of the product.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScript.ProductCode">
<summary>
 The product code GUID for the product.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXScript">
<summary>
 Parameters for WiX Script properties, use ToString for creating the string xml nodes
</summary>
</member>
<member name="T:Fake.WiXHelper.ProgramFilesFolder">
<summary>
 Type for defining, which program directory should be used for installation. ProgramFiles32 refers to &apos;Program Files (x86)&apos;, ProgramFiles64 refers to &apos;Program Files&apos;
</summary>
</member>
<member name="P:Fake.WiXHelper.Feature.Components">
<summary>
 Components included in this feature
</summary>
</member>
<member name="P:Fake.WiXHelper.Feature.NestedFeatures">
<summary>
 Nest sub features
</summary>
</member>
<member name="P:Fake.WiXHelper.Feature.Display">
<summary>
Determines the initial display of this feature in the feature tree. This attribute&apos;s value should be one of the following:
collapse
    Initially shows the feature collapsed. This is the default value.
expand
    Initially shows the feature expanded.
hidden
    Prevents the feature from displaying in the user interface.
&lt;an explicit integer value&gt;
    For advanced users only, it is possible to directly set the integer value of the display value that will appear in the Feature row. 
</summary>
</member>
<member name="P:Fake.WiXHelper.Feature.Description">
<summary>
 Longer string of text describing the feature. This localizable string is displayed by the Text Control of the Selection Dialog. 
</summary>
</member>
<member name="P:Fake.WiXHelper.Feature.Level">
<summary>
 Sets the install level of this feature. A value of 0 will disable the feature. 
 Processing the Condition Table can modify the level value (this is set via the Condition child element).
 The default value is &quot;1&quot;. 
</summary>
</member>
<member name="P:Fake.WiXHelper.Feature.Title">
<summary>
 Short string of text identifying the feature. 
 This string is listed as an item by the SelectionTree control of the Selection Dialog. 
</summary>
</member>
<member name="P:Fake.WiXHelper.Feature.Id">
<summary>
 Unique identifier of the feature.
</summary>
</member>
<member name="T:Fake.WiXHelper.Feature">
<summary>
 Parameters for creating WiX Feature, use ToString for creating the string xml nodes
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFeature.InnerContent">
<summary>
 Nest sub features or components in here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFeature.Display">
<summary>
Determines the initial display of this feature in the feature tree. This attribute&apos;s value should be one of the following:
collapse
    Initially shows the feature collapsed. This is the default value.
expand
    Initially shows the feature expanded.
hidden
    Prevents the feature from displaying in the user interface.
&lt;an explicit integer value&gt;
    For advanced users only, it is possible to directly set the integer value of the display value that will appear in the Feature row. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFeature.Description">
<summary>
 Longer string of text describing the feature. This localizable string is displayed by the Text Control of the Selection Dialog. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFeature.Level">
<summary>
 Sets the install level of this feature. A value of 0 will disable the feature. 
 Processing the Condition Table can modify the level value (this is set via the Condition child element).
 The default value is &quot;1&quot;. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFeature.Title">
<summary>
 Short string of text identifying the feature. 
 This string is listed as an item by the SelectionTree control of the Selection Dialog. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFeature.Id">
<summary>
 Unique identifier of the feature.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXFeature">
<summary>
 Parameters for creating WiX Feature, use ToString for creating the string xml nodes
</summary>
</member>
<member name="T:Fake.WiXHelper.FeatureDisplay.Hidden">
<summary>
 Prevents the feature from displaying in the user interface.
</summary>
</member>
<member name="T:Fake.WiXHelper.FeatureDisplay.Expand">
<summary>
 Initially shows the feature expanded.
</summary>
</member>
<member name="T:Fake.WiXHelper.FeatureDisplay.Collapse">
<summary>
 Initially shows the feature collapsed. This is the default value.
</summary>
</member>
<member name="T:Fake.WiXHelper.FeatureDisplay">
<summary>
 Used for determing whether the feature should be visible in the select features installer pane or not
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXParams">
<summary>
 WiX parameter type
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXDirectoryRef">
<summary>
 Reference to a component for including it in a feature
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXDir">
<summary>
 WiX Directories define a logical directory which can include components and files
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXComponent">
<summary>
 Component which wraps files into logical components and which allows to 
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXComponentRef">
<summary>
 Reference to a component for including it in a feature
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryKey.Values">
<summary>
 You can nest child registry values here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryKey.Keys">
<summary>
 You can nest child registry keys here
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryKey.ForceDeleteOnUninstall">
<summary>
 Set this attribute to &apos;yes&apos; to remove the key with all its values and subkeys when the parent component is uninstalled
 Note that this value is useful only if your program creates additional values or subkeys under this key and you want an uninstall to remove them
 MSI already removes all values and subkeys that it creates, so this option just adds additional overhead to uninstall. The default is &quot;no&quot;
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryKey.ForceCreateOnInstall">
<summary>
 Set this attribute to &apos;yes&apos; to create an empty key, if absent, when the parent component is installed
 This value is needed only to create an empty key with no subkeys or values.
 Windows Installer creates keys as needed to store subkeys and values. The default is &quot;no&quot;
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryKey.Key">
<summary>
 The localizable key for the registry value
 If the parent element is a RegistryKey, this value may be omitted to use the path of the parent, or if its specified it will be appended to the path of the parent
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryKey.Root">
<summary>
 The predefined root key for the registry value
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryKey.Id">
<summary>
 Primary key used to identify this particular entry
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryKey">
<summary>
 Parameters for WiX RegistryKey
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryValue.Root">
<summary>
 The predefined root key for the registry value.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryValue.KeyPath">
<summary>
 Set this attribute to &apos;yes&apos; to make this registry key the KeyPath of the parent component
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryValue.Key">
<summary>
 The localizable key for the registry value
 If the parent element is a RegistryKey, this value may be omitted to use the path of the parent, or if its specified it will be appended to the path of the parent
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryValue.Type">
<summary>
 The type of the desired registry key
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryValue.Action">
<summary>
 The action that will be taken for this registry value
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryValue.Value">
<summary>
 The localizable registry value. 
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryValue.Name">
<summary>
 The localizable registry value name. If this attribute is not provided the default value for the registry key will be set instead
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXRegistryValue.Id">
<summary>
 The Id of this value
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValue">
<summary>
 Parameters for WiX RegistryValue
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueType.MultiString">
<summary>
 The value is interpreted and stored as a multiple strings (REG_MULTI_SZ)
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueType.Expandable">
<summary>
 The value is interpreted and stored as an expandable string (REG_EXPAND_SZ)
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueType.Binary">
<summary>
 The value is interpreted and stored as a hexadecimal value (REG_BINARY)
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueType.Integer">
<summary>
 The value is interpreted and stored as an integer (REG_DWORD)
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueType.String">
<summary>
 The value is interpreted and stored as a string (REG_SZ)
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueType">
<summary>
 The desired type of a registry key.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueAction.Write">
<summary>
 Writes a registry value
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueAction.Prepend">
<summary>
 Prepends the specified value(s) to a multiString registry value
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueAction.Append">
<summary>
 Appends the specified value(s) to a multiString registry value
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryValueAction">
<summary>
 The action that will be taken for a registry value
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryRootType.HKU">
<summary>
 Writes this registry key inside either the HKEY_USers registry root
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryRootType.HKLM">
<summary>
 Writes this registry key inside either the HKEY_LOCAL_MACHINE registry root
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryRootType.HKCU">
<summary>
 Writes this registry key inside either the HKEY_CURRENT_USER registry root
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryRootType.HKCR">
<summary>
 Writes this registry key inside either the HKEY_CLASSES_ROOT registry root
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryRootType.HKMU">
<summary>
 Writes this registry key inside either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER. Wix decides at install time based on wether or not this is an &quot;all users&quot; install
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXRegistryRootType">
<summary>
 Represents the registry root under which this key should be written
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.ServiceConfig">
<summary>
 Service configuration information for failure actions.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.ServiceDependencies">
<summary>
 Services or groups of services that must start before the parent service.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Vital">
<summary>
 The overall install should fail if this service fails to install. (Default: Yes)
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Type">
<summary>
 [Required] The Windows Installer does not currently support kernelDriver or systemDriver. (Default: OwnProcess)
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Start">
<summary>
 [Required] Determines when the service should be started. The Windows Installer does not support boot or system. (Default: Demand)
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Password">
<summary>
 The password for the account. Valid only when the account has a password.	
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Name">
<summary>
 [Required] This column is the string that gives the service name to install.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.LoadOrderGroup">
<summary>
 The load ordering group that this service should be a part of.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Interactive">
<summary>
 Whether or not the service interacts with the desktop.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Id">
<summary>
 Unique identifier for this service configuration. This value will default to the Name attribute if not specified.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.ErrorControl">
<summary>
 [Required] Determines what action should be taken on an error. (Default: Normal)
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.EraseDescription">
<summary>
 Determines whether the existing service description will be ignored. If &apos;yes&apos;, the service description will be null, even if the Description attribute is set.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.DisplayName">
<summary>
 This column is the localizable string that user interface programs use to identify the service.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Description">
<summary>
 Sets the description of the service.      
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Arguments">
<summary>
 Contains any command line arguments or properties required to run the service.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstall.Account">
<summary>
 Fully qualified names must be used even for local accounts, e.g.: &quot;.\LOCAL_ACCOUNT&quot;. Valid only when ServiceType is ownProcess.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXServiceInstall">
<summary>
 Adds services for parent Component. Use the ServiceControl element to remove services.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceDependency.Group">
<summary>
 Set to &apos;yes&apos; to indicate that the value in the Id attribute is the name of a group of services.	
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceDependency.Id">
<summary>
 [Required] The value of this attribute should be one of the following:
 1. The name (not the display name) of a previously installed service.
 2. The name of a service group (in which case the Group attribute must be set to &apos;yes&apos;).
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXServiceDependency">
<summary>
 Service or group of services that must start before the parent service.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceConfig.ThirdFailureActionType">
<summary>
 [Required] Action to take on the third failure of the service.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceConfig.ServiceName">
<summary>
 Required if not under a ServiceInstall element.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceConfig.SecondFailureActionType">
<summary>
 [Required] Action to take on the second failure of the service.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceConfig.RestartServiceDelayInSeconds">
<summary>
 If any of the three *ActionType attributes is &quot;restart&quot;, this specifies the number of seconds to wait before doing so.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceConfig.ResetPeriodInDays">
<summary>
 Number of days after which to reset the failure count to zero if there are no failures.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceConfig.RebootMessage">
<summary>
 If any of the three *ActionType attributes is &quot;reboot&quot;, this specifies the message to broadcast to server users before doing so.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceConfig.ProgramCommandLine">
<summary>
 If any of the three *ActionType attributes is &quot;runCommand&quot;, this specifies the command to run when doing so. This value is formatted.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceConfig.FirstFailureActionType">
<summary>
 [Required] Determines the type of the service failure action.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXServiceConfig">
<summary>
 Service configuration information for failure actions.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceFailureActionType">
<summary>
 Determines the type of the service failure action.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallType.SystemDriver">
<summary>
 A file system driver service. This value is not currently supported by the Windows Installer.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallType.KernelDriver">
<summary>
 A kernel driver service. This value is not currently supported by the Windows Installer.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallType.ShareProcess">
<summary>
 A Win32 service that shares a process.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallType.OwnProcess">
<summary>
 A Win32 service that runs its own process.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallType">
<summary>
 Determines the type of the service. The Windows Installer does not currently support kernelDriver or systemDriver.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallStart.System">
<summary>
 The service is a device driver that will be started by the IoInitSystem function. This value is not currently supported by the Windows Installer.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallStart.Boot">
<summary>
 The service is a device driver that will be started by the operating system boot loader. This value is not currently supported by the Windows Installer.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallStart.Disabled">
<summary>
 The service can no longer be started.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallStart.Demand">
<summary>
 The service will start when the service control manager calls the StartService function.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallStart.Auto">
<summary>
 The service will start during startup of the system.
</summary>
</member>
<member name="T:Fake.WiXHelper.ServiceInstallStart">
<summary>
 Determines when the service should be started. The Windows Installer does not support boot or system. 
</summary>
</member>
<member name="T:Fake.WiXHelper.ErrorControl.Critical">
<summary>
 Logs the error if it is possible and the system is restarted with the last configuration known to be good. If the last-known-good configuration is being started, the startup operation fails.
</summary>
</member>
<member name="T:Fake.WiXHelper.ErrorControl.Normal">
<summary>
 Logs the error, displays a message box and continues the startup operation.
</summary>
</member>
<member name="T:Fake.WiXHelper.ErrorControl.Ignore">
<summary>
 Logs the error and continues with the startup operation.
</summary>
</member>
<member name="T:Fake.WiXHelper.ErrorControl">
<summary>
 Determines what action should be taken on an error.
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXServiceControl">
<summary>
 Service Control Element. Can Start, Stop and Remove services
</summary>
</member>
<member name="T:Fake.WiXHelper.YesOrNo">
<summary>
 These are used in many methods for generating WiX nodes, regard them as booleans
</summary>
</member>
<member name="T:Fake.WiXHelper.InstallUninstall">
<summary>
 Specifies whether an action occur on install, uninstall or both.
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFile.ProcessorArchitecture">
<summary>
 File Architecture, either X64 or X86, defaults to X64
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFile.Source">
<summary>
 File Path in WiX definition
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFile.Name">
<summary>
 File Name in WiX definition
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFile.Id">
<summary>
 File Id in WiX definition
</summary>
</member>
<member name="T:Fake.WiXHelper.WiXFile">
<summary>
 WiX File Element
</summary>
</member>
<member name="M:Fake.WiXHelper.HarvestDirectory(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.HeatParams,Fake.WiXHelper.HeatParams},System.String,System.String)">
<summary>
 Harvests the contents of a Directory for use with Wix using the [Heat](http://wixtoolset.org/documentation/manual/v3/overview/heat.html) tool.
 ## Parameters
  - `setParams` - Function used to manipulate the Heat default parameters.
  - `directory` - The path to the directory that will be harvested by Heat.
  - `outputFile` - The output file path given to Heat.

</summary>
</member>
<member name="P:Fake.WiXHelper.HeatDefaulParams">
<summary>
 Default values for the Heat harvesting
</summary>
</member>
<member name="M:Fake.WiXHelper.WiX(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXParams,Fake.WiXHelper.WiXParams},System.String,System.String)">
<summary>
 Uses the WiX tools [Candle](http://wixtoolset.org/documentation/manual/v3/overview/candle.html) and [Light](http://wixtoolset.org/documentation/manual/v3/overview/light.html) to create an msi.
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.
  - `outputFile` - The msi output file path (given to Light).
  - `wixScript` - The path to a WiX script that will be used with Candle.

 ## Sample
     Target &quot;BuildSetup&quot; (fun _ -&gt;
         // Copy all important files to the deploy directory
         !! (buildDir + &quot;/**/*.dll&quot;)
           ++ (buildDir + &quot;/**/*.exe&quot;)
           ++ (buildDir + &quot;/**/*.config&quot;)
           |&gt; Copy deployPrepDir 
    
         // replace tags in a template file in order to generate a WiX script
         let ALLFILES = fun _ -&gt; true
     
         let replacements = [
             &quot;@build.number@&quot;,if not isLocalBuild then buildVersion else &quot;0.1.0.0&quot;
             &quot;@product.productcode@&quot;,System.Guid.NewGuid().ToString()
             &quot;@HelpFiles@&quot;,getFilesAsWiXString helpFiles
             &quot;@ScriptFiles@&quot;,getFilesAsWiXString scriptFiles
             &quot;@icons@&quot;,wixDir ALLFILES true (directoryInfo(bundledDir @@ &quot;icons&quot;))]
         
         processTemplates replacements setupFiles
     
         // run the WiX tools
         WiX (fun p -&gt; {p with ToolDirectory = WiXPath}) 
             setupFileName
             (setupBuildDir + &quot;Setup.wxs.template&quot;)
     )
</summary>
</member>
<member name="M:Fake.WiXHelper.Light(Fake.WiXHelper.WiXParams,System.String,System.String)">
<summary>
 Runs the [Light tool](http://wixtoolset.org/documentation/manual/v3/overview/light.html) on the given WiX script with the given parameters
</summary>
</member>
<member name="M:Fake.WiXHelper.Candle(Fake.WiXHelper.WiXParams,System.String)">
<summary>
 Runs the [Candle tool](http://wixtoolset.org/documentation/manual/v3/overview/candle.html) on the given WiX script with the given parameters
</summary>
</member>
<member name="M:Fake.WiXHelper.generateMajorUpgradeVersion(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXMajorUpgrade,Fake.WiXHelper.WiXMajorUpgrade})">
<summary>
 Generates a major upgrade based on the given parameters, use toString on it when embedding it
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     let majorUpgradeVersion = generateMajorUpgradeVersion(fun f -&gt;
                                                     {f with 
                                                         DowngradeErrorMessage = &quot;A later version is already installed, exiting.&quot;
                                                     })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateUpgradeVersion(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXUpgradeVersion,Fake.WiXHelper.WiXUpgradeVersion})">
<summary>
 Generates an upgrade version based on the given parameters, use toString on it when embedding it
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     let upgradeVersion = generateUpgradeVersion (fun f -&gt;
                                                     {f with
                                                        Minimum = productVersion
                                                        OnlyDetect = &quot;yes&quot;
                                                     })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateUpgrade(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXUpgrade,Fake.WiXHelper.WiXUpgrade})">
<summary>
 Generates an upgrade based on the given parameters, use toString on it when embedding it
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     let upgrade = generateUpgrade (fun f -&gt;
                                       {f with
                                          Id = productUpgradeCode
                                       })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateUIRef(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXUIRef,Fake.WiXHelper.WiXUIRef})">
<summary>
 Generates a ui ref based on the given parameters, use toString on it when embedding it
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     let UIRef = generateUIRef (fun f -&gt;
                                    {f with
                                        Id = &quot;WixUI_Mondo&quot;
                                    })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateCustomActionExecution(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXCustomActionExecution,Fake.WiXHelper.WiXCustomActionExecution})">
<summary>
 Generates a custom action execution based on the given parameters, use toString on it when embedding it
 Condition in sample makes execute only on install
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     let actionExecution = generateCustomActionExecution (fun f -&gt;
                                                                {f with 
                                                                    ActionId = action.Id
                                                                    Verb = &quot;After&quot;
                                                                    Target = &quot;InstallFiles&quot;                                                                        
                                                                    Condition = &quot;&lt;![CDATA[(&amp;&quot; + feature.Id + &quot; = 3) AND NOT (!&quot; + feature.Id + &quot; = 3)]]&gt;&quot;
                                                                })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateCustomAction(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXCustomAction,Fake.WiXHelper.WiXCustomAction})">
<summary>
 Generates a customAction based on the given parameters, use toString on it when embedding it
 Be careful to make Id unique. FileKey is a reference to a file Id which you added by using wixDir or wixFile
 Set impersonate to no if your action needs elevated privileges, you should then also set execute as &quot;deferred&quot;
 ExeCommand are the parameters passed to your executable
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     let action = generateCustomAction (fun f -&gt;
                                            {f with
                                                Id = &quot;UniqueActionId&quot;
                                                FileKey = &quot;fi_5&quot;
                                                Execute = &quot;deferred&quot;
                                                Impersonate = &quot;no&quot;
                                                ExeCommand = &quot;install&quot;
                                                Return = &quot;check&quot;
                                            })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateFeatureElement(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.Feature,Fake.WiXHelper.Feature})">
<summary>
 Generates a feature based on the given parameters, use toString on it when embedding it
 You can pass other features into InnerContent for making a hierarchy
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     let feature = generateFeature (fun f -&gt; 
                                        {f with  
                                            Id = &quot;UniqueName&quot;
                                            Title = &quot;Title which is shown&quot;
                                            Level = 1 
                                            Description = &quot;Somewhat longer description&quot; 
                                            Display = &quot;expand&quot; 
                                            InnerContent = [otherFeature1; otherFeature2]
                                        })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateFeature(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXFeature,Fake.WiXHelper.WiXFeature})">
<summary>
 Generates a feature based on the given parameters, use toString on it when embedding it
 You can pass other features into InnerContent for making a hierarchy
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     let feature = generateFeature (fun f -&gt; 
                                        {f with  
                                            Id = &quot;UniqueName&quot;
                                            Title = &quot;Title which is shown&quot;
                                            Level = 1 
                                            Description = &quot;Somewhat longer description&quot; 
                                            Display = &quot;expand&quot; 
                                            InnerContent = otherFeature.ToString()
                                        })
</summary>
</member>
<member name="M:Fake.WiXHelper.FillInWiXTemplate(System.String,Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.Script,Fake.WiXHelper.Script})">
<summary>
 Takes path where script files reside and sets all parameters as defined
 ## Parameters
  - `wiXPath` - Pass path where your script is located at. Function will search for all Scripts in that location and fill in parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     FillInWixScript &quot;&quot; (fun f -&gt;
                            {f with
                                ProductCode = WiXProductCode
                                ProductName = WiXProductName
                                Description = projectDescription
                                ProductLanguage = WiXProductLanguage
                                ProductVersion = WiXProductVersion
                                ProductPublisher = WixProductPublisher
                                UpgradeGuid = WixProductUpgradeGuid
                                UIRefs = uiRef1.ToString() + uiRef2.ToString()
                                WiXVariables = wiXLicense.ToString()
                                Directories = directories
                                DirectoryRefs = directoryrefs
                                BuildNumber = &quot;1.0.0&quot;
                                Features = rootFeature.ToString()
                                CustomActions = action1.ToString() + action2.ToString()
                                ActionSequences = actionExecution1.ToString() + actionExecution2.ToString()
                            })
</summary>
</member>
<member name="M:Fake.WiXHelper.FillInWixScript(System.String,Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXScript,Fake.WiXHelper.WiXScript})">
<summary>
 Takes path where script files reside and sets all parameters as defined
 ## Parameters
  - `wiXPath` - Pass path where your script is located at. Function will search for all Scripts in that location and fill in parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
     FillInWixScript &quot;&quot; (fun f -&gt;
                            {f with
                                ProductCode = WiXProductCode
                                ProductName = WiXProductName
                                Description = projectDescription
                                ProductLanguage = WiXProductLanguage
                                ProductVersion = WiXProductVersion
                                ProductPublisher = WixProductPublisher
                                UpgradeGuid = WixProductUpgradeGuid
                                UIRefs = uiRef1.ToString() + uiRef2.ToString()
                                WiXVariables = wiXLicense.ToString()
                                Directories = directories
                                BuildNumber = &quot;1.0.0&quot;
                                Features = rootFeature.ToString()
                                CustomActions = action1.ToString() + action2.ToString()
                                ActionSequences = actionExecution1.ToString() + actionExecution2.ToString()
                            })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateWiXScript(System.String)">
<summary>
 Generates WiX Template with specified file name (you can prepend location too)
 You need to run this once every build an then use FillInWiXScript to replace placeholders
 ## Parameters
  - `fileName` - Pass desired fileName for your wiXScript file

 ## Sample
     generateWiXScript &quot;Setup.wxs&quot;
</summary>
</member>
<member name="P:Fake.WiXHelper.ScriptDefaults">
<summary>
 Default values for WiX Script properties
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXVariableDefaults">
<summary>
 Default value for WiX Variable
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXMajorUpgradeDefaults">
<summary>
 Default value for WiX Major Upgrade
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgradeVersionDefaults">
<summary>
 Default value for WiX Upgrade
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUpgradeDefaults">
<summary>
 Default value for WiX Upgrade
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXUIRefDefaults">
<summary>
 Default value for WiX UI Reference (WixUI_Minimal)
</summary>
</member>
<member name="P:Fake.WiXHelper.WixCustomActionExecutionDefaults">
<summary>
 Default values for WiX custom action executions
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXCustomActionDefaults">
<summary>
 Default values for WiX custom actions
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXScriptDefaults">
<summary>
 Default values for WiX Script properties
</summary>
</member>
<member name="P:Fake.WiXHelper.FeatureDefaults">
<summary>
 Default values for creating WiX Feature
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFeatureDefaults">
<summary>
 Default values for creating WiX Feature
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXDefaults">
<summary>
 Contains the WiX default parameters  
</summary>
</member>
<member name="M:Fake.WiXHelper.setComponentsNeverOverwrite(System.String)">
<summary>
 Take a component string and set &quot;neverOverwrite&quot; Tag
 This is useful for config files, since they are not replaced on upgrade like that
</summary>
</member>
<member name="M:Fake.WiXHelper.wixComponentRefs(System.IO.DirectoryInfo)">
<summary>
 Creates WiX ComponentRef tags from the given DirectoryInfo
</summary>
</member>
<member name="M:Fake.WiXHelper.getComponentIdsFromWiXString(System.String)">
<summary>
 Retrieves all component ids from given WiX directory string
 ## Parameters
  - `wiXString` - The directory string which was generated by wixDir

 ## Sample
     let directoryString = wixDir (fun file -&gt; true) true (DirectoryInfo directoryWithFilesForSetup)
     let componentIds = getComponentIdsFromWiXString directoryString
</summary>
</member>
<member name="M:Fake.WiXHelper.getFileIdFromWiXString(System.String,System.String)">
<summary>
 Retrieves the file id of the first file in WiXString, which name matches fileRegex
 ## Parameters
  - `wiXString` - The directory string which was generated by wixDir
  - `fileRegex` - Regex which matches the file name

 ## Sample
     let directoryString = wixDir (fun file -&gt; true) true (DirectoryInfo directoryWithFilesForSetup)
     let executableFileId = getFileIdFromWiXString directoryString &quot;\S*.exe&quot;
</summary>
</member>
<member name="M:Fake.WiXHelper.wixDir(Microsoft.FSharp.Core.FSharpFunc{System.IO.FileInfo,System.Boolean},System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Creates recursive WiX directory and file tags from the given DirectoryInfo
 The function will create one component for each file [best practice](https://support.microsoft.com/de-de/kb/290997/en-us)
 and set the GUID to &quot;*&quot;, which will make WiX produce consistent Component Guids if the Component&apos;s target path doesn&apos;t change.
 This is vital for major upgrades, since windows installer needs a consistent component guid for tracking each of them.
 You can use the getComponentIdsFromWiXString function for getting all created component refs and adding them to features.
</summary>
</member>
<member name="M:Fake.WiXHelper.attachServiceInstallToComponent(Fake.WiXHelper.WiXDirectoryComponent,Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXComponent,System.Boolean},System.Collections.Generic.IEnumerable{Fake.WiXHelper.WiXServiceInstall})">
<summary>
 Use this to attach service installs to your components.          
</summary>
</member>
<member name="M:Fake.WiXHelper.bulkComponentCreationAsSubDir(Microsoft.FSharp.Core.FSharpFunc{System.IO.FileInfo,System.Boolean},System.IO.DirectoryInfo,Fake.WiXHelper.Architecture)">
<summary>
 Creates WiX component with directories and files from the given DirectoryInfo
 The function will create one component for each file [best practice](https://support.microsoft.com/de-de/kb/290997/en-us)
 and set the GUID to &quot;*&quot;, which will make WiX produce consistent Component Guids if the Component&apos;s target path doesn&apos;t change.
 This is vital for major upgrades, since windows installer needs a consistent component guid for tracking each of them.
 The components are embedded into the passed in root directory.
</summary>
</member>
<member name="M:Fake.WiXHelper.bulkComponentCreation(Microsoft.FSharp.Core.FSharpFunc{System.IO.FileInfo,System.Boolean},System.IO.DirectoryInfo,Fake.WiXHelper.Architecture)">
<summary>
 Creates WiX component with directories and files from the given DirectoryInfo
 The function will create one component for each file [best practice](https://support.microsoft.com/de-de/kb/290997/en-us)
 and set the GUID to &quot;*&quot;, which will make WiX produce consistent Component Guids if the Component&apos;s target path doesn&apos;t change.
 This is vital for major upgrades, since windows installer needs a consistent component guid for tracking each of them.
 You can use the getComponentIdsFromWiXString function for getting all created component refs and adding them to features.
</summary>
</member>
<member name="M:Fake.WiXHelper.bulkComponentTreeCreation(Microsoft.FSharp.Core.FSharpFunc{System.IO.FileInfo,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{System.IO.DirectoryInfo,System.Boolean},System.IO.DirectoryInfo,Fake.WiXHelper.Architecture)">
<summary>
 Creates a WiX directory and component hierarchy from the given DirectoryInfo
 The function will create one component for each file [best practice](https://support.microsoft.com/de-de/kb/290997/en-us)
 and set the GUID to &quot;*&quot;, which will make WiX produce consistent Component Guids if the Component&apos;s target path doesn&apos;t change.
 This is vital for major upgrades, since windows installer needs a consistent component guid for tracking each of them.
 You can use the getComponentRefs function for getting all created component refs and adding them to features.
 You can use attachServiceControlToComponents or attachServiceInstallToComponents to attach ServiceControl or ServiceInstall to the directory component hierarchy
</summary>
</member>
<member name="M:Fake.WiXHelper.calcSHA1(System.String)">
<summary>
 Calculates the SHA1 for a given string.
</summary>
</member>
<member name="M:Fake.WiXHelper.generateDirectory(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXDir,Fake.WiXHelper.WiXDir})">
<summary>
 Use this for generating directories
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXDirDefaults">
<summary>
 Defaults for directories
</summary>
</member>
<member name="M:Fake.WiXHelper.generateComponent(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXComponent,Fake.WiXHelper.WiXComponent})">
<summary>
 Use this for generating single components
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXComponentDefaults">
<summary>
 Defaults for component
</summary>
</member>
<member name="M:Fake.WiXHelper.getComponentRefs(System.Collections.Generic.IEnumerable{Fake.WiXHelper.WiXDirectoryComponent})">
<summary>
get component refs from a directory component hierarchy
</summary>
</member>
<member name="M:Fake.WiXHelper.generateDirectoryRef(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXDirectoryRef,Fake.WiXHelper.WiXDirectoryRef})">
<summary>
 Use this for generating component refs
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXDirectoryRefDefaults">
<summary>
 Defaults for component ref
</summary>
</member>
<member name="M:Fake.WiXHelper.generateComponentRef(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXComponentRef,Fake.WiXHelper.WiXComponentRef})">
<summary>
 Use this for generating component refs
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXComponentRefDefaults">
<summary>
 Defaults for component ref
</summary>
</member>
<member name="M:Fake.WiXHelper.generateRegistryKey(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXRegistryKey,Fake.WiXHelper.WiXRegistryKey})">
<summary>
 Generates a registry key based on the given parameters, use toString on it when embedding it
 You can pass other registry keys and values into RegistryKeys or RegistryValues for making a hierarchy
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
 let key = generateRegistryKey(fun k -&gt;
                                 {k with
                                   Id = &quot;KeyId&quot;
                                   Key = &quot;SomeKey&quot;
                                   Root = Some WiXRegistryRootType.HKCR
                                   ForceCreateOnInstall = YesOrNo.Yes
                                   ForceDeleteOnUninstall = YesOrNo.No
                                   Keys = someChildKeys
                                   Values = someChildValues
                                 })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateRegistryValue(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXRegistryValue,Fake.WiXHelper.WiXRegistryValue})">
<summary>
 Generates a registry value based on the given parameters, use toString on it when embedding it
 ## Parameters
  - `setParams` - Function used to manipulate the WiX default parameters.

 ## Sample
 let registryValue = generateRegistryValue(fun v -&gt; 
                                               {v with
                                                   Id = &quot;asdasd&quot;
                                                   Name = &quot;Something&quot;
                                                   Key = &quot;Somewhere&quot;
                                                   Root = Some WiXRegistryRootType.HKU
                                                   Type = WiXRegistryValueType.Integer
                                                   KeyPath = YesOrNo.No
                                                   Value = &quot;2&quot;
                                               })
</summary>
</member>
<member name="M:Fake.WiXHelper.generateServiceInstall(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXServiceInstall,Fake.WiXHelper.WiXServiceInstall})">
<summary>
 Use this for generating service installs
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceInstallDefaults">
<summary>
 Defaults for service install element
</summary>
</member>
<member name="M:Fake.WiXHelper.generateServiceDependency(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXServiceDependency,Fake.WiXHelper.WiXServiceDependency})">
<summary>
 Use this for generating service dependencies
</summary>
</member>
<member name="M:Fake.WiXHelper.generateServiceConfig(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXServiceConfig,Fake.WiXHelper.WiXServiceConfig})">
<summary>
 Use this for generating service configs
</summary>
</member>
<member name="M:Fake.WiXHelper.generateServiceControl(Microsoft.FSharp.Core.FSharpFunc{Fake.WiXHelper.WiXServiceControl,Fake.WiXHelper.WiXServiceControl})">
<summary>
 Use this for generating service controls
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXServiceControlDefaults">
<summary>
 Defaults for service control element
</summary>
</member>
<member name="P:Fake.WiXHelper.WiXFileDefaults">
<summary>
 Defaults for WiX file
</summary>
</member>
<member name="M:Fake.WiXHelper.getFilesAsWiXString(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates WiX File tags from the given files
</summary>
</member>
<member name="M:Fake.WiXHelper.wixFile(System.IO.FileInfo)">
<summary>
 Creates a WiX File tag from the given FileInfo
</summary>
</member>
<member name="T:Fake.WiXHelper">
<summary>
 Contains tasks to create msi installers using the [WiX toolset](http://wixtoolset.org/)
</summary>
</member>
<member name="T:Fake.MSIHelper.MSIParams">
<summary>
 MSI parameter type
</summary>
</member>
<member name="M:Fake.MSIHelper.Uninstall(Microsoft.FSharp.Core.FSharpFunc{Fake.MSIHelper.MSIParams,Fake.MSIHelper.MSIParams},System.String)">
<summary>
 Uninstalls a msi.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default MSI parameters.
  - `setup` - The setup file name.
</summary>
</member>
<member name="M:Fake.MSIHelper.Install(Microsoft.FSharp.Core.FSharpFunc{Fake.MSIHelper.MSIParams,Fake.MSIHelper.MSIParams},System.String)">
<summary>
 Installs a msi.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default MSI parameters.
  - `setup` - The setup file name.
</summary>
</member>
<member name="P:Fake.MSIHelper.MSIDefaults">
<summary>
 MSI default parameters  
</summary>
</member>
<member name="T:Fake.MSIHelper">
<summary>
 Contains tasks which allow to run msiexec in order to install or uninstall msi files.
</summary>
</member>
<member name="T:Fake.RegAsmHelper.RegAsmParams">
<summary>
 RegAsm parameter type
</summary>
</member>
<member name="M:Fake.RegAsmHelper.UnregisterAssemblies(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Executes `Regasm.exe` with the `/codebase /tlb /unregister` options

 Used to unregegister any temporarily registerd .net dependencies
 _after_ running a VB6 build
</summary>
</member>
<member name="M:Fake.RegAsmHelper.RegisterAssembliesWithCodebase(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Executes `RegAsm.exe` with the `/codebase` `/tlb` option

 Used to temporarily register any .net dependencies before running 
 a VB6 build
</summary>
</member>
<member name="M:Fake.RegAsmHelper.RegAsm(Microsoft.FSharp.Core.FSharpFunc{Fake.RegAsmHelper.RegAsmParams,Fake.RegAsmHelper.RegAsmParams},System.String)">
<summary>
 Runs regasm on the given lib
 ## Parameters
 
  - `setParams` - Function used to manipulate the default RegAsm parameters.
  - `lib` - The assembly file name.
</summary>
</member>
<member name="P:Fake.RegAsmHelper.RegAsmDefaults">
<summary>
 RegAsm default params
</summary>
</member>
<member name="P:Fake.RegAsmHelper.regAsmToolPath">
<summary>
 Path to newest `regasm.exe`
</summary>
</member>
<member name="T:Fake.RegAsmHelper">
<summary>
 Contains a task which can be used to run regasm .NET assembly
</summary>
</member>
<member name="P:Fake.RestorePackageHelper.RestoreSinglePackageParams.Retries">
<summary>
 Specifies how often nuget should try to restore the packages - default is 5
</summary>
</member>
<member name="T:Fake.RestorePackageHelper.RestoreSinglePackageParams">
<summary>
 RestorePackages parameter path for single packages
</summary>
</member>
<member name="P:Fake.RestorePackageHelper.RestorePackageParams.Retries">
<summary>
 Specifies how often nuget should try to restore the packages - default is 5
</summary>
</member>
<member name="T:Fake.RestorePackageHelper.RestorePackageParams">
<summary>
 RestorePackages parameter path
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.RestoreMSSolutionPackages(Microsoft.FSharp.Core.FSharpFunc{Fake.RestorePackageHelper.RestorePackageParams,Fake.RestorePackageHelper.RestorePackageParams},System.String)">
<summary>
 Restores the packages in the given solution file file from NuGet.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
  - `solutionFile` - The microsoft sln file name.

 ## Sample

     Target &quot;RestorePackages&quot; (fun _ -&gt; 
          &quot;./src/Everything.sln&quot;
          |&gt; RestoreMSSolutionPackages (fun p -&gt;
              { p with
                  Sources = &quot;http://myNugetSources.com&quot; :: p.Sources
                  OutputPath = outputDir
                  Retries = 4 })
      )
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.RestorePackages">
<summary>
 Restores all packages from NuGet to the default directories by scanning for packages.config files in any subdirectory.
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.RestorePackage(Microsoft.FSharp.Core.FSharpFunc{Fake.RestorePackageHelper.RestorePackageParams,Fake.RestorePackageHelper.RestorePackageParams},System.String)">
<summary>
 Restores the packages in the given packages.config file from NuGet.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
  - `packageFile` - The packages.config file name.

 ## Sample

     Target &quot;RestorePackages&quot; (fun _ -&gt; 
          &quot;./src/ProjectA/packages.config&quot;
          |&gt; RestorePackage (fun p -&gt;
              { p with
                  Sources = &quot;http://myNugetSources.com&quot; :: p.Sources
                  OutputPath = outputDir
                  Retries = 4 })
      )
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.RestorePackageId(Microsoft.FSharp.Core.FSharpFunc{Fake.RestorePackageHelper.RestoreSinglePackageParams,Fake.RestorePackageHelper.RestoreSinglePackageParams},System.String)">
<summary>
 Restores the given package from NuGet
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.buildNuGetArgs(Microsoft.FSharp.Core.FSharpFunc{Fake.RestorePackageHelper.RestoreSinglePackageParams,Fake.RestorePackageHelper.RestoreSinglePackageParams},System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.buildSources(Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.runNuGetTrial(System.Int32,System.String,System.TimeSpan,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.runNuGet(System.String,System.TimeSpan,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.RestorePackageHelper.RestoreSinglePackageDefaults">
<summary>
 RestoreSinglePackageParams defaults parameters  
</summary>
</member>
<member name="P:Fake.RestorePackageHelper.RestorePackageDefaults">
<summary>
 RestorePackage defaults parameters
</summary>
</member>
<member name="M:Fake.RestorePackageHelper.findNuget(System.String)">
<summary>
 Looks for NuGet.exe in [1] the specified defaultPath, [2] a list of standard tool folders, [3] any subfolder in the current directory, [4] the PATH - returns the first path where NuGet.exe was found.
</summary>
</member>
<member name="T:Fake.RestorePackageHelper">
<summary>
 Contains tasks which allow to restore NuGet packages from a NuGet package feed like [nuget.org](http://www.nuget.org).
 There is also a tutorial about [nuget package restore](../nuget.html) available.
</summary>
</member>
<member name="M:Fake.VSSHelper.getVSSProject(System.String,System.String,System.String,System.String,System.String,System.String)">
<summary>
 Retrieves the given project from Microsoft Visual SourceSafe    
</summary>
</member>
<member name="M:Fake.VSSHelper.getVSSProjectWithLabel(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
<summary>
 Retrieves the given label of the given project from Microsoft Visual SourceSafe
</summary>
</member>
<member name="T:Fake.VSSHelper">
<summary>
 Contains helper functions for [Microsoft Visual SourceSafe](http://en.wikipedia.org/wiki/Microsoft_Visual_SourceSafe)
</summary>
</member>
<member name="T:Fake.DynamicsNav.RTCParams">
<summary>
 The parameter type allows to interact with Dynamics NAV RTC.
</summary>
</member>
<member name="T:Fake.DynamicsNav.DynamicsNavParams">
<summary>
 A parameter type to interact with Dynamics NAV
</summary>
</member>
<member name="T:Fake.DynamicsNav.NavisionServerType">
<summary>
 A Dynamics NAV server type
</summary>
</member>
<member name="M:Fake.DynamicsNav.analyzeXmlTestResults(System.String,System.String)">
<summary>
 Analyzes the XML-based Dynamics NAV test results from XMLPort 130021
</summary>
</member>
<member name="M:Fake.DynamicsNav.analyzeTestResults(System.String)">
<summary>
 Analyzes the Dynamics NAV test results
</summary>
</member>
<member name="M:Fake.DynamicsNav.ensureAllNAVProcessesHaveStopped(System.TimeSpan)">
<summary>
 Waits until all NAV processes have stopped or fails after given timeout.
 ## Parameters
  - `name` - The name of the processes in question.
  - `timeout` - The timespan to time out after.
</summary>
</member>
<member name="M:Fake.DynamicsNav.CloseAllNavProcesses(System.Boolean)">
<summary>
 Closes all running Dynamics NAV instances
</summary>
</member>
<member name="M:Fake.DynamicsNav.getNAVProcesses">
<summary>
 Returns all running NAV processes.
</summary>
</member>
<member name="M:Fake.DynamicsNav.OpenPage(Fake.DynamicsNav.RTCParams,System.Int32)">
<summary>
 Opens a page with the given ID on the RTC client
</summary>
</member>
<member name="M:Fake.DynamicsNav.RunCodeunit(Fake.DynamicsNav.RTCParams,System.Int32)">
<summary>
 Runs a codeunit with the given ID on the RTC client
</summary>
</member>
<member name="M:Fake.DynamicsNav.createRTCConnectionInfo(System.String,System.String,System.String,System.Int32,System.String)">
<summary>
 Creates the connection information to a Dynamics NAV RTC instance
</summary>
</member>
<member name="M:Fake.DynamicsNav.CompileAll(Fake.DynamicsNav.DynamicsNavParams)">
<summary>
 Compiles all uncompiled objects in the Dynamics NAV client.
</summary>
</member>
<member name="M:Fake.DynamicsNav.ImportFiles(Fake.DynamicsNav.DynamicsNavParams,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates an import file from the given .txt files and imports it into the Dynamics NAV client.
 If the import fails, then every file will be tried alone.
</summary>
</member>
<member name="M:Fake.DynamicsNav.CreateImportFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates an import file from the given .txt files.
</summary>
</member>
<member name="M:Fake.DynamicsNav.ImportFile(Fake.DynamicsNav.DynamicsNavParams,System.String)">
<summary>
 Imports the given .txt or .fob file into the Dynamics NAV client
</summary>
</member>
<member name="M:Fake.DynamicsNav.ExportAllObjects(Fake.DynamicsNav.DynamicsNavParams,System.String)">
<summary>
 Exports all objects from the Dynamics NAV client to the given .txt or .fob file
</summary>
</member>
<member name="M:Fake.DynamicsNav.ExportObjects(Fake.DynamicsNav.DynamicsNavParams,System.String,System.String)">
<summary>
 Exports objects from the Dynamics NAV client based on the given filter to the given .txt or .fob file
</summary>
</member>
<member name="M:Fake.DynamicsNav.createConnectionInfo(System.String,Fake.DynamicsNav.NavisionServerType,System.String,System.String)">
<summary>
 Creates the connection information to a Dynamics NAV instance.
</summary>
</member>
<member name="M:Fake.DynamicsNav.getNAVPath(System.String)">
<summary>
 Gets the directory of the Dynamics NAV ClassicClient for the given version from the registry.
</summary>
</member>
<member name="M:Fake.DynamicsNav.getNAVClassicPath(System.String)">
<summary>
 Retrieves the the file name of the Dynamics NAV ClassicClient for the given version from the registry.
</summary>
</member>
<member name="T:Fake.DynamicsNav">
<summary>
 Contains helper function which allow to interact with Microsoft Dynamics NAV.
</summary>
</member>
<member name="T:Fake.DynamicsNavFile.NavObject">
<summary>
 A type definition of a Dynamics NAV object.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getHighestTagVersionInFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Gets the highest version number for a specified version tag in a number of Dynamics NAV objects in a set of object files
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getHighestTagVersionInObjects(System.String,System.String)">
<summary>
 Gets the highest version number for a specified version tag in a number of Dynamics NAV objects
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getTagVersionInObject(System.String,System.String)">
<summary>
 Gets the version number for the specified version tag in a Dynamics NAV object
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getTagVersionInVersionTagList(System.String,System.String)">
<summary>
 Gets the version number for the specified version tag in a Dynamics NAV version tag list
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.splitNavisionFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Splits the given files into individual object files in the specified destination directory.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.fileNameFromObject(Fake.DynamicsNavFile.NavObject,System.String)">
<summary>
 Returns a standardized filename based on the given NavObject.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.objectsInObjectString(System.String)">
<summary>
 Splits an object string into multiple Dynamics NAV objects of type NavObject.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.setVersionTags(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.DateTime,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks a Dynamics NAV object for missing required and invalid tags and raises this as errors.
 It also changes the given tag, resets the modified flag and time stamp.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.modifyNavisionFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.DateTime,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks a Dynamics NAV object for missing required and invalid tags and raises this as errors.
 It also changes the given tag, resets the modified flag and time stamp.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.checkTagsInFile(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Checks a Dynamics NAV file for missing required and invalid tags and raises this as errors
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.checkTagsInObjectString(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
<summary>
 Checks a Dynamics NAV object for missing required and invalid tags and raises this as errors
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getInvalidTags(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Get all invalid tags from a Dynamics NAV version tag list
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getMissingRequiredTags(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Get all missing required tags from a Dynamics NAV version tag list
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.replaceVersionTag(System.String,System.String,System.String)">
<summary>
 Replaces a version tag in a Dynamics NAV
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.replaceVersionTagList(System.String,System.String)">
<summary>
 Replaces a version tag list from a complete Dynamics NAV object with a new version tag list
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.replaceInVersionTag(System.String,System.String,System.String)">
<summary>
 Replaces a version tag in a version tag list from Dynamics NAV object
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.splitVersionTags(System.String)">
<summary>
 Splits a version tag list from Dynamics NAV object into single tags
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.getVersionTagList(System.String)">
<summary>
 Returns the version tag list from Dynamics NAV object.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.removeModifiedFlag(System.String)">
<summary>
 Removes the modified flag from a Dynamics NAV object.
</summary>
</member>
<member name="M:Fake.DynamicsNavFile.replaceDateTimeInString(System.DateTime,System.String)">
<summary>
 Replaces the timestamp in a Dynamics NAV object.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.NavObjectDateFormat">
<summary>
 A NAV culture-specific date format.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.ObjectSplitRegex">
<summary>
 A Regex which allows to find objects in a Dynamics NAV file.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.ObjectRegex">
<summary>
 A Regex which allows to parse objects in a Dynamics NAV file.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.TimeRegex">
<summary>
 A Regex which allows to retrieve the modified time.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.DateRegex">
<summary>
 A Regex which allows to retrieve modified date.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.VersionRegex">
<summary>
 A Regex which allows to retrieve the version list.
</summary>
</member>
<member name="P:Fake.DynamicsNavFile.ModifiedRegex">
<summary>
 A Regex which allows to retrieve the modified flag.
</summary>
</member>
<member name="T:Fake.DynamicsNavFile">
<summary>
 Provides an abstraction over Dynamics NAV object files.
</summary>
</member>
<member name="P:Fake.SSHHelper.SSHParams.RemoteUser">
<summary>
 remote User
</summary>
</member>
<member name="P:Fake.SSHHelper.SSHParams.PrivateKeyPath">
<summary>
 Path of the private key file (optional)
</summary>
</member>
<member name="P:Fake.SSHHelper.SSHParams.ToolPath">
<summary>
 Path of the scp.exe 
</summary>
</member>
<member name="T:Fake.SSHHelper.SSHParams">
<summary>
 The SSH parameter type.
</summary>
</member>
<member name="M:Fake.SSHHelper.SSH(Microsoft.FSharp.Core.FSharpFunc{Fake.SSHHelper.SSHParams,Fake.SSHHelper.SSHParams},System.String)">
<summary>
 Performs a command via SSH.
 ## Parameters

  - `setParams` - Function used to manipulate the default SSHParams value.
  - `command` - The target path. Can be something like user@host:directory/TargetFile or a local path.

 ## Sample

     SSH (fun p -&gt; { p with ToolPath = &quot;tools/ssh.exe&quot; }) command
</summary>
</member>
<member name="P:Fake.SSHHelper.SSHDefaults">
<summary>
 The SSH default parameters
</summary>
</member>
<member name="T:Fake.SSHHelper">
<summary>
 Conatins a task which allows to perform SSH operations
</summary>
</member>
<member name="P:Fake.SCPHelper.SCPParams.PrivateKeyPath">
<summary>
 Path of the private key file (optional)
</summary>
</member>
<member name="P:Fake.SCPHelper.SCPParams.ToolPath">
<summary>
 Path of the scp.exe 
</summary>
</member>
<member name="T:Fake.SCPHelper.SCPParams">
<summary>
 The SCP parameter type.
</summary>
</member>
<member name="M:Fake.SCPHelper.SCP(Microsoft.FSharp.Core.FSharpFunc{Fake.SCPHelper.SCPParams,Fake.SCPHelper.SCPParams},System.String,System.String)">
<summary>
 Performs a SCP copy from the given source directory to the target path.
 ## Parameters

  - `setParams` - Function used to manipulate the default SCPParams value.
  - `source` - The source path. Can be something like user@host:directory/SourceFile or a local path.
  - `target` - The target path. Can be something like user@host:directory/TargetFile or a local path.

 ## Sample

     SCP (fun p -&gt; { p with ToolPath = &quot;tools/scp.exe&quot; }) source target
</summary>
</member>
<member name="P:Fake.SCPHelper.SCPDefaults">
<summary>
 The SCP default parameters
</summary>
</member>
<member name="T:Fake.SCPHelper">
<summary>
 Conatins a task which allows to perform file copies using [SCP](http://en.wikipedia.org/wiki/Secure_copy), which is based on the Secure Shell (SSH) protocol.
</summary>
</member>
<member name="M:Fake.RoboCopyHelper.RoboCopyMirror(System.String,System.String)">
<summary>
 Executes a RoboCopy mirror command (potentially destructive)
 ## Parameters
  - `source` - The source directory
  - `destination` - The target directory
</summary>
</member>
<member name="M:Fake.RoboCopyHelper.RoboCopy(System.String,System.String)">
<summary>
 Executes a RoboCopy command
 ## Parameters
  - `source` - The source directory
  - `destination` - The target directory
</summary>
</member>
<member name="M:Fake.RoboCopyHelper.roboCopyWithOptions(System.String,System.String,Fake.RoboCopyHelper.RoboCopyOptions)">
<summary>
 Executes a RoboCopy command with options
 ## Parameters
  - `source` - The source directory
  - `destination` - The target directory
  - `options` - The options to pass to robocopy
</summary>
</member>
<member name="T:Fake.RoboCopyHelper">
<summary>
 Contains a task to use [robocopy](https://en.wikipedia.org/wiki/Robocopy) on Windows.
</summary>
</member>
<member name="T:Fake.XpkgHelper.xpkgParams">
<summary>
 Parameter type for xpkg tasks
</summary>
</member>
<member name="M:Fake.XpkgHelper.xpkgValidate(Microsoft.FSharp.Core.FSharpFunc{Fake.XpkgHelper.xpkgParams,Fake.XpkgHelper.xpkgParams})">
<summary>
 Validates a xpkg package based on the package file name
</summary>
</member>
<member name="M:Fake.XpkgHelper.xpkgPack(Microsoft.FSharp.Core.FSharpFunc{Fake.XpkgHelper.xpkgParams,Fake.XpkgHelper.xpkgParams})">
<summary>
 Creates a new xpkg package based on the package file name

 ## Sample

     Target &quot;PackageXamarinDistribution&quot; (fun _ -&gt; 
          xpkgPack (fun p -&gt;
              {p with
                  ToolPath = xpkgExecutable;
                  Package = &quot;Portable.Licensing&quot;;
                  Version = assemblyFileVersion;
                  OutputPath = publishDir
                  Project = &quot;Portable.Licensing&quot;
                  Summary = &quot;Portable.Licensing is a cross platform licensing tool&quot;
                  Publisher = &quot;Nauck IT KG&quot;
                  Website = &quot;http://dev.nauck-it.de&quot;
                  Details = &quot;./Xamarin/Details.md&quot;
                  License = &quot;License.md&quot;
                  GettingStarted = &quot;./Xamarin/GettingStarted.md&quot;
                  Icons = [&quot;./Xamarin/Portable.Licensing_512x512.png&quot;
                           &quot;./Xamarin/Portable.Licensing_128x128.png&quot;]
                  Libraries = [&quot;mobile&quot;, &quot;./Distribution/lib/Portable.Licensing.dll&quot;]
                  Samples = [&quot;Android Sample.&quot;, &quot;./Samples/Android/Android.Sample.sln&quot;
                             &quot;iOS Sample.&quot;, &quot;./Samples/iOS/iOS.Sample.sln&quot;]
              }
          )
      )
</summary>
</member>
<member name="M:Fake.XpkgHelper.XpkgDefaults">
<summary>
 Creates xpkg default parameters
</summary>
</member>
<member name="T:Fake.XpkgHelper">
<summary>
 Contains tasks to create packages in [Xamarin&apos;s xpkg format](http://components.xamarin.com/)
</summary>
</member>
<member name="P:Fake.VersionHelper.VerInfo.Patch">
<summary>
 PATCH version when you make backwards-compatible bug fixes.
</summary>
</member>
<member name="P:Fake.VersionHelper.VerInfo.Minor">
<summary>
 MINOR version when you add functionality in a backwards-compatible manner.
</summary>
</member>
<member name="P:Fake.VersionHelper.VerInfo.Major">
<summary>
 MAJOR version when you make incompatible API changes.
</summary>
</member>
<member name="T:Fake.VersionHelper.VerInfo">
<summary>
 Contains the version information.
</summary>
</member>
<member name="M:Fake.VersionHelper.GetAssemblyVersionString(System.String)">
<summary>
 Gets file assembly version in form of major.minor.build.revision.
 ## Parameters
  - `assemblyFile` - The assembly file path.
</summary>
</member>
<member name="M:Fake.VersionHelper.GetAssemblyVersion(System.String)">
<summary>
 Gets file assembly version.
 ## Parameters
  - `assemblyFile` - The assembly file path.
</summary>
</member>
<member name="T:Fake.MSBuild.ProjectSystem.ProjectComparison">
<summary>
 Result type for project comparisons.
</summary>
</member>
<member name="P:Fake.MSBuild.ProjectSystem.ProjectFile.ProjectFileName">
<summary>
 The project file name
</summary>
</member>
<member name="P:Fake.MSBuild.ProjectSystem.ProjectFile.Files">
<summary>
 All files which are in &quot;Compile&quot; sections
</summary>
</member>
<member name="P:Fake.MSBuild.ProjectSystem.ProjectFile.ContentFiles">
<summary>
 All files which are in &quot;Content&quot; sections
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.Save(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Saves the project file
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.RemoveFile(System.String)">
<summary>
 Removes a file from the Compile nodes
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.RemoveContentFile(System.String)">
<summary>
 Removes a file from the Content nodes
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.FromFile(System.String)">
<summary>
 Read a Project from a FileName
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.FindDuplicateFiles">
<summary>
 Finds duplicate files which are in &quot;Compile&quot; sections
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.FindDuplicateContentFiles">
<summary>
 Finds duplicate files which are in &quot;Content&quot; sections
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.AddFile(System.String)">
<summary>
 Add a file to the Compile nodes
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.ProjectFile.AddContentFile(System.String)">
<summary>
 Add a file to the Content nodes
</summary>
</member>
<member name="T:Fake.MSBuild.ProjectSystem.ProjectFile">
<summary>
 A small abstraction over MSBuild project files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.RemoveContentNodesWithMissingFiles(System.String)">
<summary>
 Removes projects Content nodes that have Include attributes pointing to files missing from the file system.  Saves updated projects.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.RemoveCompileNodesWithMissingFiles(System.String)">
<summary>
 Removes projects Compile nodes that have Include attributes pointing to files missing from the file system.  Saves updated projects.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.CompareProjectsTo(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given project files against the template project and fails if any files are missing.
 For F# projects it is also reporting unordered files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.FixProjectContentFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given projects to the template project and adds all missing content files to the projects if needed.
 It also removes duplicate files from the project files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.FixProjectFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given projects to the template project and adds all missing files to the projects if needed.
 It also removes duplicate files from the project files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.RemoveDuplicateContentFiles(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 It removes duplicate content files from the project files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.RemoveDuplicateFiles(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 It removes duplicate files from the project files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.FixMissingContentFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given projects to the template project and adds all missing files to the projects if needed.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.FixMissingFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given projects to the template project and adds all missing files to the projects if needed.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.findMissingContentFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given project files against the template project and returns which files are missing.
 For F# projects it is also reporting unordered files.
</summary>
</member>
<member name="M:Fake.MSBuild.ProjectSystem.findMissingFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Compares the given project files against the template project and returns which files are missing.
 For F# projects it is also reporting unordered files.
</summary>
</member>
<member name="T:Fake.MSBuild.ProjectSystem">
<summary>
 Contains project file comparison tools for MSBuild project files.
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.RemoveAllSpecAndTestDataFiles(System.String)">
<summary>
 Removes all spec and test data references from a project.
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.RemoveAllNUnitReferences(System.String)">
<summary>
 Removes all NUnit references from a project.
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.Nothing``2(``0,``1)">
<summary>
 A Convention which matches nothing
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.AllSpecAndTestDataFiles(System.String,System.String)">
<summary>
 All Spec.cs or Spec.fs files and all files containing TestData
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.AllSpecFiles``1(``0,System.String)">
<summary>
 All Spec.cs or Spec.fs files
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.AllNUnitReferences``1(``0,System.String)">
<summary>
 All references to nunit.*.dlls
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.RemoveTestsFromProject(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},System.String)">
<summary>
 Removes test data and test files from a given MSBuild project and recursivly from all MSBuild project dependencies.
 ## Parameters

  - `assemblyFilterF` - A filter function for assembly references.
  - `fileFilterF` - A filter function for files in a project.
  - `projectFileName` - The MSBuild project to start.
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.createFileName(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.removeFiles(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.removeAssemblyReference(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.removeFilteredElement(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean}},System.Xml.Linq.XDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.MSBuild.SpecsRemovement.normalize(System.Xml.Linq.XDocument)">
<summary>
 Converts a MSBuildProject to XML
 [omit]
</summary>
</member>
<member name="T:Fake.MSBuild.SpecsRemovement">
<summary>
 Contains functions which allow to remove side-by-side specs during the build.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.findGitDir(System.String)">
<summary>
 Searches the .git directory recursivly up to the root.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.fixPath(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.runSimpleGitCommand(System.String,System.String)">
<summary>
 Runs the git command and returns the first line of the result.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.showGitCommand(System.String,System.String)">
<summary>
 Runs the given git command, waits for its completion.
 This version doesn&apos;t throw an exception if an error occurs. It just traces the error.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.gitCommandf``1(System.String,Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.gitCommand(System.String,System.String)">
<summary>
 Runs the given git command, waits for its completion.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.directRunGitCommandAndFail(System.String,System.String)">
<summary>
 Runs the given git command, waits for its completion and fails when it didn&apos;t succeeded.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.directRunGitCommand(System.String,System.String)">
<summary>
 Runs the given git command, waits for its completion and returns whether it succeeded.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.fireAndForgetGitCommand(System.String,System.String)">
<summary>
 Fires the given git command ind the given repository directory and returns immediatly.
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.getGitResult(System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.runGitCommandf``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Tuple{System.Boolean,System.Collections.Generic.List{System.String},System.String}}})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.Git.CommandHelper.runGitCommand(System.String,System.String)">
<summary>
 Runs git.exe with the given command in the given repository directory.
</summary>
</member>
<member name="P:Fake.Git.CommandHelper.gitPath">
<summary>
 Tries to locate the git.exe via the eviroment variable &quot;GIT&quot;.
</summary>
</member>
<member name="P:Fake.Git.CommandHelper.gitTimeOut">
<summary>
 Specifies a global timeout for git.exe - default is *no timeout*
</summary>
</member>
<member name="T:Fake.Git.CommandHelper">
<summary>
 Contains helpers which allow to interact with [git](http://git-scm.com/) via the command line.
</summary>
</member>
<member name="M:Fake.Git.SHA1.showObjectHash(System.String,System.String)">
<summary>
 Shows the SHA1 calculated by git.
 Assumes that the CommandHelper module can find git.exe.
</summary>
</member>
<member name="M:Fake.Git.SHA1.calcGitSHA1(System.String)">
<summary>
 Calculates the SHA1 for a given string like git.
</summary>
</member>
<member name="M:Fake.Git.SHA1.calcSHA1(System.String)">
<summary>
 Calculates the SHA1 for a given string.
</summary>
</member>
<member name="T:Fake.Git.SHA1">
<summary>
 Contains functions which allow the SHA1 of a file with git and without it.
</summary>
</member>
<member name="M:Fake.Git.Repository.fullclean(System.String)">
<summary>
 Cleans a directory by removing all files and sub-directories.
 ## Parameters

  - `repositoryDir` - The path of the directory to clean.
</summary>
</member>
<member name="M:Fake.Git.Repository.init(System.String,System.Boolean,System.Boolean)">
<summary>
 Inits a git repository.
 ## Parameters

  - `repositoryDir` - The path of the target directory.
  - `bare` - If the new directory is a bare directory.
  - `shared` - Specifies that the git repository is to be shared amongst several users. This allows users belonging to the same group to push into that repository. 
</summary>
</member>
<member name="M:Fake.Git.Repository.cloneSingleBranch(System.String,System.String,System.String,System.String)">
<summary>
 Clones a single branch of a git repository.
 ## Parameters

  - `workingDir` - The working directory.
  - `repoUrl` - The URL to the origin.
  - `branchname` - Specifes the target branch.
  - `toPath` - Specifes the new target subfolder.
</summary>
</member>
<member name="M:Fake.Git.Repository.clone(System.String,System.String,System.String)">
<summary>
 Clones a git repository.
 ## Parameters

  - `workingDir` - The working directory.
  - `repoUrl` - The URL to the origin.
  - `toPath` - Specifes the new target subfolder. 
</summary>
</member>
<member name="T:Fake.Git.Repository">
<summary>
 Contains functions which allow basic operations on git repositories.
 All operations assume that the CommandHelper can find git.exe.
</summary>
</member>
<member name="P:Fake.Git.Submodule.Submodule.Status">
<summary>
 Gets the current status.
</summary>
</member>
<member name="M:Fake.Git.Submodule.Submodule.GetRemotePath">
<summary>
 Gets the remote path from the config.
</summary>
</member>
<member name="M:Fake.Git.Submodule.Submodule.GetLocalPath">
<summary>
 Gets the local path from the config.
</summary>
</member>
<member name="T:Fake.Git.Submodule.Submodule">
<summary>
 This record represents a git submodule binding.
</summary>
</member>
<member name="M:Fake.Git.Submodule.add(System.String,System.String,System.String,System.String)">
<summary>
 Adds a submodule to the given super repository.
 ## Parameters

  - `superRepositoryDir` - The super repository.
  - `remotePath` - The path to the remote repository of the submodule.
  - `localPath` - The local path to the submodule.
  - `branch` - The branch to  clone. (can be null)
</summary>
</member>
<member name="M:Fake.Git.Submodule.init(System.String,System.String)">
<summary>
 Inits a submodule with the given name in a subfolder of the given super repository.
 ## Parameters

  - `superRepositoryDir` - The super repository.
  - `name` - The name of the new repository.
</summary>
</member>
<member name="M:Fake.Git.Submodule.getSubModules(System.String)">
<summary>
 Gets all submodules from the given repository directory.
</summary>
</member>
<member name="T:Fake.Git.Submodule">
<summary>
 Contains helper functions which allow to deal with git submodules.
</summary>
</member>
<member name="M:Fake.Git.Branches.pull(System.String,System.String,System.String)">
<summary>
 Pulls a given branch from the given remote.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `remote` - The name of the remote.
  - `branch` - The name of the branch to pull.
</summary>
</member>
<member name="M:Fake.Git.Branches.pushBranch(System.String,System.String,System.String)">
<summary>
 Pushes the given branch to the given remote.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `remote` - The remote.
  - `branch` - The branch.
</summary>
</member>
<member name="M:Fake.Git.Branches.pushTag(System.String,System.String,System.String)">
<summary>
 Pushes the given tag to the given remote.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `remote` - The remote.
  - `tag` - The tag.
</summary>
</member>
<member name="M:Fake.Git.Branches.push(System.String)">
<summary>
 Pushes all branches to the default remote.
 ## Parameters

  - `repositoryDir` - The git repository.
</summary>
</member>
<member name="M:Fake.Git.Branches.deleteTag(System.String,System.String)">
<summary>
 Deletes the given tag.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `tag` - The tag which should be deleted.
</summary>
</member>
<member name="M:Fake.Git.Branches.tag(System.String,System.String)">
<summary>
 Tags the current branch.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `tag` - The new tag.
</summary>
</member>
<member name="M:Fake.Git.Branches.deleteBranch(System.String,System.Boolean,System.String)">
<summary>
 Deletes the given branch.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `force` - Determines if git should be run with the *force* flag.
  - `branch` - The branch which should be deleted.
</summary>
</member>
<member name="M:Fake.Git.Branches.createBranch(System.String,System.String,System.String)">
<summary>
 Creates a new branch from the given commit.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `newBranchName` - The new branch.
  - `commit` - The commit which git should take as the new HEAD. - can be HEAD, HEAD~1, ... , a branch name or a prefix of a SHA1.
</summary>
</member>
<member name="M:Fake.Git.Branches.checkout(System.String,System.Boolean,System.String)">
<summary>
 Performs a checkout of the given branch to the working copy.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `create` - Set this to true if the branch is new.
  - `branch` - The new branch.
</summary>
</member>
<member name="M:Fake.Git.Branches.checkoutNewBranch(System.String,System.String,System.String)">
<summary>
 Creates a new branch based on the given baseBranch and checks it out to the working copy.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `baseBranch` - The base branch.
  - `branch` - The new branch.
</summary>
</member>
<member name="M:Fake.Git.Branches.checkoutTracked(System.String,System.String,System.String)">
<summary>
 Performs a checkout of the given branch with an additional tracking branch.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `trackBranch` - The tracking branch.
  - `branch` - The branch for the checkout.
</summary>
</member>
<member name="M:Fake.Git.Branches.checkoutBranch(System.String,System.String)">
<summary>
 Performs a checkout of the given branch to the working copy.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `branch` - The branch for the checkout.
</summary>
</member>
<member name="M:Fake.Git.Branches.revisionsBetween(System.String,System.String,System.String)">
<summary>
 Returns the number of revisions between the two given commits.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit1` - The first commit for which git should find the merge base.
  - `commit2` - The second commit for which git should find the merge base.
</summary>
</member>
<member name="M:Fake.Git.Branches.findMergeBase(System.String,System.String,System.String)">
<summary>
 Returns the SHA1 of the merge base of the two given commits from the given repository.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit1` - The first commit for which git should find the merge base.
  - `commit2` - The second commit for which git should find the merge base.
</summary>
</member>
<member name="M:Fake.Git.Branches.getSHA1(System.String,System.String)">
<summary>
 Returns the SHA1 of the given commit from the given repository.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit` - The commit for which git should return the SHA1 - can be HEAD, HEAD~1, ... , a branch name or a prefix of a SHA1.
</summary>
</member>
<member name="M:Fake.Git.Branches.getAllBranches(System.String)">
<summary>
 Gets all local and remote branches from the given repository.
</summary>
</member>
<member name="M:Fake.Git.Branches.getRemoteBranches(System.String)">
<summary>
 Gets all remote branches from the given repository.
</summary>
</member>
<member name="M:Fake.Git.Branches.getLocalBranches(System.String)">
<summary>
 Gets all local branches from the given repository.
</summary>
</member>
<member name="T:Fake.Git.Branches">
<summary>
 Contains helper functions which allow to deal with git branches.
</summary>
</member>
<member name="M:Fake.Git.Reset.ResetHard(System.String)">
<summary>
 Performs a git reset &quot;hard&quot; to the current HEAD.
 Resets the index and working tree. Any changes to tracked files in the working tree since &lt;commit&gt; are discarded.
 ## Parameters

  - `repositoryDir` - The git repository.
</summary>
</member>
<member name="M:Fake.Git.Reset.ResetMixed(System.String)">
<summary>
 Performs a git reset &quot;mixed&quot; to the current HEAD.
 Resets the index but not the working tree and reports what has not been updated. 
 ## Parameters

  - `repositoryDir` - The git repository.
</summary>
</member>
<member name="M:Fake.Git.Reset.ResetSoft(System.String)">
<summary>
 Performs a git reset &quot;soft&quot; to the current HEAD.
 Does not touch the index file nor the working tree at all.
 ## Parameters

  - `repositoryDir` - The git repository.
</summary>
</member>
<member name="M:Fake.Git.Reset.hard(System.String,System.String,System.String)">
<summary>
 Performs a git reset &quot;hard&quot;.
 Resets the index and working tree. Any changes to tracked files in the working tree since &lt;commit&gt; are discarded.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit` - The commit to which git should perform the reset.
  - `file` - The file to reset - null means all files.
</summary>
</member>
<member name="M:Fake.Git.Reset.mixed(System.String,System.String,System.String)">
<summary>
 Performs a git reset &quot;mixed&quot;.
 Resets the index but not the working tree and reports what has not been updated. 
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit` - The commit to which git should perform the reset.
  - `file` - The file to reset - null means all files.
</summary>
</member>
<member name="M:Fake.Git.Reset.soft(System.String,System.String,System.String)">
<summary>
 Performs a git reset &quot;soft&quot;.
 Does not touch the index file nor the working tree at all.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `commit` - The commit to which git should perform the reset.
  - `file` - The file to reset - null means all files.
</summary>
</member>
<member name="M:Fake.Git.Reset.resetOrCheckout(System.String,System.String)">
<summary>
 the intent of the &apos;reset&apos; helper is to either set a repo to a certain point, or set a file to a certain point.  Git reset doesn&apos;t take file paths in the hard/mixed/soft modes, and so you have to use checkout instead for that.
 This function encapsulates caring about that so you don&apos;t have to.      
</summary>
</member>
<member name="T:Fake.Git.Reset">
<summary>
 Contains helper functions which allow to deal with git reset.
</summary>
</member>
<member name="T:Fake.Git.Merge.MergeType">
<summary>
 Git merge option.
</summary>
</member>
<member name="M:Fake.Git.Merge.merge(System.String,System.String,System.String)">
<summary>
 Performs a merge of the given branch with the current branch
 ## Parameters

  - `repositoryDir` - The git repository.
  - `flags` - Additional flags.
  - `branch` - The branch we want to merge in.
 ## Sample

     merge @&quot;C:\code\Fake&quot; NoFastForwardFlag &quot;master&quot;
</summary>
</member>
<member name="M:Fake.Git.Merge.compareBranches(System.String,System.String,System.String)">
<summary>
 Tests whether branches and their &quot;origin&quot; counterparts have diverged and need merging first.
 ## Parameters

  - `repositoryDir` - The git repository.
  - `local` - The local branch name.
  - `remote` - The remote branch name.
</summary>
</member>
<member name="P:Fake.Git.Merge.NoFastForwardFlag">
<summary>
 Forbids git to use fast-forward merges
</summary>
</member>
<member name="P:Fake.Git.Merge.FastForwardFlag">
<summary>
 Allows git to use fast-forward merges
</summary>
</member>
<member name="M:Fake.Git.Merge.getMergeMessage(System.String)">
<summary>
 Gets the current merge message.
</summary>
</member>
<member name="T:Fake.Git.Merge">
<summary>
 Contains helper functions which allow to deal with git merge.
</summary>
</member>
<member name="M:Fake.Git.Stash.pop(System.String)">
<summary>
 Remove a single stashed state from the stash list and 
 apply it on top of the current working tree state, 
 i.e., do the inverse operation of git stash save. 
 The working directory must match the index. 
</summary>
</member>
<member name="M:Fake.Git.Stash.push(System.String,System.String)">
<summary>
 Stash the changes in a dirty working directory away.
</summary>
</member>
<member name="T:Fake.Git.Stash">
<summary>
 Contains helper functions which allow to deal with git stash.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkIsRemoteBranch(System.String,System.String)">
<summary>
 Checks if the given branch is a remote branch.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkIsLocalBranch(System.String,System.String)">
<summary>
 Checks if the given branch is a local branch.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkIfBranchIsAbsent(System.String,System.String)">
<summary>
 Checks if the given branch is absent.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkIfBranchExists(System.String,System.String)">
<summary>
 Checks if the given branch exists.
</summary>
</member>
<member name="M:Fake.Git.SanityChecks.checkRevisionExists(System.String,System.String)">
<summary>
 Checks if the given branch exists.
</summary>
</member>
<member name="T:Fake.Git.SanityChecks">
<summary>
 Contains helper function which can be used for sanity checks.
</summary>
</member>
<member name="M:Fake.Git.Information.getCurrentHash">
<summary>
 Gets the current hash of the current repository
</summary>
</member>
<member name="M:Fake.Git.Information.getLastTag">
<summary>
 Gets the last git tag of the current repository by calling git describe
</summary>
</member>
<member name="M:Fake.Git.Information.shortlog(System.String)">
<summary>
 Gets the git log in one line
</summary>
</member>
<member name="M:Fake.Git.Information.describe(System.String)">
<summary>
 Gets the last git tag by calling git describe
</summary>
</member>
<member name="M:Fake.Git.Information.isAheadOf(System.String,System.String,System.String)">
<summary>
 Returns true if rev1 is ahead of rev2
</summary>
</member>
<member name="M:Fake.Git.Information.showName(System.String,System.String)">
<summary>
 Returns a friendly name from a SHA1
</summary>
</member>
<member name="M:Fake.Git.Information.isCleanWorkingCopy(System.String)">
<summary>
 Checks if the working copy is clean
</summary>
</member>
<member name="M:Fake.Git.Information.showStatus(System.String)">
<summary>
 Shows the git status
</summary>
</member>
<member name="M:Fake.Git.Information.getCurrentSHA1(System.String)">
<summary>
 Returns the SHA1 of the current HEAD
</summary>
</member>
<member name="M:Fake.Git.Information.getBranchName(System.String)">
<summary>
 Gets the git branch name
</summary>
</member>
<member name="M:Fake.Git.Information.extractGitVersion(System.String)">
<summary>
 [omit]       
</summary>
</member>
<member name="M:Fake.Git.Information.getVersion(System.String)">
<summary>
 Gets the git version
</summary>
</member>
<member name="T:Fake.Git.Information">
<summary>
 Contains helper functions which can be used to retrieve status information from git.
</summary>
</member>
<member name="T:Fake.Git.FileStatus.FileStatus">
<summary>
 A type which represents a file status in git.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.cleanWorkingCopy(System.String)">
<summary>
 Cleans the working copy by doing a git reset --hard and a clean -f.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.isInTheMiddleOfPatch(System.String)">
<summary>
 Returns true if the given repository is in the middle of a patch process.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.isInTheMiddleOfRebase(System.String)">
<summary>
 Returns true if the given repository is in the middle of a rebase process.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getRebaseDir(System.String)">
<summary>
 Returns the current rebase directory for the given repository.
</summary>
</member>
<member name="M:Fake.Git.FileStatus.isInTheMiddleOfConflictedMerge(System.String)">
<summary>
 Returns true if the working copy is in a conflicted merge otherwise false
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getConflictedFiles(System.String)">
<summary>
 Gets all conflicted files
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getChangedFilesInWorkingCopy(System.String,System.String)">
<summary>
 Gets the changed files since the given revision incl. changes in the working copy
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getAllFiles(System.String)">
<summary>
 Gets all changed files in the current revision
</summary>
</member>
<member name="M:Fake.Git.FileStatus.getChangedFiles(System.String,System.String,System.String)">
<summary>
 Gets the changed files between the given revisions
</summary>
</member>
<member name="T:Fake.Git.FileStatus">
<summary>
 Contains helper functions which can be used to retrieve file status information from git.
</summary>
</member>
<member name="M:Fake.Git.Rebase.rebaseOrFallbackOnMerge(System.String,System.String)">
<summary>
 Tries to rebase on top of the given branch.
 If the rebasing process fails a normal merge will be started.
 Returns if the process used merge instead of rebase.
</summary>
</member>
<member name="M:Fake.Git.Rebase.rollBackAndUseMerge(System.String,System.String)">
<summary>
 rebase failed ==&gt; fallback on merge
 [omit]
</summary>
</member>
<member name="M:Fake.Git.Rebase.skip(System.String)">
<summary>
 Restart the rebasing process by skipping the current patch. 
</summary>
</member>
<member name="M:Fake.Git.Rebase.continueRebase(System.String)">
<summary>
 Restart the rebasing process after having resolved a merge conflict. 
</summary>
</member>
<member name="M:Fake.Git.Rebase.abort(System.String)">
<summary>
 Restore the original branch and abort the rebase operation. 
</summary>
</member>
<member name="M:Fake.Git.Rebase.start(System.String,System.String)">
<summary>
 Performs a rebase on top of the given branch with the current branch
</summary>
</member>
<member name="T:Fake.Git.Rebase">
<summary>
 Contains helper functions which allow to deal with git rebase.
</summary>
</member>
<member name="M:Fake.Git.CommitMessage.setMessage(System.String,System.String)">
<summary>
 Sets the commit message
</summary>
</member>
<member name="M:Fake.Git.CommitMessage.getCommitMessage(System.String)">
<summary>
 Gets the commit message
</summary>
</member>
<member name="M:Fake.Git.CommitMessage.getCommitMessageFileInfos(System.String)">
<summary>
 Returns the commit message file.
</summary>
</member>
<member name="T:Fake.Git.CommitMessage">
<summary>
 Contains helper functions which allow to get and set the git commit message.
</summary>
</member>
<member name="M:Fake.Git.Staging.StageAll(System.String)">
<summary>
 Adds all files to the staging area
</summary>
</member>
<member name="M:Fake.Git.Staging.StageFile(System.String,System.String)">
<summary>
 Adds a file to the staging area
</summary>
</member>
<member name="T:Fake.Git.Staging">
<summary>
 Contains helper functions which allow to deal with git&apos;s staging area.
</summary>
</member>
<member name="M:Fake.Git.Commit.Commit(System.String,System.String)">
<summary>
 Commits all files in the given repository with the given message
</summary>
</member>
<member name="T:Fake.Git.Commit">
<summary>
 Contains helper functions which allow to commit to git repositories.
</summary>
</member>
<member name="M:Fake.FSIHelper.runBuildScript(System.Boolean,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Boolean)">
<summary>
 Run the given buildscript with fsi.exe
</summary>
</member>
<member name="M:Fake.FSIHelper.runBuildScriptAt(System.Boolean,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Boolean)">
<summary>
 Run the given buildscript with fsi.exe at the given working directory.
</summary>
</member>
<member name="M:Fake.FSIHelper.runBuildScriptWithFsiArgsAt(System.Boolean,Fake.FSIHelper.FsiArgs,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Boolean)">
<summary>
 Run the given buildscript with fsi.exe at the given working directory.  Provides full access to Fsi options and args.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeBuildScriptWithArgsAndReturnMessages(System.String,System.String[],System.Boolean)">
<summary>
 Run the given buildscript with fsi.exe and allows for extra arguments to the script. Returns output.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeBuildScriptWithArgsAndFsiArgsAndReturnMessages(System.String,System.String[],System.String[],System.Boolean)">
<summary>
 Run the given buildscript with fsi.exe and allows for extra arguments to the script. Returns output.
</summary>
</member>
<member name="M:Fake.FSIHelper.runFAKEScriptWithFsiArgsAndRedirectMessages(System.Boolean,Fake.FSIHelper.FsiArgs,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},System.Boolean)">
<summary>
 Run the given FAKE script with fsi.exe at the given working directory. Provides full access to Fsi options and args. Redirect output and error messages.
</summary>
</member>
<member name="M:Fake.FSIHelper.runScriptUncached(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,Fake.FSIHelper.CacheInfo,System.IO.TextWriter,System.IO.TextWriter)">
<summary>
 Run a given script unchacked, saves the cache if useCache is set to true.
 deletes any existing caching for the given script.
</summary>
</member>
<member name="M:Fake.FSIHelper.handleCaching``1(System.Boolean,Yaaf.FSharp.Scripting.IFsiSession,``0,System.IO.DirectoryInfo,Fake.FSIHelper.CacheInfo)">
<summary>
 Handles a cache store operation, this should not throw as it is executed in a finally block and
 therefore might eat other exceptions. And a caching error is not critical.
</summary>
</member>
<member name="M:Fake.FSIHelper.runScriptCached(System.Boolean,Fake.FSIHelper.CacheInfo,System.IO.TextWriter,System.IO.TextWriter)">
<summary>
 Run a script from the cache
</summary>
</member>
<member name="M:Fake.FSIHelper.nameParser(System.String)">
<summary>
 because it is used by test code
</summary>
</member>
<member name="M:Fake.FSIHelper.getCacheInfoFromScript(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 gets a cache entry for the given script.
 We need to consider fsiOptions as they might contain --defines.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeFSIWithScriptArgsAndReturnMessages(System.String,System.String[])">
<summary>
 Run the given build script with fsi.exe and allows for extra arguments to the script. Returns output.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeFSIWithArgs(System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Run the given build script with fsi.exe and allows for extra arguments to FSI.
</summary>
</member>
<member name="M:Fake.FSIHelper.executeFSI(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
<summary>
 Run the given buildscript with fsi.exe
</summary>
</member>
<member name="M:Fake.FSIHelper.fsiStartInfo(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Diagnostics.ProcessStartInfo)">
<summary>
 Creates a ProcessStartInfo which is configured to the F# Interactive.
</summary>
</member>
<member name="P:Fake.FSIHelper.fsiPath">
<summary>
 The path to the F# Interactive tool.
</summary>
</member>
<member name="T:Fake.FSIHelper">
<summary>
 Contains helper functions which allow to interact with the F# Interactive.
</summary>
</member>
<member name="M:Fake.Boot.CommandHandler.Interact">
<summary>
 Runs the handler with the default environment.
</summary>
</member>
<member name="T:Fake.Boot.CommandHandler">
<summary>
 Represents a command line handler.
</summary>
</member>
<member name="P:Fake.Boot.CommandEnvironment.Default">
<summary>
 The default environment.
</summary>
</member>
<member name="T:Fake.Boot.CommandEnvironment">
<summary>
 Abstracts over command-line environment features.
</summary>
</member>
<member name="T:Fake.Boot.Stage">
<summary>
 Stage of execution for a boot system.
</summary>
</member>
<member name="P:Fake.Boot.Config.SourceDirectory">
<summary>
 The full path to the root folder.
</summary>
</member>
<member name="P:Fake.Boot.Config.NuGetSourceUrl">
<summary>
 The URL of the NuGet source to use.
</summary>
</member>
<member name="P:Fake.Boot.Config.NuGetPackagesDirectory">
<summary>
 Full path to the `packages` directory for storing NuGet packages.
</summary>
</member>
<member name="P:Fake.Boot.Config.NuGetDependencies">
<summary>
 List of automatically installed and NuGet dependencies.
</summary>
</member>
<member name="P:Fake.Boot.Config.NuGetCredentials">
<summary>
 The credentials to use when authenticating to NuGet, if any.
</summary>
</member>
<member name="P:Fake.Boot.Config.IncludesFile">
<summary>
 Full path to the auto-generated fsx file with include statements.
</summary>
</member>
<member name="P:Fake.Boot.Config.FrameworkName">
<summary>
 Framework name for assembly resolution.
</summary>
</member>
<member name="M:Fake.Boot.Config.Default(System.String)">
<summary>
 The default configuration for a given source directory.
</summary>
</member>
<member name="T:Fake.Boot.Config">
<summary>
 Configures the boostrapping process.
</summary>
</member>
<member name="P:Fake.Boot.NuGetDependency.Version">
<summary>
 The version specification.
</summary>
</member>
<member name="P:Fake.Boot.NuGetDependency.PackageId">
<summary>
 The identifer of the package, such as &quot;FAKE&quot;.
</summary>
</member>
<member name="M:Fake.Boot.NuGetDependency.Create(System.String)">
<summary>
 The default pacakage dependency - take latest including pre-release.
</summary>
</member>
<member name="T:Fake.Boot.NuGetDependency">
<summary>
 Specifies NuGet package dependencies.
</summary>
</member>
<member name="T:Fake.Boot.NuGetVersion.SemanticVersion">
<summary>
 Pick the given semantic version, such as &quot;2.1.170-alpha&quot;.
</summary>
</member>
<member name="T:Fake.Boot.NuGetVersion.LatestPreRelease">
<summary>
 Pick the latest available version, including pre-release versions.
</summary>
</member>
<member name="T:Fake.Boot.NuGetVersion.Latest">
<summary>
 Pick the latest available version.
</summary>
</member>
<member name="T:Fake.Boot.NuGetVersion">
<summary>
 Specifies which version of the NuGet package to install.
</summary>
</member>
<member name="M:Fake.Boot.Prepare(Fake.Boot.Config)">
<summary>
 The main function intended to be executed in the BOOT phase of
 boostrapping scripts.
</summary>
</member>
<member name="M:Fake.Boot.ParseCommandLine(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Detects boot-specific commands.
</summary>
</member>
<member name="M:Fake.Boot.HandlerForArgs(Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Creates the CommandHandler from the 
</summary>
</member>
<member name="M:Fake.Boot.Implementation.IsBootScript(System.String)">
<summary>
 Checks if the F# script file is a bootstrapping script.
</summary>
</member>
<member name="M:Fake.Boot.Implementation.FsiArgs(Fake.Boot.CommandEnvironment,Fake.Boot.Stage)">
<summary>
 Computes extra command-line arguments to enable bootstrapping FAKE scripts.
</summary>
</member>
<member name="T:Fake.Boot">
<summary>
 Implements support for boostrapping FAKE scripts.  A bootstrapping
 `build.fsx` script executes twice (in two stages), allowing to
 download dependencies with NuGet and do other preparatory work in
 the first stage, and have these dependencies available in the
 second stage.
</summary>
</member>
<member name="M:Fake.MessageHelper.WaitForMessageFile(System.String,System.TimeSpan)">
<summary>
 Waits for another application to create a output file.
 If the timeout is reached an exception will be raised.
</summary>
</member>
<member name="M:Fake.MessageHelper.WaitForMessageFiles(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan)">
<summary>
 Waits for other applications to create a output files.
 If the timeout is reached an exception will be raised.
</summary>
</member>
<member name="T:Fake.MessageHelper">
<summary>
 Contains helper function which allow FAKE to interact with other applications via message files.
</summary>
</member>
<member name="M:Fake.HTMLHelpWorkShopHelper.CompileHTMLHelpProject(System.String,System.String)">
<summary>
 Uses the HTML Help Workshop to compile a help project and returns the generated file names of the generated files.
 ## Parameters

  - `helpCompiler` - The filename of the HTML Help WorkShop tool.
  - `projectFile` - The fileName of the help project.
</summary>
</member>
<member name="T:Fake.HTMLHelpWorkShopHelper">
<summary>
 Contains a task which allows to use [HTML Help Workshop](http://msdn.microsoft.com/en-us/library/windows/desktop/ms670169(v=vs.85).aspx) in order to compile a help project.
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.applyXslOnConfig(System.String,System.String)">
<summary>
 Applies a Xsl Stylesheet to a config file and writes it back.
 ## Parameters
  - `xsl` - The Xsl stylesheet to apply.
  - `fileName` - The file name of the config file.

 ## Sample

     applyXslOnConfig (navServicePath @@ DEV.xsl) (navServicePath @@ &quot;CustomSettings.config&quot;)
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateConnectionString(System.String,System.String,System.String)">
<summary>
 Reads a config file from the given file name, replaces the connection string value and writes it back.   
 ## Parameters
  - `connectionStringKey` - The connection string key name for which the value should be replaced.
  - `value` - The new connection string value.
  - `fileName` - The file name of the config file.     
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateApplicationSetting(System.String,System.String,System.String)">
<summary>
 Reads a config file from the given file name, replaces the Application Setting (as opposed to AppSetting) value and writes it back.
 ## Parameters
  - `settingName` - The ApplicationSetting name for which the value should be replaced.
  - `value` - The new ApplicationSetting value.
  - `fileName` - The file name of the config file.

 ## Sample

     updateApplicationSetting &quot;DatabaseName&quot; targetDatabase (navServicePath @@ &quot;CustomSettings.config&quot;)
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateAppSetting(System.String,System.String,System.String)">
<summary>
 Reads a config file from the given file name, replaces the app setting value and writes it back.
 ## Parameters
  - `key` - The AppSettings attribute key name for which the value should be replaced.
  - `value` - The new AppSettings attribute value.
  - `fileName` - The file name of the config file.

 ## Sample

     updateAppSetting &quot;DatabaseName&quot; targetDatabase (navServicePath @@ &quot;CustomSettings.config&quot;)
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateConfigSetting(System.String,System.String,System.String,System.String)">
<summary>
 Reads a config file from the given file name, replaces an attribute using the given xPath and writes it back.
 ## Parameters
  - `fileName` - The file name of the config file.
  - `xpath` - An XPath term which can be used to replace the attribute.
  - `attribute` - The attribute name for which the value should be replaced.
  - `value` - The new attribute value.
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.updateConfig(System.String,System.String,System.String,System.Xml.XmlDocument)">
<summary>
 Reads a config file from the given file name, replaces an attribute using the given xPath and writes it back.
 ## Parameters
  - `xpath` - An XPath term which can be used to replace the attribute.
  - `attribute` - The attribute name for which the value should be replaced.
  - `value` - The new attribute value.
  - `config` - The XElement representing the config.
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.writeConfig(System.String,System.Xml.XmlDocument)">
<summary>
 Writes an XmlDocument to a config file.
 ## Parameters
  - `fileName` - The file name of the config file.
  - `config` - The XmlDocument representing the config.
</summary>
</member>
<member name="M:Fake.ConfigurationHelper.readConfig(System.String)">
<summary>
 Reads a config file into an XmlDocument.
 ## Parameters
  - `fileName` - The file name of the config file.
</summary>
</member>
<member name="T:Fake.ConfigurationHelper">
<summary>
 Contains functions which allow to read and write config files.
</summary>
</member>
<member name="T:Fake.TargetHelper.BuildError">
<summary>
 Represents build errors
</summary>
</member>
<member name="T:Fake.TargetHelper.Target">
<summary>
 A Target can be run during the build
</summary>
</member>
<member name="T:Fake.TargetHelper.TargetTemplate`1">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.TargetHelper.TargetDescription">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.ActivateFinalTarget(System.String)">
<summary>
 Activates the FinalTarget.
</summary>
</member>
<member name="M:Fake.TargetHelper.FinalTarget(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Registers a final target (not activated).
</summary>
</member>
<member name="M:Fake.TargetHelper.ActivateBuildFailureTarget(System.String)">
<summary>
 Activates the BuildFailureTarget.
</summary>
</member>
<member name="M:Fake.TargetHelper.BuildFailureTarget(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Registers a BuildFailureTarget (not activated).
</summary>
</member>
<member name="M:Fake.TargetHelper.run(System.String)">
<summary>
 Runs a target and its dependencies.
</summary>
</member>
<member name="M:Fake.TargetHelper.runTargetsParallel(System.Int32,Fake.TargetHelper.TargetTemplate{Microsoft.FSharp.Core.Unit}[])">
<summary>
 Runs the given array of targets in parallel using count tasks
</summary>
</member>
<member name="M:Fake.TargetHelper.runSingleTarget(Fake.TargetHelper.TargetTemplate{Microsoft.FSharp.Core.Unit})">
<summary>
 Runs a single target without its dependencies
</summary>
</member>
<member name="M:Fake.TargetHelper.determineBuildOrder(System.String)">
<summary>
 Determines a parallel build order for the given set of targets
</summary>
</member>
<member name="M:Fake.TargetHelper.doesTargetMeanPrintDotGraph(System.String)">
 <summary>
 Gets a flag indicating that the user requested to output a DOT-graph
 of target dependencies instead of building a target.
</summary>
</member>
<member name="M:Fake.TargetHelper.listTargets">
<summary>
 Prints all available targets.
</summary>
</member>
<member name="P:Fake.TargetHelper.isListMode">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.WriteTaskTimeSummary``1(``0)">
 <summary>Writes a build time report.</summary>
 <param name="total">The total runtime.</param>
</member>
<member name="M:Fake.TargetHelper.WriteErrors">
<summary>
 Writes a summary of errors reported during build.
</summary>
</member>
<member name="M:Fake.TargetHelper.PrintDotDependencyGraph">
 <summary>Writes a dependency graph of all targets in the DOT format.</summary>
</member>
<member name="M:Fake.TargetHelper.PrintDependencyGraph(System.Boolean,System.String)">
 <summary>Writes a dependency graph.</summary>
 <param name="verbose">Whether to print verbose output or not.</param>
 <param name="target">The target for which the dependencies should be printed.</param>
</member>
<member name="M:Fake.TargetHelper.PrintTargets">
<summary>
 Prints all targets.
</summary>
</member>
<member name="M:Fake.TargetHelper.runBuildFailureTargets">
<summary>
 Runs all build failure targets.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.runFinalTargets">
<summary>
 Runs all activated final targets (in alphabetically order).
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.targetError(System.String,System.Exception)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.GetErrors">
<summary>
 Get Errors - Returns the errors that occured during execution
</summary>
</member>
<member name="M:Fake.TargetHelper.Target(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a Target.
</summary>
</member>
<member name="M:Fake.TargetHelper.TargetTemplate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a TargetTemplate.
</summary>
</member>
<member name="M:Fake.TargetHelper.TargetTemplateWithDependencies``1(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.String,``0)">
<summary>
 Creates a TargetTemplate with dependencies.

 ## Sample

 The following sample creates 4 targets using TargetTemplateWithDependencies and hooks them into the build pipeline.

     // Create target creation functions
     let createCompileTarget name strategy =
     TargetTemplateWithDependencies
         [&quot;Clean&quot;; &quot;ResolveDependencies&quot;] // dependencies to other targets
         (fun targetParameter -&gt;
           tracefn &quot;--- start compile product...&quot;
           if targetParameter = &quot;a&quot; then
             tracefn &quot;    ---- Strategy A&quot;
           else
             tracefn &quot;    ---- Strategy B&quot;
           tracefn &quot;--- finish compile product ...&quot;
         ) name strategy

     let createTestTarget name dependencies filePattern =
       TargetTemplateWithDependencies
         dependencies
         (fun filePattern -&gt;
           tracefn &quot;--- start compile tests ...&quot;
           !! filePattern
           |&gt; RunTests
           tracefn &quot;--- finish compile tests ...&quot;)
         name filePattern

     // create some targets
     createCompileTarget &quot;C1&quot; &quot;a&quot;
     createCompileTarget &quot;C2&quot; &quot;b&quot;

     createTestTarget &quot;T1&quot; [&quot;C1&quot;] &quot;**/C1/*.*&quot;
     createTestTarget &quot;T2&quot; [&quot;C1&quot;; &quot;C2&quot;] &quot;**/C?/*.*&quot;

     // hook targets to normal build pipeline
     &quot;T1&quot; ==&gt; &quot;T2&quot; ==&gt; &quot;Test&quot;

</summary>
</member>
<member name="M:Fake.TargetHelper.targetFromTemplate``1(Fake.TargetHelper.TargetTemplate{``0},System.String,``0)">
<summary>
 Creates a target from template.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.AllTargetsDependOn(System.String)">
<summary>
 Set a dependency for all registered targets.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.TargetsDependOn(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Set a dependency for all given targets.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.op_LessEqualsEquals(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Backwards dependencies operator - x is dependent on ys.
</summary>
</member>
<member name="M:Fake.TargetHelper.SoftDependencies(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Adds the dependencies to the list of soft dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.Dependencies(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Adds the dependencies to the list of dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.softDependency(System.String,System.String)">
<summary>
 Adds the dependency to the list of soft dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.dependency(System.String,System.String)">
<summary>
 Adds the dependency to the list of dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.softDependencyAtEnd(System.String,System.String)">
<summary>
 Appends the dependency to the list of soft dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.dependencyAtEnd(System.String,System.String)">
<summary>
 Appends the dependency to the list of dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.dependencyAtFront(System.String,System.String)">
<summary>
 Adds the dependency to the front of the list of dependencies.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.checkIfSoftDependencyCanBeAdded(System.String,System.String)">
<summary>
 Checks whether the soft dependency can be added.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.checkIfDependencyCanBeAdded(System.String,System.String)">
<summary>
 Checks whether the dependency can be added.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.checkIfDependencyCanBeAddedCore(Microsoft.FSharp.Core.FSharpFunc{Fake.TargetHelper.TargetTemplate{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{System.String}},System.String,System.String)">
<summary>
 Checks whether the dependency (soft or normal) can be added.
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.DoNothing">
<summary>
 Do nothing - fun () -&gt; () - Can be used to define empty targets.
</summary>
</member>
<member name="M:Fake.TargetHelper.softDependencyString``1(Fake.TargetHelper.TargetTemplate{``0})">
<summary>
 Returns the soft  DependencyString for the given target.
</summary>
</member>
<member name="M:Fake.TargetHelper.dependencyString``1(Fake.TargetHelper.TargetTemplate{``0})">
<summary>
 Returns the DependencyString for the given target.
</summary>
</member>
<member name="M:Fake.TargetHelper.getTarget(System.String)">
<summary>
 Gets a target with the given name from the target dictionary.
</summary>
</member>
<member name="M:Fake.TargetHelper.getAllTargetsNames">
<summary>
 Returns a list with all target names.
</summary>
</member>
<member name="M:Fake.TargetHelper.reset">
<summary>
 Resets the state so that a deployment can be invoked multiple times
 [omit]
</summary>
</member>
<member name="P:Fake.TargetHelper.ExecutedTargetTimes">
<summary>
 The executed target time.
 [omit]
</summary>
</member>
<member name="P:Fake.TargetHelper.ExecutedTargets">
<summary>
 The executed targets.
</summary>
</member>
<member name="P:Fake.TargetHelper.BuildFailureTargets">
<summary>
 BuildFailureTargets - stores build failure targets and if they are activated.
</summary>
</member>
<member name="P:Fake.TargetHelper.FinalTargets">
<summary>
 Final Targets - stores final targets and if they are activated.
</summary>
</member>
<member name="P:Fake.TargetHelper.TargetDict">
<summary>
 TargetDictionary
 [omit]
</summary>
</member>
<member name="M:Fake.TargetHelper.Description(System.String)">
<summary>
 Sets the Description for the next target.
 [omit]
</summary>
</member>
<member name="P:Fake.TargetHelper.LastDescription">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.TargetHelper.PrintStackTraceOnError">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.TargetHelper">
<summary>
 Contains infrastructure code and helper functions for FAKE&apos;s target feature.
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_EqualsQmarkGreater(System.String,System.String,System.Boolean)">
<summary>
 Defines a conditional dependency - y is dependent on x if the condition is true
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_LessEqualsGreater(System.String,System.String)">
<summary>
 Defines that x and y are not dependent on each other but y is dependent on all dependencies of x.
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_LessEqualsQmark(System.String,System.String)">
<summary>
 Defines a soft dependency. x must run before y, if it is present, but y does not require x to be run.
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_QmarkEqualsGreater(System.String,System.String)">
<summary>
 Defines a soft dependency. x must run before y, if it is present, but y does not require x to be run.
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_EqualsEqualsGreater(System.String,System.String)">
<summary>
 Defines a dependency - y is dependent on x
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.addSoftDependenciesOnSameLevel(System.String,System.String)">
<summary>
 Specifies that two targets have the same dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.addDependenciesOnSameLevel(System.String,System.String)">
<summary>
 Specifies that two targets have the same dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.targetsAreOnSameLevel(System.String,System.String)">
<summary>
 Specifies that two targets are on the same level of execution
</summary>
</member>
<member name="P:Fake.AdditionalSyntax.sameLevels">
<summary>
 Stores which targets are on the same level
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.RunTarget">
<summary>
 Runs the target given by the target parameter
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.RunTargetOrListTargets">
<summary>
 Runs the target given by the target parameter or lists the available targets
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.RunTargetOrDefault(System.String)">
<summary>
 Runs the target given by the target parameter or the given default target
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.RunParameterTargetOrDefault(System.String,System.String)">
<summary>
 Runs the target given by the build script parameter or the given default target
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.Run(System.String)">
<summary>
 Runs a Target and its dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.And``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Appends the dependency to the list of dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.Dependency``1(``0)">
<summary>
 Converts a dependency into a list
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.For(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Allows to use For? syntax for Dependencies
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_DynamicAssignment``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,``1)">
<summary>
 Allows to use Tokens instead of strings for TargetNames
</summary>
</member>
<member name="M:Fake.AdditionalSyntax.op_Dynamic``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Allows to use Tokens instead of strings
</summary>
</member>
<member name="T:Fake.AdditionalSyntax">
<summary>
 Provides functions and operators to deal with FAKE targets and target dependencies.
</summary>
</member>
<member name="M:Fake.PermissionsHelper.requiresAdmin``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Checks that the current user has administrator permissions - otherwise it throws an exception.
 ## Parameters
  - `f` - This Function will be excuted if the use has the right permissions.

 ## Sample

     Target &quot;Install&quot; (fun _ -&gt; 
          requiresAdmin (fun _ -&gt; installMSI())
      )
</summary>
</member>
<member name="M:Fake.PermissionsHelper.isAdmin(System.Security.Principal.WindowsIdentity)">
<summary>
 Returns whether the given user has administrator permissions.
 ## Parameters
  - `identity` - The windows identity of the user in question.
</summary>
</member>
<member name="T:Fake.PermissionsHelper">
<summary>
 Contains functions which allow to deal with permissions.
</summary>
</member>
<member name="T:Fake.SpecFlowHelper.SpecFlowParams">
<summary>
 SpecFlow execution parameter type.
</summary>
</member>
<member name="M:Fake.SpecFlowHelper.SpecFlow(Microsoft.FSharp.Core.FSharpFunc{Fake.SpecFlowHelper.SpecFlowParams,Fake.SpecFlowHelper.SpecFlowParams})">
<summary>
 ## Parameters

  - `setParams` - Function used to manipulate the default SpecFlow parameter value.
</summary>
</member>
<member name="P:Fake.SpecFlowHelper.SpecFlowDefaults">
<summary>
 SpecFlow default execution parameters.
</summary>
</member>
<member name="T:Fake.SpecFlowHelper">
<summary>
 Contains a task which allows to run [SpecFlow](http://www.specflow.org/) tests.
</summary>
</member>
<member name="T:Fake.OctoTools.OctoParams">
<summary>
 Complete Octo.exe CLI params
</summary>
</member>
<member name="T:Fake.OctoTools.OctoCommand">
<summary>
 Option type for selecting one command
</summary>
</member>
<member name="P:Fake.OctoTools.PushOptions.ReplaceExisting">
<summary>
 if the package already exists, should this package overwrite it?
</summary>
</member>
<member name="P:Fake.OctoTools.DeleteReleaseOptions.MaxVersion">
<summary>
 Maximum (inclusive) version number for the range of versions to delete
</summary>
</member>
<member name="P:Fake.OctoTools.DeleteReleaseOptions.MinVersion">
<summary>
 Minimum (inclusive) version number for the range of versions to delete
</summary>
</member>
<member name="P:Fake.OctoTools.DeleteReleaseOptions.Project">
<summary>
 Name of the project
</summary>
</member>
<member name="T:Fake.OctoTools.DeleteReleaseOptions">
<summary>
 Options for deleting a range of releases in a project
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.SpecificMachines">
<summary>
 A comma-separated list of machine names to target in the
 deployed environment. If not specified, all machines in
 the environment will be considered.
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.DeploymentCheckSleepCycle">
<summary>
 Specifies how much time should elapse between deployment status
 checks (default: 10 seconds)
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.DeploymentTimeout">
<summary>
 Specifies maximum time that deployment can take
 (default: 10 minutes)
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.Progress">
<summary>
 Show progress of the deployment.
 (Sets --waitfordeployment and --norawlog to true.)
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.NoRawLog">
<summary>
 Don&apos;t print the raw log of failed tasks
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.WaitForDeployment">
<summary>
 Whether to wait synchronously for deployment to finish
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.Force">
<summary>
 If a project is configured to skip packages with already-installed
 versions, override this setting to force re-deployment
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.Version">
<summary>
 Version number of the release to deploy; Specify &quot;latest&quot; for
 the latest release
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.DeployTo">
<summary>
 Environment to deploy to
</summary>
</member>
<member name="P:Fake.OctoTools.DeployReleaseOptions.Project">
<summary>
 Name of the project
</summary>
</member>
<member name="T:Fake.OctoTools.DeployReleaseOptions">
<summary>
 Options for deploying a release to an environment
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.IgnoreChannelRules">
<summary>
 Ignore package version matching rules
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.Channel">
<summary>
 Channel to use for the new release
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.IgnoreExisting">
<summary>
 If a release with the version number already exists, ignore it
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.ReleaseNotesFile">
<summary>
 Path to a file that contains Release Notes for the new release
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.ReleaseNotes">
<summary>
 Release Notes for the new release
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.PackagesFolder">
<summary>
 A folder containing NuGet packages from which we should get versions
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.Packages">
<summary>
 Version number to use for a package in the release
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.PackageVersion">
<summary>
 Default version of all packages to use for this release
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.Version">
<summary>
 Release number to use for the new release
</summary>
</member>
<member name="P:Fake.OctoTools.CreateReleaseOptions.Project">
<summary>
 Name of the project
</summary>
</member>
<member name="T:Fake.OctoTools.CreateReleaseOptions">
<summary>
 Options for creating a new release
</summary>
</member>
<member name="P:Fake.OctoTools.OctoServerOptions.ApiKey">
<summary>
 Your API key; retrieved from the user profile page.
</summary>
</member>
<member name="P:Fake.OctoTools.OctoServerOptions.Server">
<summary>
 The base URL for your Octopus server
</summary>
</member>
<member name="T:Fake.OctoTools.OctoServerOptions">
<summary>
 Octo.exe server options
</summary>
</member>
<member name="M:Fake.OctoTools.Octo(Microsoft.FSharp.Core.FSharpFunc{Fake.OctoTools.OctoParams,Fake.OctoTools.OctoParams})">
<summary>
 This task calls the Octo.exe CLI.
 See [Octopus-Tools](https://github.com/OctopusDeploy/Octopus-Tools) for more details.
 ## Parameters

  - `setParams` - Function used to overwrite the OctoTools default parameters.
</summary>
</member>
<member name="M:Fake.OctoTools.commandLine(Fake.OctoTools.OctoCommand)">
<summary>
 Maps a command to string input for the octopus tools cli.
</summary>
</member>
<member name="M:Fake.OctoTools.pushCommandLine(Fake.OctoTools.PushOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.serverCommandLine(Fake.OctoTools.OctoServerOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.deleteCommandLine(Fake.OctoTools.DeleteReleaseOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.deployCommandLine(Fake.OctoTools.DeployReleaseOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.releaseCommandLine(Fake.OctoTools.CreateReleaseOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.flag(System.String,System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.stringListParam``1(System.String,System.Collections.Generic.IEnumerable{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.optionalObjParam``1(System.String,Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.OctoTools.optionalStringParam(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.OctoTools.octoParams">
<summary>
 Default parameters to call octo.exe.
</summary>
</member>
<member name="P:Fake.OctoTools.deleteOptions">
<summary>
 Default options for &apos;DeleteReleases&apos;
</summary>
</member>
<member name="P:Fake.OctoTools.deployOptions">
<summary>
 Default options for &apos;DeployRelease&apos;
</summary>
</member>
<member name="P:Fake.OctoTools.releaseOptions">
<summary>
 Default options for &apos;CreateRelease&apos;
</summary>
</member>
<member name="P:Fake.OctoTools.serverOptions">
<summary>
 Default server options.
</summary>
</member>
<member name="T:Fake.OctoTools">
<summary>
 Contains tasks which can be used for automated deployment via [Octopus Deploy](http://octopusdeploy.com/).
 There is also a tutorial about the [Octopus deployment helper](../octopusdeploy.html) available.
</summary>
</member>
<member name="P:Fake.SignToolHelper.SignParams.TimeStampUrl">
<summary>
 The optional url of the timestamp server to use
</summary>
</member>
<member name="P:Fake.SignToolHelper.SignParams.Certificate">
<summary>
 The optional real certificate that will be used when it is found
</summary>
</member>
<member name="P:Fake.SignToolHelper.SignParams.DevCertificate">
<summary>
 The dev certificate that will be used when the real certificate can not be found
</summary>
</member>
<member name="T:Fake.SignToolHelper.SignParams">
<summary>
 Parameters used for signing.
</summary>
</member>
<member name="P:Fake.SignToolHelper.SignCert.PasswordFile">
<summary>
 The file containing the password
</summary>
</member>
<member name="P:Fake.SignToolHelper.SignCert.CertFile">
<summary>
 The certificate files
</summary>
</member>
<member name="T:Fake.SignToolHelper.SignCert">
<summary>
 Represents a certificate file and an optional password
</summary>
</member>
<member name="M:Fake.SignToolHelper.SignTool(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Signs all files in filesToSign with the certification file certFile, 
 protected with the password in the file passFile. 
 The signtool will be search in the toolPath.
</summary>
</member>
<member name="M:Fake.SignToolHelper.AppendSignature(System.String,Fake.SignToolHelper.SignParams,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Appends a SHA 256 signature to assemblies according to the settings specified in the parameters using signtool.exe.
 This will be looked up using the toolsPath parameter.
</summary>
</member>
<member name="M:Fake.SignToolHelper.Sign(System.String,Fake.SignToolHelper.SignParams,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Signs assemblies according to the settings specified in the parameters using signtool.exe.
 This will be looked up using the toolsPath parameter.
</summary>
</member>
<member name="T:Fake.SignToolHelper">
<summary>
 Contains a task to sign assemblies using the [SignTool](http://msdn.microsoft.com/en-us/library/windows/desktop/aa387764(v=vs.85).aspx).

 ## Certificates
 The SignTool needs a certificate to sign assemblies. It is not a good idea to include a certficate in your
 source control system, but the sign step should be usable on developer machines. Because of this, you can
 specify a dev certificate that can safely included in your source control system. Whenever the real certificate
 can not be found, the dev certificate will be used.
</summary>
</member>
<member name="T:Fake.MageHelper.MageParams">
<summary>
 Needed information to call MAGE
</summary>
</member>
<member name="T:Fake.MageHelper.MageTrustLevels">
<summary>
 The level of trust to grant the application on client computers.
</summary>
</member>
<member name="T:Fake.MageHelper.MageCall">
<summary>
 The supported commands of the MAGE tool
</summary>
</member>
<member name="T:Fake.MageHelper.MageProcessor">
<summary>
 These are the supported processor types of the MAGE tool
</summary>
</member>
<member name="M:Fake.MageHelper.MageRun(Fake.MageHelper.MageParams)">
<summary>
 Executes a full run of MAGE commands: first, it creates a new manifest file. Then it signs the manifest, deploys the application and finally signs the deployment.
</summary>
</member>
<member name="M:Fake.MageHelper.MageSignDeploy(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to sign the deployment of an application
</summary>
</member>
<member name="M:Fake.MageHelper.MageUpdateDeploy(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to update the deployment of an application
</summary>
</member>
<member name="M:Fake.MageHelper.MageDeployApp(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to deploy an application
</summary>
</member>
<member name="M:Fake.MageHelper.MageSignManifest(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to sign an application&apos;s manifest
</summary>
</member>
<member name="M:Fake.MageHelper.MageUpdateApp(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to update an existing application&apos;s manifest
</summary>
</member>
<member name="M:Fake.MageHelper.MageCreateApp(Fake.MageHelper.MageParams)">
<summary>
 Encapsulates the MAGE call to create a new application&apos;s manifest
</summary>
</member>
<member name="M:Fake.MageHelper.mageCall(Fake.MageHelper.MageCall,Fake.MageHelper.MageParams)">
<summary>
 Execute the MAGE tool. Adds some parameters, dependent on the MAGE command.
</summary>
</member>
<member name="M:Fake.MageHelper.MageSerializeParams(Fake.MageHelper.MageCall,Fake.MageHelper.MageParams)">
<summary>
 Convert the parameter structure into command line arguments of MAGE
</summary>
</member>
<member name="T:Fake.MageHelper">
<summary>
 Contains helper functions which allow FAKE to call the [Manifest Generation and Editing Tool](http://msdn.microsoft.com/en-us/library/acz3y3te.aspx), in short &apos;MAGE&apos;.
 The intentional use is the creation of a clickonce application.

 ## Certificates
 The MAGE tool wants to sign the manifest using a certificate. It should be clear, that this file is not under source control.
 On the other hand - you want to be able to run the compile batch on each developer machine. How can we achieve that? 
 In the parameter structure, we use a CertFile property and a TmpCertFile property. Whenever the CertFile was not found, the manifest is signed with
 a temporary certificate. And the latter one can be shared in the source control.
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.Build">
<summary>
 The optional build no.
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.PreRelease">
<summary>
 The optional PreRelease version
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.Patch">
<summary>
 PATCH version when you make backwards-compatible bug fixes.
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.Minor">
<summary>
 MINOR version when you add functionality in a backwards-compatible manner.
</summary>
</member>
<member name="P:Fake.SemVerHelper.SemVerInfo.Major">
<summary>
 MAJOR version when you make incompatible API changes.
</summary>
</member>
<member name="T:Fake.SemVerHelper.SemVerInfo">
<summary>
 Contains the version information.
</summary>
</member>
<member name="M:Fake.SemVerHelper.parse(System.String)">
<summary>
 Parses the given version string into a SemVerInfo which can be printed using ToString() or compared
 according to the rules described in the [SemVer docs](http://semver.org/).
 ## Sample

     parse &quot;1.0.0-rc.1&quot;     &lt; parse &quot;1.0.0&quot;          // true
     parse &quot;1.2.3-alpha&quot;    &gt; parse &quot;1.2.2&quot;          // true
     parse &quot;1.2.3-alpha2&quot;   &gt; parse &quot;1.2.3-alpha&quot;    // true, but only because of lexical compare
     parse &quot;1.2.3-alpha002&quot; &gt; parse &quot;1.2.3-alpha1&quot;   // false, due to lexical compare
     parse &quot;1.5.0-beta.2&quot;   &gt; parse &quot;1.5.0-rc.1&quot;     // false, due to lexical compare of first prerelease identitifer
     parse &quot;1.5.0-beta.2&quot;   &gt; parse &quot;1.5.0-beta.3&quot;   // true, due to numeric compare of second prerelease identitifer
     parse &quot;1.5.0-0123.001&quot; &lt; parse &quot;1.5.0-0123.002&quot; // true, due to numeric compare of second prerelease identifier
     parse &quot;1.0.0+lol&quot;      = parse &quot;1.0.0&quot;          // true, because build identifiers do not influence comparison
</summary>
</member>
<member name="M:Fake.SemVerHelper.isValidSemVer(System.String)">
<summary>
 Returns true if input appears to be a parsable semver string
</summary>
</member>
<member name="T:Fake.SemVerHelper">
<summary>
 Contains helpers which allow to deal with [Semantic Versioning](http://semver.org/) (SemVer).
</summary>
</member>
<member name="P:Fake.ReleaseNotesHelper.ReleaseNotes.Date">
<summary>
 Release date
</summary>
</member>
<member name="P:Fake.ReleaseNotesHelper.ReleaseNotes.SemVer">
<summary>
 Semantic version
</summary>
</member>
<member name="P:Fake.ReleaseNotesHelper.ReleaseNotes.NugetVersion">
<summary>
 The nuget package version.
</summary>
</member>
<member name="P:Fake.ReleaseNotesHelper.ReleaseNotes.AssemblyVersion">
<summary>
 The parsed version.
</summary>
</member>
<member name="T:Fake.ReleaseNotesHelper.ReleaseNotes">
<summary>
 Contains the parsed information of the release notes text file.
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.LoadReleaseNotes(System.String)">
<summary>
 Parses a Release Notes text file and returns the lastest release notes.

 ## Parameters
  - `fileName` - Release notes text file name
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.parseReleaseNotes(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parses a Release Notes text and returns the lastest release notes.

 ## Parameters
  - `data` - Release notes text
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.parseAllReleaseNotes(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parses a Release Notes text and returns all release notes.

 ## Parameters
  - `data` - Release notes text
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.parseAllComplexReleaseNotes(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parse &quot;complex&quot; release notes text sequence
</summary>
</member>
<member name="M:Fake.ReleaseNotesHelper.parseSimpleReleaseNotes(System.String)">
<summary>
 Parse simple release notes sequence
</summary>
</member>
<member name="T:Fake.ReleaseNotesHelper">
<summary>
 Contains helpers which allow to parse Release Notes text files. Either &quot;simple&quot; or &quot;complex&quot; format is accepted.

 ## Formats

 ### Simple format

     * 1.1.10 - Support for heterogeneous XML attributes. Make CsvFile re-entrant.
     * 1.1.9 - Infer booleans for ints that only manifest 0 and 1.

 ### Complex format

     ### New in 1.1.10 (Released 2013/09/12)
     * Support for heterogeneous XML attributes.
     * Make CsvFile re-entrant. 
     * Support for compressed HTTP responses. 
     * Fix JSON conversion of 0 and 1 to booleans.

     ### New in 1.1.9 (Released 2013/07/21)
     * Infer booleans for ints that only manifest 0 and 1.    
     * Support for partially overriding the Schema in CsvProvider.
     * PreferOptionals and SafeMode parameters for CsvProvider.

 ## Sample

     let release =
         ReadFile &quot;RELEASE_NOTES.md&quot;
         |&gt; ReleaseNotesHelper.parseReleaseNotes


     Target &quot;AssemblyInfo&quot; (fun _ -&gt;
         CreateFSharpAssemblyInfo &quot;src/Common/AssemblyInfo.fs&quot;
           [ Attribute.Title project
             Attribute.Product project
             Attribute.Description summary
             Attribute.Version release.AssemblyVersion
             Attribute.FileVersion release.AssemblyVersion]
     )
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieParams.TimeOut">
<summary>
 A timeout for the test runner
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieParams.CustomOptions">
<summary>
 Custom options to pass to Fixie runner
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieParams.WorkingDir">
<summary>
 Working directory (optional)
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieParams.ToolPath">
<summary>
 FileName of the Fixie runner
</summary>
</member>
<member name="T:Fake.FixieHelper.FixieParams">
<summary>
 Parameter type to configure the Fixie runner
</summary>
</member>
<member name="M:Fake.FixieHelper.Fixie(Microsoft.FSharp.Core.FSharpFunc{Fake.FixieHelper.FixieParams,Fake.FixieHelper.FixieParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 This task to can be used to run [Fixie](http://patrick.lioi.net/fixie/) on test libraries.
 ## Parameters

  - `setParams` - Function used to overwrite the Fixie default parameters.
  - `assemblies` - The file names of the test assemblies.

 ## Sample

     !! (testDir @@ &quot;Test.*.dll&quot;) 
       |&gt; Fixie (fun p -&gt; { p with CustomOptions = [&quot;custom&quot;,&quot;1&quot;; &quot;test&quot;,2] })
</summary>
</member>
<member name="P:Fake.FixieHelper.FixieDefaults">
<summary>
 Fixie default parameters - tries to locate Fixie.Console.exe in any subfolder.
</summary>
</member>
<member name="T:Fake.FixieHelper">
<summary>
 Contains tasks to run [Fixie](http://fixie.github.io/) unit tests.
</summary>
</member>
<member name="T:Fake.NuGetHelper.NuSpecPackage">
<summary>
 NuSpec metadata type
</summary>
</member>
<member name="T:Fake.NuGetHelper.NuGetParams">
<summary>
 Nuget parameter type
</summary>
</member>
<member name="F:Fake.NuGetHelper.NugetSymbolPackage.Nuspec">
<summary>
 Build a symbol package using the nuspec file
</summary>
</member>
<member name="F:Fake.NuGetHelper.NugetSymbolPackage.ProjectFile">
<summary>
 Build a symbol package using a project file, if provided
</summary>
</member>
<member name="F:Fake.NuGetHelper.NugetSymbolPackage.None">
<summary>
 Do not build symbol packages
</summary>
</member>
<member name="M:Fake.NuGetHelper.getDependencies(System.String)">
<summary>
 Returns the dependencies from specified packages.config file
</summary>
</member>
<member name="M:Fake.NuGetHelper.argList(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.downloadPackage(System.String,Fake.NuGetHelper.NuSpecPackage)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.getLatestPackage(System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.getFeedPackagesFromUrl(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.getPackage(System.String,System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.extractFeedPackageFromXml(System.Xml.XmlNode)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGetHelper.getRepoUrl">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.NuGetHelper.discoverRepoUrl">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.NuGetHelper.feedUrl">
<summary>
 Default NuGet feed
</summary>
</member>
<member name="M:Fake.NuGetHelper.GetMetaDataFromPackageFile(System.String)">
<summary>
 Returns the NuGet meta data from the given package file name.
 ## Parameters
 
  - `packageFileName` - The .nuspec package file name.
</summary>
</member>
<member name="M:Fake.NuGetHelper.getNuspecProperties(System.String)">
<summary>
 Parses nuspec metadata from a nuspec file.
 ## Parameters
 
  - `nuspec` - The .nuspec file content.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGet(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGetHelper.NuGetParams,Fake.NuGetHelper.NuGetParams},System.String)">
<summary>
 Creates a new NuGet package, and optionally publishes it.
 Template parameter substitution is performed when passing a .nuspec
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
  - `nuspecOrProjectFile` - The .nuspec file name.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGetPublish(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGetHelper.NuGetParams,Fake.NuGetHelper.NuGetParams})">
<summary>
 Publishes a NuGet package to the nuget server.
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGetPack(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGetHelper.NuGetParams,Fake.NuGetHelper.NuGetParams},System.String)">
<summary>
 Creates a new NuGet package based on the given .nuspec or project file.
 Template parameter substitution is performed when passing a .nuspec
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
  - `nuspecOrProjectFile` - The .nuspec or project file name.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGetPackDirectly(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGetHelper.NuGetParams,Fake.NuGetHelper.NuGetParams},System.String)">
<summary>
 Creates a new NuGet package based on the given .nuspec or project file.
 The .nuspec / projectfile is passed as-is (no templating is performed)
 ## Parameters
 
  - `setParams` - Function used to manipulate the default NuGet parameters.
  - `nuspecOrProjectFile` - The .nuspec or project file name.
</summary>
</member>
<member name="M:Fake.NuGetHelper.publishSymbols(Fake.NuGetHelper.NuGetParams)">
<summary>
 push package to symbol server (and try again if something fails)
</summary>
</member>
<member name="M:Fake.NuGetHelper.publish(Fake.NuGetHelper.NuGetParams)">
<summary>
 push package (and try again if something fails)
</summary>
</member>
<member name="M:Fake.NuGetHelper.pack(Fake.NuGetHelper.NuGetParams,System.String)">
<summary>
 Creates a NuGet package without templating (including symbols package if enabled)
</summary>
</member>
<member name="M:Fake.NuGetHelper.GetPackageVersion(System.String,System.String)">
<summary>
 Gets the version no. for a given package in the deployments folder
</summary>
</member>
<member name="M:Fake.NuGetHelper.RequireExactly(System.String)">
<summary>
 Creates a string which tells NuGet that you require exactly this package version.
</summary>
</member>
<member name="M:Fake.NuGetHelper.NuGetDefaults">
<summary>
 NuGet default parameters  
</summary>
</member>
<member name="T:Fake.NuGetHelper">
<summary>
 Contains helper functions and task which allow to inspect, create and publish [NuGet](https://www.nuget.org/) packages.
 There is also a tutorial about [nuget package creating](../create-nuget-package.html) available.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.ConfigFile">
<summary>
 NuGet configuration file. Default `None`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default `true`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Prerelease">
<summary>
 Allows updating to prerelease versions. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Verbose">
<summary>
 Show verbose output while updating. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Safe">
<summary>
 Looks for updates with the highest version available within the same major and minor version as the installed package. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.RepositoryPath">
<summary>
 Folder to store packages in. Default `./packages`.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Ids">
<summary>
 Packages to update. Update all if empty.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Sources">
<summary>
 Nuget feeds to search updates in. Use default if empty.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.Retries">
<summary>
 Number of retries if update fails.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.TimeOut">
<summary>
 Timeout for the update.
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateParams.ToolPath">
<summary>
 Path to the nuget.exe.
</summary>
</member>
<member name="T:Fake.NuGet.Update.NugetUpdateParams">
<summary>
 Nuget update parameters.
</summary>
</member>
<member name="M:Fake.NuGet.Update.NugetUpdate(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGet.Update.NugetUpdateParams,Fake.NuGet.Update.NugetUpdateParams},System.String)">
<summary>
 Update packages specified in the package file.

 Fails if packages are not installed; see [nuget bug](https://nuget.codeplex.com/workitem/3874).
 Fails if packages file has no corresponding VS project; see [nuget bug](https://nuget.codeplex.com/workitem/3875).
 ## Parameters

  - `setParams` - Function used to manipulate the default parameters.
  - `packagesFile` - Path to the `*.sln`, `*.*proj` or `packages.config` file.
</summary>
</member>
<member name="M:Fake.NuGet.Update.buildArgs(Fake.NuGet.Update.NugetUpdateParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.NuGet.Update.NugetUpdateDefaults">
<summary>
 Parameter default values.
</summary>
</member>
<member name="T:Fake.NuGet.Update">
<summary>
 Contains tasks for updating NuGet packages including assembly hint paths in the project files using the [nuget.exe update command](http://docs.nuget.org/docs/reference/command-line-reference#Update_Command).
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.ConfigFile">
<summary>
 NuGet configuration file. Default `None`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.NoCache">
<summary>
 Disable looking up packages from local machine cache. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default `true`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Verbosity">
<summary>
 Display this amount of details in the output: normal, quiet, detailed. Default `normal`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.OutputDirectory">
<summary>
 Specifies the directory in which packages will be installed. Default  `./packages/`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Prerelease">
<summary>
 Allows updating to prerelease versions. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.ExcludeVersion">
<summary>
 If set, the destination directory will contain only the package name, not the version number. Default `false`.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Version">
<summary>
 The version of the package to install.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Sources">
<summary>
 Nuget feeds to search updates in. Use default if empty.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.Retries">
<summary>
 Number of retries if update fails.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.TimeOut">
<summary>
 Timeout for the update.
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallParams.ToolPath">
<summary>
 Path to the nuget.exe.
</summary>
</member>
<member name="T:Fake.NuGet.Install.NugetInstallParams">
<summary>
 Nuget install parameters.
</summary>
</member>
<member name="T:Fake.NuGet.Install.NugetInstallVerbosity">
<summary>
 Nuget install verbosity mode.
</summary>
</member>
<member name="M:Fake.NuGet.Install.NugetInstall(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGet.Install.NugetInstallParams,Fake.NuGet.Install.NugetInstallParams},System.String)">
<summary>
 Installs the given package.

 ## Parameters

  - `setParams` - Function used to manipulate the default parameters.
  - `packagesFile` - Path to the `*.sln`, `*.*proj` or `packages.config` file, or simply a NuGet package name
</summary>
</member>
<member name="M:Fake.NuGet.Install.buildArgs(Fake.NuGet.Install.NugetInstallParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.NuGet.Install.argList(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.NuGet.Install.NugetInstallDefaults">
<summary>
 Parameter default values.
</summary>
</member>
<member name="T:Fake.NuGet.Install">
<summary>
 Contains tasks for installing NuGet packages using the [nuget.exe install command](http://docs.nuget.org/docs/reference/command-line-reference#Install_Command).
</summary>
</member>
<member name="M:Fake.NuGetVersion.NuGetVersionArg.Default">
<summary>
 Default arguments to compute next NuGet version number
</summary>
</member>
<member name="T:Fake.NuGetVersion.NuGetVersionArg">
<summary>
 Arguments for the next NuGet version number computing
</summary>
</member>
<member name="M:Fake.NuGetVersion.nextVersion(Microsoft.FSharp.Core.FSharpFunc{Fake.NuGetVersion.NuGetVersionArg,Fake.NuGetVersion.NuGetVersionArg})">
<summary>
 Compute next NuGet version number
</summary>
</member>
<member name="M:Fake.NuGetVersion.getLastNuGetVersion(System.String,System.String)">
<summary>
 Retrieve current NuGet version number
</summary>
</member>
<member name="M:Fake.NuGetVersion.IncMajor(Fake.SemVerHelper.SemVerInfo)">
<summary>
 Increment major version
</summary>
</member>
<member name="M:Fake.NuGetVersion.IncMinor(Fake.SemVerHelper.SemVerInfo)">
<summary>
 Increment minor version
</summary>
</member>
<member name="M:Fake.NuGetVersion.IncPatch(Fake.SemVerHelper.SemVerInfo)">
<summary>
 Increment patch version
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.Replace">
<summary>
 Replace binary for an existing build if one is found with the same name/bundle version
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.Notify">
<summary>
 Notify permitted teammates to install the build
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.DistributionLists">
<summary>
 Distribution list names which will receive access to the build
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.DSym">
<summary>
 iOS ONLY - the .dSYM corresponding to the build
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.Notes">
<summary>
 Release notes for the build
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.File">
<summary>
 (Required) file data for the build (.ipa or .apk)
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.TeamToken">
<summary>
 (Required) Team token from testflightapp.com/dashboard/team/edit
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightParams.ApiToken">
<summary>
 (Required) API token from testflightapp.com/account/#api
</summary>
</member>
<member name="T:Fake.TestFlightHelper.TestFlightParams">
<summary>
 The TestFlight parameter type.
</summary>
</member>
<member name="M:Fake.TestFlightHelper.TestFlight(Microsoft.FSharp.Core.FSharpFunc{Fake.TestFlightHelper.TestFlightParams,Fake.TestFlightHelper.TestFlightParams})">
<summary>
 Uploads the app build to TestFlight.
 ## Parameters
  - `setParams` - Function used to manipulate the default TestFlightParams value.
</summary>
</member>
<member name="M:Fake.TestFlightHelper.toCurlArgs(Fake.TestFlightHelper.TestFlightParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.TestFlightHelper.validateParams(Fake.TestFlightHelper.TestFlightParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.TestFlightHelper.TestFlightDefaults">
<summary>
 The default TestFlight upload parameters.
</summary>
</member>
<member name="T:Fake.TestFlightHelper">
<summary>
 Contains tasks to upload apps to [TestFlight](http://testflightapp.com)
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.AdditionalArgs">
<summary>
 Additional Args
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.Output">
<summary>
 Optional outputh path
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.VersionSuffix">
<summary>
 Optional version suffix.
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.Runtime">
<summary>
 Allows to test a specific runtime
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.Framework">
<summary>
 Allows to publish to a specific framework
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.Configuration">
<summary>
 The build configuration.
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.Project">
<summary>
 Project (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.TimeOut">
<summary>
 A timeout for the command.
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.PublishParams.ToolPath">
<summary>
 ToolPath - usually just &quot;dotnet&quot;
</summary>
</member>
<member name="T:Fake.DotNetCli.PublishParams">
<summary>
 DotNet publish parameters
</summary>
</member>
<member name="P:Fake.DotNetCli.PackParams.AdditionalArgs">
<summary>
 Additional Args
</summary>
</member>
<member name="P:Fake.DotNetCli.PackParams.Configuration">
<summary>
 The build configuration.
</summary>
</member>
<member name="P:Fake.DotNetCli.PackParams.TimeOut">
<summary>
 A timeout for the command.
</summary>
</member>
<member name="P:Fake.DotNetCli.PackParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.PackParams.Project">
<summary>
 Project (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.PackParams.VersionSuffix">
<summary>
 Optional version suffix.
</summary>
</member>
<member name="P:Fake.DotNetCli.PackParams.OutputPath">
<summary>
 Optional output path.
</summary>
</member>
<member name="P:Fake.DotNetCli.PackParams.ToolPath">
<summary>
 ToolPath - usually just &quot;dotnet&quot;
</summary>
</member>
<member name="T:Fake.DotNetCli.PackParams">
<summary>
 DotNet pack parameters
</summary>
</member>
<member name="P:Fake.DotNetCli.TestParams.AdditionalArgs">
<summary>
 Additional Args
</summary>
</member>
<member name="P:Fake.DotNetCli.TestParams.Runtime">
<summary>
 Allows to test a specific runtime
</summary>
</member>
<member name="P:Fake.DotNetCli.TestParams.Framework">
<summary>
 Allows to test a specific framework
</summary>
</member>
<member name="P:Fake.DotNetCli.TestParams.Configuration">
<summary>
 The build configuration.
</summary>
</member>
<member name="P:Fake.DotNetCli.TestParams.Project">
<summary>
 Project (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.TestParams.TimeOut">
<summary>
 A timeout for the command.
</summary>
</member>
<member name="P:Fake.DotNetCli.TestParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.TestParams.ToolPath">
<summary>
 ToolPath - usually just &quot;dotnet&quot;
</summary>
</member>
<member name="T:Fake.DotNetCli.TestParams">
<summary>
 DotNet test parameters
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.Output">
<summary>
 Optional outputh path
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.AdditionalArgs">
<summary>
 Additional Args
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.Runtime">
<summary>
 Allows to build for a specific runtime
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.Framework">
<summary>
 Allows to build for a specific framework
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.Configuration">
<summary>
 The build configuration.
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.Project">
<summary>
 Project (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.TimeOut">
<summary>
 A timeout for the command.
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.BuildParams.ToolPath">
<summary>
 ToolPath - usually just &quot;dotnet&quot;
</summary>
</member>
<member name="T:Fake.DotNetCli.BuildParams">
<summary>
 DotNet build parameters
</summary>
</member>
<member name="P:Fake.DotNetCli.RestoreParams.AdditionalArgs">
<summary>
 Additional Args
</summary>
</member>
<member name="P:Fake.DotNetCli.RestoreParams.NoCache">
<summary>
 Whether to use the NuGet cache.
</summary>
</member>
<member name="P:Fake.DotNetCli.RestoreParams.TimeOut">
<summary>
 A timeout for the command.
</summary>
</member>
<member name="P:Fake.DotNetCli.RestoreParams.Project">
<summary>
 Project (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.RestoreParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.RestoreParams.ToolPath">
<summary>
 ToolPath - usually just &quot;dotnet&quot;
</summary>
</member>
<member name="T:Fake.DotNetCli.RestoreParams">
<summary>
 DotNet restore parameters
</summary>
</member>
<member name="P:Fake.DotNetCli.CommandParams.TimeOut">
<summary>
 A timeout for the command.
</summary>
</member>
<member name="P:Fake.DotNetCli.CommandParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.DotNetCli.CommandParams.ToolPath">
<summary>
 ToolPath - usually just &quot;dotnet&quot;
</summary>
</member>
<member name="T:Fake.DotNetCli.CommandParams">
<summary>
 DotNet parameters
</summary>
</member>
<member name="M:Fake.DotNetCli.SetVersionInProjectJson(System.String,System.String)">
<summary>
 Sets version in project.json
</summary>
</member>
<member name="M:Fake.DotNetCli.Publish(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNetCli.PublishParams,Fake.DotNetCli.PublishParams})">
<summary>
 Runs the dotnet &quot;publish&quot; command.
 ## Parameters

  - `setPublishParams` - Function used to overwrite the publish default parameters.

 ## Sample

     DotNetCli.Publish
       (fun p -&gt; 
            { p with 
                 Configuration = &quot;Release&quot; })
</summary>
</member>
<member name="M:Fake.DotNetCli.Pack(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNetCli.PackParams,Fake.DotNetCli.PackParams})">
<summary>
 Runs the dotnet &quot;pack&quot; command.
 ## Parameters

  - `setPackParams` - Function used to overwrite the pack default parameters.

 ## Sample

     DotNetCli.Pack
       (fun p -&gt; 
            { p with 
                 Configuration = &quot;Release&quot; })
</summary>
</member>
<member name="M:Fake.DotNetCli.Test(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNetCli.TestParams,Fake.DotNetCli.TestParams})">
<summary>
 Runs the dotnet &quot;test&quot; command.
 ## Parameters

  - `setTestParams` - Function used to overwrite the test default parameters.

 ## Sample

     DotNetCli.Test
       (fun p -&gt; 
            { p with 
                 Configuration = &quot;Release&quot; })
</summary>
</member>
<member name="M:Fake.DotNetCli.Build(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNetCli.BuildParams,Fake.DotNetCli.BuildParams})">
<summary>
 Runs the dotnet &quot;build&quot; command.
 ## Parameters

  - `setBuildParams` - Function used to overwrite the build default parameters.

 ## Sample

     DotNetCli.Build
       (fun p -&gt; 
            { p with 
                 Configuration = &quot;Release&quot; })
</summary>
</member>
<member name="M:Fake.DotNetCli.Restore(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNetCli.RestoreParams,Fake.DotNetCli.RestoreParams})">
<summary>
 Runs the dotnet &quot;restore&quot; command.
 ## Parameters

  - `setRestoreParams` - Function used to overwrite the restore default parameters.

 ## Sample

     DotNetCli.Restore 
         (fun p -&gt; 
              { p with 
                   NoCache = true })
</summary>
</member>
<member name="M:Fake.DotNetCli.RunCommand(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNetCli.CommandParams,Fake.DotNetCli.CommandParams},System.String)">
<summary>
 Runs a dotnet command.
 ## Parameters

  - `setCommandParams` - Function used to overwrite the default parameters.
  - `args` - command and additional arguments.

 ## Sample

     DotNetCli.RunCommand
         (fun p -&gt; 
              { p with 
                   TimeOut = TimeSpan.FromMinutes 10. })
         &quot;restore&quot;
</summary>
</member>
<member name="M:Fake.DotNetCli.isInstalled">
<summary>
 Checks wether the dotnet CLI is installed
</summary>
</member>
<member name="M:Fake.DotNetCli.getVersion">
<summary>
 Gets the installed dotnet version
</summary>
</member>
<member name="P:Fake.DotNetCli.commandName">
<summary>
 The dotnet command name
</summary>
</member>
<member name="T:Fake.DotNetCli">
<summary>
 Contains a task which can be used to run dotnet CLI commands.
</summary>
</member>
<member name="T:Fake.DotCover.DotCoverParams">
<summary>
 The dotCover parameter type for running coverage
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverMSpec(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams},Microsoft.FSharp.Core.FSharpFunc{Fake.MSpecHelper.MSpecParams,Fake.MSpecHelper.MSpecParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs the dotCover &quot;cover&quot; command against the MSpec test runner.
 ## Parameters

  - `setDotCoverParams` - Function used to overwrite the dotCover report default parameters.
  - `setMSpecParams` - Function used to overwrite the MSpec default parameters.

 ## Sample

     !! (buildDir @@ buildMode @@ &quot;/*.Unit.Tests.dll&quot;) 
         |&gt; DotCoverMSpec 
             (fun dotCoverOptions -&gt; { dotCoverOptions with 
                     Output = artifactsDir @@ &quot;MSpecDotCoverSnapshot.dcvr&quot; }) 
             (fun mSpecOptions -&gt; { mSpecOptions with
                     Silent = true })
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverMSTest(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams},Microsoft.FSharp.Core.FSharpFunc{Fake.MSTest.MSTestParams,Fake.MSTest.MSTestParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs the dotCover &quot;cover&quot; command against the MSTest test runner.
 ## Parameters

  - `setDotCoverParams` - Function used to overwrite the dotCover report default parameters.
  - `setMSTestParams` - Function used to overwrite the MSTest default parameters.

 ## Sample

     !! (buildDir @@ buildMode @@ &quot;/*.Unit.Tests.dll&quot;) 
         |&gt; MSTest 
             (fun  -&gt; dotCoverOptions )
             (fun MSTestOptions -&gt; MSTestOptions) 
</summary>
</member>
<member name="M:Fake.DotCover.buildMSTestArgsForDotCover(Fake.MSTest.MSTestParams,System.String[])">
<summary>
 Builds the command line arguments from the given parameter record and the given assemblies.
 Runs all test assemblies in the same run for easier coverage management. 
 [omit]
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverXUnit2(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams},Microsoft.FSharp.Core.FSharpFunc{Fake.Testing.XUnit2.XUnit2Params,Fake.Testing.XUnit2.XUnit2Params},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs the dotCover &quot;cover&quot; command against the XUnit2 test runner.
 ## Parameters

  - `setDotCoverParams` - Function used to overwrite the dotCover report default parameters.
  - `setXUnit2Params` - Function used to overwrite the XUnit2 default parameters.

 ## Sample

     !! (buildDir @@ buildMode @@ &quot;/*.Unit.Tests.dll&quot;) 
         |&gt; DotCoverXUnit2 
             (fun  -&gt; dotCoverOptions )
             (fun nUnitOptions -&gt; nUnitOptions) 
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverNUnit3(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams},Microsoft.FSharp.Core.FSharpFunc{Fake.Testing.NUnit3.NUnit3Params,Fake.Testing.NUnit3.NUnit3Params},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs the dotCover &quot;cover&quot; command against the NUnit test runner.
 ## Parameters

  - `setDotCoverParams` - Function used to overwrite the dotCover report default parameters.
  - `setNUnitParams` - Function used to overwrite the NUnit default parameters.

 ## Sample

     !! (buildDir @@ buildMode @@ &quot;/*.Unit.Tests.dll&quot;) 
         |&gt; DotCoverNUnit 
             (fun dotCoverOptions -&gt; { dotCoverOptions with 
                     Output = artifactsDir @@ &quot;NUnitDotCoverSnapshot.dcvr&quot; }) 
             (fun nUnitOptions -&gt; { nUnitOptions with
                     DisableShadowCopy = true })
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverNUnit(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams},Microsoft.FSharp.Core.FSharpFunc{Fake.NUnitCommon.NUnitParams,Fake.NUnitCommon.NUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs the dotCover &quot;cover&quot; command against the NUnit test runner.
 ## Parameters

  - `setDotCoverParams` - Function used to overwrite the dotCover report default parameters.
  - `setNUnitParams` - Function used to overwrite the NUnit default parameters.

 ## Sample

     !! (buildDir @@ buildMode @@ &quot;/*.Unit.Tests.dll&quot;) 
         |&gt; DotCoverNUnit 
             (fun dotCoverOptions -&gt; { dotCoverOptions with 
                     Output = artifactsDir @@ &quot;NUnitDotCoverSnapshot.dcvr&quot; }) 
             (fun nUnitOptions -&gt; { nUnitOptions with
                     DisableShadowCopy = true })
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverReport(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverReportParams,Fake.DotCover.DotCoverReportParams})">
<summary>
 Runs the dotCover &quot;report&quot; command. This generates a report from a dotCover snapshot
 ## Parameters

  - `setParams` - Function used to overwrite the dotCover report default parameters.

 ## Sample

     DotCoverReport (fun p -&gt; { p with 
                         Source = artifactsDir @@ &quot;dotCoverSnapshot.dcvr&quot;
                         Output = artifactsDir @@ &quot;dotCoverReport.xml&quot;
                         ReportType = DotCoverReportType.Xml })
</summary>
</member>
<member name="M:Fake.DotCover.DotCoverMerge(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverMergeParams,Fake.DotCover.DotCoverMergeParams})">
<summary>
 Runs the dotCover &quot;merge&quot; command. This combines dotCover snaphots into a single
 snapshot, enabling you to merge test coverage from multiple test running frameworks
 ## Parameters

  - `setParams` - Function used to overwrite the dotCover merge default parameters.

 ## Sample

     DotCoverMerge (fun p -&gt; { p with 
                         Source = [artifactsDir @@ &quot;NUnitDotCoverSnapshot.dcvr&quot;
                                   artifactsDir @@ &quot;MSpecDotCoverSnapshot.dcvr&quot;]
                         Output = artifactsDir @@ &quot;dotCoverSnapshot.dcvr&quot; }) 
</summary>
</member>
<member name="M:Fake.DotCover.DotCover(Microsoft.FSharp.Core.FSharpFunc{Fake.DotCover.DotCoverParams,Fake.DotCover.DotCoverParams})">
<summary>
 Runs the dotCover &quot;cover&quot; command, using a target executable (such as NUnit or MSpec) and generates a snapshot file.

 ## Parameters

  - `setParams` - Function used to overwrite the dotCover default parameters.
</summary>
</member>
<member name="P:Fake.DotCover.DotCoverDefaults">
<summary>
 The dotCover default parameters
</summary>
</member>
<member name="T:Fake.DotCover">
<summary>
 Contains a task which can be used to run [DotCover](http://www.jetbrains.com/dotcover/) on .NET assemblies.
</summary>
</member>
<member name="T:Fake.Paket.PaketRestoreParams">
<summary>
 Paket restore packages type
</summary>
</member>
<member name="T:Fake.Paket.PaketPushParams">
<summary>
 Paket push parameter type
</summary>
</member>
<member name="T:Fake.Paket.PaketPackParams">
<summary>
 Paket pack parameter type
</summary>
</member>
<member name="M:Fake.Paket.Restore(Microsoft.FSharp.Core.FSharpFunc{Fake.Paket.PaketRestoreParams,Fake.Paket.PaketRestoreParams})">
<summary>
 Restores all packages referenced in either a paket.dependencies or a paket.references file using Paket
 ## Parameters

  - `setParams` - Function used to manipulate the default parameters.
</summary>
</member>
<member name="M:Fake.Paket.GetDependenciesForReferencesFile(System.String)">
<summary>
 Returns the dependencies from specified paket.references file
</summary>
</member>
<member name="M:Fake.Paket.Push(Microsoft.FSharp.Core.FSharpFunc{Fake.Paket.PaketPushParams,Fake.Paket.PaketPushParams})">
<summary>
 Pushes all NuGet packages in the working dir to the server by using Paket push.
 ## Parameters

  - `setParams` - Function used to manipulate the default parameters.
</summary>
</member>
<member name="M:Fake.Paket.Pack(Microsoft.FSharp.Core.FSharpFunc{Fake.Paket.PaketPackParams,Fake.Paket.PaketPackParams})">
<summary>
 Creates a new NuGet package by using Paket pack on all paket.template files in the working directory.
 ## Parameters

  - `setParams` - Function used to manipulate the default parameters.
</summary>
</member>
<member name="M:Fake.Paket.PaketRestoreDefaults">
<summary>
 Paket restore default parameters
</summary>
</member>
<member name="M:Fake.Paket.PaketPushDefaults">
<summary>
 Paket push default parameters
</summary>
</member>
<member name="M:Fake.Paket.PaketPackDefaults">
<summary>
 Paket pack default parameters
</summary>
</member>
<member name="T:Fake.Paket">
<summary>
 Contains helper functions and task which allow to inspect, create and publish [NuGet](https://www.nuget.org/) packages with [Paket](http://fsprojects.github.io/Paket/index.html).
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.IncludePDBs">
<summary>
 With the `IncludePDBs` switch you can tell `paket` to pack pdbs into the package.
 this only works for paket.template files of type &apos;Project&apos;.
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.DevelopmentDependency">
<summary>
 If set to `true` this will tell `nuget`/`paket` that this is a development dependency
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.RequireLicenseAcceptance">
<summary>
 If set to `true` this will tell `nuget`/`paket` to prompt the user for
 the acceptance of the provided license
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.ExcludedDependencies">
<summary>
 A list of excluded dependencies
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Dependencies">
<summary>
 A list of dependencies to other packages
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.FrameworkAssemblies">
<summary>
 A list of referenced framework assemblies
 if omitted all used Framework assemblies will be used by `paket`
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.References">
<summary>
 A list of references
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Files">
<summary>
 The included or excluded files (use this if the `TemplateType` is `File`)
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Tags">
<summary>
 a list of tags
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Copyright">
<summary>
 the copyright information
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.IconUrl">
<summary>
 URL to an icon
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.ProjectUrl">
<summary>
 URL to the where the project of the package is hosted
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.LicenseUrl">
<summary>
 URL to the license of the package
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Language">
<summary>
 The package language
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Summary">
<summary>
 a short summary (line by line)
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.ReleaseNotes">
<summary>
 the release notes (line by line)
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Owners">
<summary>
 A list of package owners
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Authors">
<summary>
 a list of authors for the nuget package.
 If omitted, `paket`will use reflection to obtain the value of the `AssemblyCompanyAttribute`.
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Title">
<summary>
 The title of the package
 If omitted, `paket` will use reflection to obtain the value of the `AssemblyTitleAttribute`.
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Description">
<summary>
 The package description
 If omitted, `paket` will use reflection to obtain the value of the `AssemblyDescriptionAttribute`.
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Version">
<summary>
 The package version.
 If omitted, `paket` will use reflection to obtain the value of the `AssemblyInformationalVersionAttribute` or if that is missing the `AssemblyVersionAttribute`.
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.Id">
<summary>
 The NuGet Package ID
 If omitted, `paket` will use reflection to determine the assembly name.
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.TemplateType">
<summary>
 The type of the template (`File` or `Project`)
</summary>
</member>
<member name="P:Fake.PaketTemplate.PaketTemplateParams.TemplateFilePath">
<summary>
 The file path to the `paket.template` file
 if omitted, a `paket.template` file will be created in the current directory
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketTemplateParams">
<summary>
 Contains the different parameters to create a paket.template file
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketDependencyVersionInfo.AnyVersion">
<summary>
 no explicit version
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketDependencyVersionInfo.GreaterOrEqual">
<summary>
 For example &gt;= 2.0
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketDependencyVersionInfo.GreaterOrEqualSafe">
<summary>
 For example ~&gt; 2.0
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketDependencyVersion.LOCKEDVERSION">
<summary>
 Use the currently locked version as dependency
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketDependencyVersion.CURRENTVERSION">
<summary>
 Use the currently loaded version as dependency
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketDependencyVersion.Version">
<summary>
 A specific version string
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketFileInfo.Exclude">
<summary>
 Explicitely exclude a file
</summary>
</member>
<member name="T:Fake.PaketTemplate.PaketFileInfo.Include">
<summary>
 Include a file and store it into a targed
</summary>
</member>
<member name="M:Fake.PaketTemplate.PaketTemplate(Microsoft.FSharp.Core.FSharpFunc{Fake.PaketTemplate.PaketTemplateParams,Fake.PaketTemplate.PaketTemplateParams})">
<summary>
 Creates a paket.template file with the given filename
 Will fail if the file could not be written

 ## Parameters
  - `setParams` - Function used to manipulate the default `PaketTemplateParams` value

 ## Sample usage

    Target &quot;Create Paket Template&quot; (fun _ -&gt;
       PaketTemplate (fun p -&gt;
            { p with
                TemplateFilePath = Some &quot;./deploytemp/paket.template&quot;
                Id = Some &quot;My.New.Package&quot;
                Version = Some &quot;0.0.1-alpha&quot;
                Authors = [&quot;Me&quot;; &quot;You&quot;; &quot;Someone Other&quot;]
                Files = [ Include (&quot;./**/*.dll&quot;, &quot;/lib/dlls&quot;)
                          Exclude &quot;./Foo/bar.dll&quot;
                          Include (&quot;./*.jpg&quot;, &quot;/images&quot;) ]
                Dependencies = [ &quot;Paket1.FOO&quot;, AnyVersion
                                 &quot;Paket2.BAR&quot;, GreaterOrEqual CURRENTVERSION
                                 &quot;Paket3.BAZ&quot;, GreaterOrEqualSafe LOCKEDVERSION
                                 &quot;Paket4.BOO&quot;, GreaterOrEqual (Version &quot;1.2.3&quot;) ]
            }
        )
    )
</summary>
</member>
<member name="P:Fake.PaketTemplate.DefaultPaketTemplateParams">
<summary>
 The default parameters for the generation of the `paket.template`

 ## Defaults

   - TemplateFilePath - `None`
   - TemplateType - `Project`
   - Id - `None`
   - Version - `None`
   - Description - `None`
   - Title - `None`
   - Authors - `Empty list`
   - Owners - `Empty list`
   - ReleaseNotes - `Empty list`
   - Summary - `Empty list`
   - Language - `None`
   - LicenseUrl - `None`
   - ProjectUrl - `None`
   - IconUrl - `None`
   - Copyright - `None`
   - Tags - `Empty list`
   - Files - `Empty list`
   - References - `Empty list`
   - FrameworkAssemblies - `Empty list`
   - Dependencies - `Empty list`
   - ExcludedDependencies - `Empty list`
   - RequireLicenseAcceptance - `None`
   - DevelopmentDependency - `None`
   - IncludePDBs - `None`
</summary>
</member>
<member name="T:Fake.PaketTemplate">
<summary>
 Contains helper functions and task which allow it to generate a paket.template
 file for [Paket](http://fsprojects.github.io/Paket/index.html)
</summary>
</member>
<member name="T:Fake.AzureHelper.AzureEmulatorParams">
<summary>
 A type for the controlling parameter
</summary>
</member>
<member name="M:Fake.AzureHelper.ResetDevStorage``1(``0)">
<summary>
 Resets the devstore (BLOB, Queues and Tables)
</summary>
</member>
<member name="M:Fake.AzureHelper.StartComputeEmulator``1(``0)">
<summary>
 Starts the compute emulator
</summary>
</member>
<member name="M:Fake.AzureHelper.StopComputeEmulator``1(``0)">
<summary>
 Stops the compute emulator
</summary>
</member>
<member name="M:Fake.AzureHelper.StartStorageEmulator``1(``0)">
<summary>
 Starts the storage emulator
</summary>
</member>
<member name="M:Fake.AzureHelper.StopStorageEmulator``1(``0)">
<summary>
 Stops the storage emulator
</summary>
</member>
<member name="P:Fake.AzureHelper.AzureEmulatorDefaults">
<summary>
 The default parameter of emulator
</summary>
</member>
<member name="T:Fake.AzureHelper">
<summary>
 Contains tasks to control the local Azure Emulator
</summary>
</member>
<member name="M:Fake.FtpHelper.deleteAFolder(System.String,System.String,System.String,System.String)">
<summary>
 Deletes a single folder from remote FTP folder.
 ## Parameters
  - `destPath` - The full path to the folder which needs to be deleted, including all its parent folders
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.deleteAFile(System.String,System.String,System.String,System.String)">
<summary>
 Deletes a single file from remote FTP folder.
 ## Parameters
  - `destPath` - The full path to the file which needs to be deleted, including all its parent folders
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.uploadAFolder(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Uploads a given local folder to a given root dir on a FTP server.
 ## Parameters
  - `srcPath` - The local server path from which files need to be uploaded
  - `rootDir` - The remote root dir where files need to be uploaded, leave this as empty, if files need to be uploaded to root dir of FTP server
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.createAFolder(System.String,System.String,System.String,System.String)">
<summary>
 Creates a matching folder in FTP folder, if not already present.
 ## Parameters
  - `destPath` - The full name of folder which needs to be created, including all its parent folders
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.isFolderPresent(System.String,System.String,System.String,System.String)">
<summary>
 Given a folder path, will check if that folder is present at a given root directory of a FTP server.
 ## Parameters
  - `destPath` - The full name of folder which needs to be checked for existance, including all its parent folders
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.checkInExistingDirList(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Given a folder name, will check if that folder is present at a given root directory of a FTP server.
 ## Parameters
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.uploadAFile(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Uploads a single file from local directory into remote FTP folder.
 ## Parameters
  - `destPath` - The full local file path that needs to be uploaded
  - `srcPath` - The full path to file which needs to be created, including all its parent folders
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.getFtpDirContents(System.String,System.String,System.String,System.String)">
<summary>
 Gets the contents/listing of files and folders in a given FTP server folder
 ## Parameters
  - `dirPath` - The full name of folder whose content need to be listed
  - `server` - FTP Server name (ex: &quot;ftp://10.100.200.300:21/&quot;)
  - `user` - FTP Server login name (ex: &quot;joebloggs&quot;)
  - `pwd` - FTP Server login password (ex: &quot;J0Eblogg5&quot;)
</summary>
</member>
<member name="M:Fake.FtpHelper.regexCheck(System.String,System.String)">
<summary>
 Checks to see if the `ftp content` string containts the string `Given_Folder_Name`
</summary>
</member>
<member name="M:Fake.FtpHelper.dirNameIsValid(System.String)">
<summary>
Partial validation for folder name, based on http://msdn.microsoft.com/en-us/library/aa365247.aspx
</summary>
</member>
<member name="M:Fake.FtpHelper.writeChunkToReqStream(System.Byte[],System.IO.Stream,System.IO.BinaryReader)">
<summary>
 Writes given byte array into the given stream
</summary>
</member>
<member name="M:Fake.FtpHelper.getServerInfo(System.String,System.String,System.String,System.String)">
<summary>
 Gets a connection to the FTP server
</summary>
</member>
<member name="T:Fake.FtpHelper">
<summary>
 Contains helpers which allow to upload a whole folder/specific file into a FTP Server. 
 Uses `Passive Mode` FTP and handles all files as binary (and not ASCII).
 Assumes direct network connectivity to destination FTP server (not via a proxy).
 Does not support FTPS and SFTP.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.TimeOut">
<summary>
 Specifies the timeout for the TypeScript compiler.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.OutputPath">
<summary>
 Specifies the TypeScript compiler output path.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.ToolPath">
<summary>
 Specifies the TypeScript compiler path.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.RemoveComments">
<summary>
 Specifies if the TypeScript compiler should remove comments. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.NoLib">
<summary>
 Specifies if the TypeScript compiler should not use libs. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.EmitSourceMaps">
<summary>
 Specifies if the TypeScript compiler should emit source maps. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.ModuleGeneration">
<summary>
 Specifies which JavaScript module type the TypeScript compiler should generate. Default is CommonJs.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.EmitDeclarations">
<summary>
 Specifies if the TypeScript compiler should generate declarations. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.OutputSingleFile">
<summary>
 Specifies if the TypeScript compiler should generate a single output file and its filename.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.EmitComments">
<summary>
 Specifies if the TypeScript compiler should generate comments. Default is false.
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptParams.ECMAScript">
<summary>
 Specifies which ECMAScript version the TypeScript compiler should generate. Default is ES3.
</summary>
</member>
<member name="T:Fake.TypeScript.TypeScriptParams">
<summary>
 TypeScript task parameter type
</summary>
</member>
<member name="T:Fake.TypeScript.ModuleGeneration">
<summary>
 Generated JavaScript module type
</summary>
</member>
<member name="T:Fake.TypeScript.ECMAScript">
<summary>
 Generated ECMAScript version
</summary>
</member>
<member name="M:Fake.TypeScript.TypeScriptCompiler(Microsoft.FSharp.Core.FSharpFunc{Fake.TypeScript.TypeScriptParams,Fake.TypeScript.TypeScriptParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 This task to can be used to call the [TypeScript](http://www.typescriptlang.org/) compiler.
 There is also a [tutorial](../typescript.html) for this task available.
 ## Parameters

  - `setParams` - Function used to overwrite the TypeScript compiler flags.
  - `files` - The type script files to compile.

 ## Sample

         !! &quot;src/**/*.ts&quot;
             |&gt; TypeScriptCompiler (fun p -&gt; { p with TimeOut = TimeSpan.MaxValue }) 
</summary>
</member>
<member name="P:Fake.TypeScript.TypeScriptDefaultParams">
<summary>
 Default parameters for the TypeScript task
</summary>
</member>
<member name="T:Fake.TypeScript">
<summary>
 Contains code to call the typescript compiler. There is also a [tutorial](../typescript.html) for this task available.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.OptionalArguments">
<summary>
 This options is used to add additional optional arguments, could be somthing like &quot;-returntargetcode &quot;
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.MergeByHash">
<summary>
 This option is used to merge the coverage results for an assembly regardless of where it was loaded 
 assuming the assembly has the same file-hash in each location. 
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.WorkingDir">
<summary>
 The directory where the OpenCover process will be started.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.TimeOut">
<summary>
 The timeout for the OpenCover process.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.Filter">
<summary>
 A list of filters to apply to selectively include or exclude assemblies and classes from coverage results.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.Register">
<summary>
 Use this to register and de-register the code coverage profiler.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.Output">
<summary>
 The location and name of the output xml file. 
 If no value is supplied then the current directory 
 will be used and the output filename will be results.xml.
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.TestRunnerExePath">
<summary>
 (Required) Path to the NUnit/XUnit console runner
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverParams.ExePath">
<summary>
 (Required) Path to the OpenCover console application
</summary>
</member>
<member name="T:Fake.OpenCoverHelper.OpenCoverParams">
<summary>
 OpenCover parameters, for more details see: https://github.com/OpenCover/opencover/wiki/Usage#console-application-usage.
</summary>
</member>
<member name="M:Fake.OpenCoverHelper.OpenCover(Microsoft.FSharp.Core.FSharpFunc{Fake.OpenCoverHelper.OpenCoverParams,Fake.OpenCoverHelper.OpenCoverParams},System.String)">
<summary>
 Runs OpenCover on a group of assemblies.
 ## Parameters

  - `setParams` - Function used to overwrite the default OpenCover parameters.
  - `targetArgs` - Test runner arguments.

 ## Sample

      OpenCover (fun p -&gt; { p with TestRunnerExePath = &quot;./Tools/NUnit/nunit-console.exe&quot; }) 
         &quot;project-file.nunit /config:Release /noshadow /xml:artifacts/nunit.xml /framework:net-4.0&quot;
</summary>
</member>
<member name="M:Fake.OpenCoverHelper.buildOpenCoverArgs(Fake.OpenCoverHelper.OpenCoverParams,System.String)">
<summary>
 Builds the command line arguments from the given parameter record
 [omit]
</summary>
</member>
<member name="P:Fake.OpenCoverHelper.OpenCoverDefaults">
<summary>
 OpenCover default parameters
</summary>
</member>
<member name="T:Fake.OpenCoverHelper">
<summary>
 Contains a task which can be used to run [OpenCover](https://github.com/sawilde/opencover) on .NET assemblies.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.TimeOut">
<summary>
 The timeout for the ReportGenerator process.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.WorkingDir">
<summary>
 The directory where the ReportGenerator process will be started.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.LogVerbosity">
<summary>
 The verbosity level of the log messages.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.Filters">
<summary>
 Optional list of assemblies that should be included or excluded
 in the report. Exclusion filters take precedence over inclusion
 filters. Wildcards are allowed.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.HistoryDir">
<summary>
 Optional directory for storing persistent coverage information.
 Can be used in future reports to show coverage evolution.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.SourceDirs">
<summary>
 Optional directories which contain the corresponding source code.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.ReportTypes">
<summary>
 The output formats and scope.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.TargetDir">
<summary>
 (Required) The directory where the generated report should be saved.
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorParams.ExePath">
<summary>
 (Required) Path to the ReportGenerator exe file.
</summary>
</member>
<member name="T:Fake.ReportGeneratorHelper.ReportGeneratorParams">
<summary>
 ReportGenerator parameters, for more details see: https://github.com/danielpalme/ReportGenerator.
</summary>
</member>
<member name="M:Fake.ReportGeneratorHelper.ReportGenerator(Microsoft.FSharp.Core.FSharpFunc{Fake.ReportGeneratorHelper.ReportGeneratorParams,Fake.ReportGeneratorHelper.ReportGeneratorParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Runs ReportGenerator on one or more coverage reports.
 ## Parameters

  - `setParams` - Function used to overwrite the default ReportGenerator parameters.
  - `reports` - Coverage reports.

 ## Sample

      ReportGenerator (fun p -&gt; { p with TargetDir = &quot;c:/reports/&quot; }) [ &quot;c:/opencover.xml&quot; ]
</summary>
</member>
<member name="M:Fake.ReportGeneratorHelper.buildReportGeneratorArgs(Fake.ReportGeneratorHelper.ReportGeneratorParams,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the report generator command line arguments from the given parameters and reports
 [omit]
</summary>
</member>
<member name="P:Fake.ReportGeneratorHelper.ReportGeneratorDefaultParams">
<summary>
 ReportGenerator default parameters
</summary>
</member>
<member name="T:Fake.ReportGeneratorHelper">
<summary>
 Contains a task which can be used to run [ReportGenerator](https://github.com/danielpalme/ReportGenerator),
 which converts XML reports generated by PartCover, OpenCover or NCover into a readable report in various formats.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.SchemaName">
<summary>
  The schema where RH stores it&apos;s tables
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.TimeOut">
<summary>
 A timeout for the runner.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.WorkingDir">
<summary>
 Working directory (optional).
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ToolPath">
<summary>
 FileName of the Roundhouse runner.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.WarnOnOneTimeScriptChanges">
<summary>
 Instructs RH to execute changed one time scripts (DDL/DML in Up folder) that have previously been run against the database instead of failing. A warning is logged for each one time scripts that is rerun.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.PermissionsFolderName">
<summary>
 The name of the folder where you keep your permissions scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RunAfterOtherAnyTimeScriptsFolderName">
<summary>
 The name of the folder where you keep scripts that will be run after all of the other any time scripts complete.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.IndexesFolderName">
<summary>
 The name of the folder where you keep your indexes.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.SprocsFolderName">
<summary>
 The name of the folder where you keep your stored procedures.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ViewsFolderName">
<summary>
 The name of the folder where you keep your views.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.FunctionsFolderName">
<summary>
 The name of the folder where you keep your functions.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RunFirstAfterUpdateFolderName">
<summary>
 The name of the folder where you keep any functions, views, or sprocs that are order dependent. If you have a function that depends on a view, you definitely need the view in this folder.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.UpFolderName">
<summary>
 The name of the folder where you keep your update scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RunBeforeUpFolderName">
<summary>
 The name of the folder where you keep scripts that you want to run before your update scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RunAfterCreateDatabaseFolderName">
<summary>
 The name of the folder where you will keep scripts that ONLY run after a database is created.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.AlterDatabaseFolderName">
<summary>
 The name of the folder where you keep your alter database scripts. Read up on token replacement. You will want to use {{DatabaseName}} here instead of specifying a database name.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Silent">
<summary>
 Tells RH not to ask for any input when it runs.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Restore">
<summary>
 This instructs RH to do a restore (with the restorefrompath parameter) of a database before running migration scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.WithTransaction">
<summary>
 This instructs RH to run inside of a transaction.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Simple">
<summary>
 This instructs RH to set the database recovery mode to simple recovery. Only works with SqlServer.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Drop">
<summary>
 This instructs RH to remove a database and not run migration scripts.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RestoreFilePath">
<summary>
 File path of back when Restore is set to true
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.CustomCreateScript">
<summary>
 This instructs RH to use this script for creating a database instead of the default based on the SQLType.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.Environment">
<summary>
 This allows RH to be environment aware and only run scripts that are in a particular environment based on the namingof the script. LOCAL.something**.ENV.**sql would only be run in the LOCAL environment.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.RepositoryPath">
<summary>
 Path to code repository to be able to correlate versions
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.VersionXPath">
<summary>
 Works in conjunction with an XML version file.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.VersionFile">
<summary>
 Path to the file to use for versioning. Either a .XML file, a .DLL or a .TXT file that a version can be resolved from.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.OutputPath">
<summary>
 Output path. Path to where migration artifacts are stored.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.DatabaseType">
<summary>
 Database Type (fully qualified class name implementing [roundhouse.sql.Database, roundhouse])
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.CommandTimeoutAdmin">
<summary>
 This is the timeout when administration commands are run (except for restore, which has its own). 
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.CommandTimeout">
<summary>
 This is the timeout when commands are run. This is not for admin commands or restore.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ConnectionStringAdmin">
<summary>
 This is used for connecting to master when you may have a different uid and password than normal.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ConnectionString">
<summary>
 As an alternative to ServerName and Database - You can provide an entire connection string instead.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.ServerDatabase">
<summary>
 The server and instance you would like to run on. (local) and (local)\SQL2008 are both valid values. 
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.SqlFilesDirectory">
<summary>
 The directory where your SQL scripts are.
</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseParams.DatabaseName">
<summary>
 The database you want to create/migrate.
</summary>
</member>
<member name="T:Fake.RoundhouseHelper.RoundhouseParams">
<summary>
 Parameter type to configure the RoundhousE runner
</summary>
</member>
<member name="M:Fake.RoundhouseHelper.Roundhouse(Microsoft.FSharp.Core.FSharpFunc{Fake.RoundhouseHelper.RoundhouseParams,Fake.RoundhouseHelper.RoundhouseParams})">
<summary>
 This task to can be used to run [RoundhousE](http://projectroundhouse.org/) for database migrations.
 ## Parameters

  - `setParams` - Function used to overwrite the Roundhouse default parameters.

 ## Sample

     Roundhouse (fun p -&gt; { p with 
        SqlFilesDirectory = &quot;.\database&quot;
        ServerDatabase = &quot;(local)&quot;
        DatabaseName = &quot;atxc&quot;
        WarnOnOneTimeScriptChanges = true })

</summary>
</member>
<member name="P:Fake.RoundhouseHelper.RoundhouseDefaults">
<summary>
 Roundhouse default parameters - tries to locate rh.exe in any subfolder.
</summary>
</member>
<member name="T:Fake.RoundhouseHelper">
<summary>
 Contains tasks to run [RoundhousE](http://projectroundhouse.org/) database migrations.
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.QuotationsDebug">
<summary>
 Emit debug information in quotations
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.TargetProfile">
<summary>
 Specify target framework profile of this assembly.
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.SubsystemVersion">
<summary>
 Specifies the version of the OS subsystem to be used by the generated executable. 
 Use 6.02 for Windows 8, 6.01 for Windows 7, 6.00 for Windows Vista. 
 This option only applies to executables, not DLL  and need only be used if your application 
 depends on specific security features available only on certain versions of the OS
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.HighEntropyVA">
<summary>
 Enable high-entropy ASLR
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.SimpleResolution">
<summary>
 Resolve assembly references using directory-based rules rather than MSBuild resolution
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Pdb">
<summary>
 Name the output debug file
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.StaticLink">
<summary>
 Statically link the given assembly and all referenced DLLs that depend on this assembly. 
 Use an assembly name e.g. mylib, not a DLL name.
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Standalone">
<summary>
 Statically link the F# library and all referenced DLLs 
 that depend on it into the assembly being generated
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.NoFramework">
<summary>
 Do not reference the default CLI assemblies by default
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.BaseAddress">
<summary>
 Base address for the library to be built
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Lib">
<summary>
  Specify a directory for the include path which is used to resolve source files and assemblies
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.FullPaths">
<summary>
 Output messages with fully qualified paths
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Utf8Output">
<summary>
 Output messages in UTF-8 encoding
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Times">
<summary>
 Displays timing information for compilation.
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Codepage">
<summary>
 Specify the codepage used to read source files
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Help">
<summary>
  Display the commandline flags and their usage
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.NoLogo">
<summary>
 Suppress compiler copyright message
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.MLCompatibility">
<summary>
 Ignore ML compatibility warnings
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Definitions">
<summary>
 Define a list of conditional compilation symbols
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Define">
<summary>
 Define a conditional compilation symbols
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Checked">
<summary>
 Generate overflow checks
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.ConsoleColors">
<summary>
 Output warning and error messages in color
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.WarnOn">
<summary>
 Enable specific warnings that may be off by default
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.NoWarn">
<summary>
 Disable specific warning messages
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Warn">
<summary>
 Set a warning level (0-5)
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.WarnAsErrors">
<summary>
 Report specific warnings as errors
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.WarnAsError">
<summary>
 Report all warnings as errors
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.CrossOptimize">
<summary>
 Enable or disable cross-module optimizations
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Tailcalls">
<summary>
 Enable or disable tailcalls
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Optimize">
<summary>
 Enable optimizations
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.DebugType">
<summary>
 Specify debugging type: full, pdbonly. 
 (&apos;full&apos; is the default and enables attaching a debugger to a running program).
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Debug">
<summary>
 Emit debug information
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.LinkResource">
<summary>
 Link the specified resource to this assembly
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Resource">
<summary>
 Embed the specified managed resource
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.NoWin32Manifest">
<summary>
 Do not include the default Win32 manifest
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Win32Manifest">
<summary>
 Specify a Win32 manifest file
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Win32res">
<summary>
 Specify a Win32 resource file (.res)
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.References">
<summary>
 Reference assemblies in the order listed
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Reference">
<summary>
 Reference an assembly
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Sig">
<summary>
 Print the inferred interface of the assembly to a file
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.NoInterfacedata">
<summary>
 Don&apos;t add a resource to the generated assembly containing F#-specific metadata
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.NoOptimizationData">
<summary>
 Only include optimization information essential for implementing inlined constructs. 
 Inhibits cross-module inlining but improves binary compatibility.
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Platform">
<summary>
 Limit which platforms the compiled code can run on: 
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.KeyContainer">
<summary>
 Specify a strong name key container
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.KeyFile">
<summary>
 Specify a strong name key file
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Doc">
<summary>
 Write the xmldoc of the assembly to the given file
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.DelaySign">
<summary>
 Delay-sign the assembly using only the public portion of the strong name key
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Target">
<summary>
 The &apos;fsc.exe&apos; output target types : exe, winexe, library, module
</summary>
</member>
<member name="T:Fake.FscHelper.FscParam.Out">
<summary>
 Name of the output file
</summary>
</member>
<member name="T:Fake.FscHelper.ResourceInfo">
<summary>
 Specified path of a managed resource with an optional name alias and accessiblity flag
 resinfo format is &lt;file&gt;[,&lt;stringname&gt;[,public|private]]
 e.g. `resource.dat,rezName,public`
</summary>
</member>
<member name="T:Fake.FscHelper.Optimization">
<summary>
 Optimization options that can be disabled or enabled selectively by listing them
 with the optimize compiler flag
</summary>
</member>
<member name="T:Fake.FscHelper.Access">
<summary>
 Used to set the Accessiblity of an embeded or linked resource 
</summary>
</member>
<member name="T:Fake.FscHelper.Profile">
<summary>
 Specify target framework profile of this assembly. 
 Valid values are mscorlib or netcore. Default - mscorlib
</summary>
</member>
<member name="T:Fake.FscHelper.DebugType">
<summary>
 Specify debugging type: full, pdbonly. 
 (&apos;full&apos; is the default and enables attaching a debugger to a running program).
</summary>
</member>
<member name="T:Fake.FscHelper.PlatformType">
<summary>
 Limit which platforms the compiled code can run on: 
     x86, Itanium, x64, anycpu32bitpreferred, or anycpu. 
 The default is anycpu.
</summary>
</member>
<member name="T:Fake.FscHelper.TargetType.Module">
<summary>
 Build a module that can be added to another assembly (.netmodule)
</summary>
</member>
<member name="T:Fake.FscHelper.TargetType.Library">
<summary>
 Build a library
</summary>
</member>
<member name="T:Fake.FscHelper.TargetType.Winexe">
<summary>
  Build a Windows executable
</summary>
</member>
<member name="T:Fake.FscHelper.TargetType.Exe">
<summary>
 Build a console executable
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.OtherParams">
<summary>
 Specifies other params for the compilation. Freeform strings.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.Debug">
<summary>
 Specifies whether to emit debug information (default is false).
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.References">
<summary>
 Specifies files to reference for the compilation.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.Platform">
<summary>
 Specifies the compiled artifact target platform.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.FscTarget">
<summary>
 Specifies the compiled artifact target type.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.Output">
<summary>
 Specifies the output file name and path.
</summary>
</member>
<member name="P:Fake.FscHelper.FscParams.Default">
<summary>
 The default parameters to the compiler service.
</summary>
</member>
<member name="T:Fake.FscHelper.FscParams">
<summary>
 &apos;fsc.exe&apos; command line parameters
</summary>
</member>
<member name="T:Fake.FscHelper.FscPlatform">
<summary>
 The &apos;fsc.exe&apos; output platforms
</summary>
</member>
<member name="T:Fake.FscHelper.FscTarget">
<summary>
 The &apos;fsc.exe&apos; output target types
</summary>
</member>
<member name="M:Fake.FscHelper.Compile(Microsoft.FSharp.Collections.FSharpList{Fake.FscHelper.FscParam},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles one or more F# source files with the specified parameters.
 ## Parameters

  - `setParams` - Function used to overwrite the default Fsc parameters.
  - `inputFiles` - The F# input files.

 ## Sample

     [&quot;file1.fs&quot;; &quot;file2.fs&quot;]
     |&gt; Compile [Out &quot;&quot; 
                 Target Exe
                 Platform AnyCpu
                 References []
                 Debug false 
             ]
</summary>
</member>
<member name="M:Fake.FscHelper.compile(Microsoft.FSharp.Collections.FSharpList{Fake.FscHelper.FscParam},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles the given F# source files with the specified parameters.

 ## Parameters

  - `setParams` - Function used to overwrite the default Fsc parameters.
  - `inputFiles` - The F# input files.

 ## Returns

 The exit status code of the compile process.

 ## Sample

     [&quot;file1.fs&quot;; &quot;file2.fs&quot;]
     |&gt; compile [Out &quot;&quot; 
                 Target Exe
                 Platform AnyCpu
                 References []
                 Debug false 
             ]
</summary>
</member>
<member name="M:Fake.FscHelper.compileFiles(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles the given source file with the given options. If no options
 given (i.e. the second argument is an empty list), by default tries
 to behave the same way as would the command-line &apos;fsc.exe&apos; tool.
</summary>
</member>
<member name="M:Fake.FscHelper.Fsc(Microsoft.FSharp.Core.FSharpFunc{Fake.FscHelper.FscParams,Fake.FscHelper.FscParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles one or more F# source files with the specified parameters.
 ## Parameters

  - `setParams` - Function used to overwrite the default Fsc parameters.
  - `inputFiles` - The F# input files.

 ## Sample

     [&quot;file1.fs&quot;; &quot;file2.fs&quot;]
     |&gt; Fsc (fun parameters -&gt;
                   { parameters with Output = ...
                                     FscTarget = ...
                                     ... })
</summary>
</member>
<member name="M:Fake.FscHelper.fsc(Microsoft.FSharp.Core.FSharpFunc{Fake.FscHelper.FscParams,Fake.FscHelper.FscParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles the given F# source files with the specified parameters.

 ## Parameters

  - `setParams` - Function used to overwrite the default Fsc parameters.
  - `inputFiles` - The F# input files.

 ## Returns

 The exit status code of the compile process.

 ## Sample

     [&quot;file1.fs&quot;; &quot;file2.fs&quot;]
     |&gt; fsc (fun parameters -&gt;
              { parameters with Output = ...
                                FscTarget = ...
                                ... })
</summary>
</member>
<member name="M:Fake.FscHelper.fscList(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles the given source file with the given options. If no options
 given (i.e. the second argument is an empty list), by default tries
 to behave the same way as would the command-line &apos;fsc.exe&apos; tool.
</summary>
</member>
<member name="T:Fake.FscHelper">
<summary>
 Contains tasks to compiles F# source file with the [FSharp.Compiler.Service](https://github.com/fsharp/FSharp.Compiler.Service).
 There is also a tutorial about the [F# compiler tasks](../fsc.html) available.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.OtherParams">
<summary>
 Specifies other params for the compilation. Freeform strings.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Debug">
<summary>
 Specifies whether to emit debug information (default is false).
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.References">
<summary>
 Specifies assemblies to reference for the compilation.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Platform">
<summary>
 Specifies the compiled artifact target platform.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Target">
<summary>
 Specifies the compiled artifact target type.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.ToolPath">
<summary>
 Specifies the tool path to csc.exe.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Output">
<summary>
 Specifies the output file name and path.
</summary>
</member>
<member name="P:Fake.CscHelper.CscParams.Default">
<summary>
 The default parameters to the compiler.
</summary>
</member>
<member name="T:Fake.CscHelper.CscParams">
<summary>
 Compiler parameters
</summary>
</member>
<member name="T:Fake.CscHelper.CscPlatform">
<summary>
 Supported platforms
</summary>
</member>
<member name="T:Fake.CscHelper.CscTarget">
<summary>
 Supported output types
</summary>
</member>
<member name="M:Fake.CscHelper.Csc(Microsoft.FSharp.Core.FSharpFunc{Fake.CscHelper.CscParams,Fake.CscHelper.CscParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles one or more C# source files with the specified parameters.
 ## Parameters

  - `setParams` - Function used to overwrite the default CSC parameters.
  - `inputFiles` - The C# input files.

 ## Sample

     [&quot;file1.cs&quot;; &quot;file2.cs&quot;]
     |&gt; Csc (fun parameters -&gt;
                   { parameters with Output = ...
                                     Target = ...
                                     ... })
</summary>
</member>
<member name="M:Fake.CscHelper.csc(Microsoft.FSharp.Core.FSharpFunc{Fake.CscHelper.CscParams,Fake.CscHelper.CscParams},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Compiles the given C# source files with the specified parameters.

 ## Parameters

  - `setParams` - Function used to overwrite the default CSC parameters.
  - `inputFiles` - The C# input files.

 ## Returns

 The exit status code of the compile process.

 ## Sample

     [&quot;file1.cs&quot;; &quot;file2.cs&quot;]
     |&gt; csc (fun parameters -&gt;
              { parameters with Output = ...
                                Target = ...
                                ... })
</summary>
</member>
<member name="T:Fake.CscHelper">
<summary>
 Contains tasks to compile C# source files with CSC.EXE (C# Compiler).
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.Color">
<summary>
 The background color for the message, which can be yellow, red, green, purple, gray, or random. Default value: yellow
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.Notify">
<summary>
 Whether or not this message should trigger a notification for people in the room. Default value: false
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.MessageFormat">
<summary>
 The message format, which can either be text or html. Default value: text
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.Message">
<summary>
 (Required) The message body
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.From">
<summary>
 (Required) Name the message will appear to be sent from
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.RoomId">
<summary>
 (Required) ID or name of the room to send the notification to
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationParams.AuthToken">
<summary>
 (Required) Auth token from HipChat
</summary>
</member>
<member name="T:Fake.HipChatNotificationHelper.HipChatNotificationParams">
<summary>
 The HipChat notification paramater type
</summary>
</member>
<member name="M:Fake.HipChatNotificationHelper.HipChatNotification(Microsoft.FSharp.Core.FSharpFunc{Fake.HipChatNotificationHelper.HipChatNotificationParams,Fake.HipChatNotificationHelper.HipChatNotificationParams})">
<summary>
 Sends a notification to a HipChat room
 ## Parameters
  - `setParams` - Function used to override the default notification parameters
</summary>
</member>
<member name="M:Fake.HipChatNotificationHelper.validateParams(Fake.HipChatNotificationHelper.HipChatNotificationParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.HipChatNotificationHelper.HipChatNotificationDefaults">
<summary>
 The default HipChat notification parameters
</summary>
</member>
<member name="T:Fake.HipChatNotificationHelper">
<summary>
 Contains a task to send notification messages to a [HipChat](https://www.hipchat.com/) room
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveParams.MDToolPath">
<summary>
 Path to mdtool, defaults to Xamarin Studio&apos;s usual path
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveParams.Configuration">
<summary>
 Build configuration, defaults to &apos;Debug|iPhoneSimulator&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveParams.ProjectName">
<summary>
 Project name within a solution file
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveParams.SolutionPath">
<summary>
 Path to desired solution file. If not provided, mdtool finds the first solution in the current directory.
 Although mdtool can take a project file, the archiving seems to fail to work without a solution.
</summary>
</member>
<member name="T:Fake.XamarinHelper.iOSArchiveParams">
<summary>
 The iOS archive paramater type
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.ZipalignPath">
<summary>
 Path to zipalign tool, defaults to assuming it is in your path
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.JarsignerPath">
<summary>
 Path to jarsigner tool, defaults to assuming it is in your path
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.MessageDigestAlgorithm">
<summary>
 Specifies the name of the message digest algorithm to use when digesting the entries of a JAR file. 
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.SignatureAlgorithm">
<summary>
 Specifies the name of the signature algorithm to use to sign the JAR file.
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.KeystoreAlias">
<summary>
 (Required) Alias for keystore
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.KeystorePassword">
<summary>
 (Required) Password for keystore
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignParams.KeystorePath">
<summary>
 (Required) Path to keystore used to sign the app
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.VersionStepper">
<summary>
 Used for multiple APK packaging to set different version code par ABI
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.PackageAbiTargets">
<summary>
 Build an APK Targetting One ABI (used to reduce the size of the APK and support different CPU architectures)
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.Properties">
<summary>
 Additional MSBuild properties, defaults to empty list
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.OutputPath">
<summary>
 Output path for build, defaults to &apos;bin/Release&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.Configuration">
<summary>
 Build configuration, defaults to &apos;Release&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageParams.ProjectPath">
<summary>
 (Required) Path to the Android project file (not the solution file!)
</summary>
</member>
<member name="T:Fake.XamarinHelper.AndroidPackageParams">
<summary>
 The Android packaging parameter type
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.Properties">
<summary>
 Additional MSBuild properties, defaults to empty list
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.BuildIpa">
<summary>
 Indicates if an IPA file should be generated
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.OutputPath">
<summary>
 Output path for build, defaults to project settings
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.Platform">
<summary>
 Build platform, defaults to &apos;iPhoneSimulator&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.Configuration">
<summary>
 Build configuration, defaults to &apos;Debug&apos;
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.Target">
<summary>
 Build target, defaults to Build
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildParams.ProjectPath">
<summary>
 (Required) Path to solution or project file
</summary>
</member>
<member name="T:Fake.XamarinHelper.iOSBuildParams">
<summary>
 The iOS build paramater type
</summary>
</member>
<member name="P:Fake.XamarinHelper.XamarinComponentRestoreParams.ToolPath">
<summary>
 Path to xamarin-component.exe, defaults to checking tools/xpkg
</summary>
</member>
<member name="T:Fake.XamarinHelper.XamarinComponentRestoreParams">
<summary>
 The package restore paramater type
</summary>
</member>
<member name="M:Fake.XamarinHelper.iOSArchive(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.iOSArchiveParams,Fake.XamarinHelper.iOSArchiveParams})">
<summary>
 Archive a project using Xamarin&apos;s iOS archive tools
 ## Parameters
  - `setParams` - Function used to override the default archive parameters
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSArchiveDefaults">
<summary>
 The default iOS archive parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.AndroidSignAndAlignPackages(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.AndroidSignAndAlignParams,Fake.XamarinHelper.AndroidSignAndAlignParams},System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Signs and aligns multiple Xamarin.Android packages, returning multiple FileInfo objects for the signed APK file
 ## Parameters
  - `setParams` - Function used to override the default build parameters
  - `apkFiles` - FileInfo object for an unsigned APK file to sign and align
</summary>
</member>
<member name="M:Fake.XamarinHelper.AndroidSignAndAlign(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.AndroidSignAndAlignParams,Fake.XamarinHelper.AndroidSignAndAlignParams},System.IO.FileInfo)">
<summary>
 Signs and aligns a Xamarin.Android package, returning a FileInfo object for the signed APK file
 ## Parameters
  - `setParams` - Function used to override the default build parameters
  - `apkFile` - FileInfo object for an unsigned APK file to sign and align
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidSignAndAlignDefaults">
<summary>
 The default Android signing and aligning parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.AndroidPackage(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.AndroidPackageParams,Fake.XamarinHelper.AndroidPackageParams})">
<summary>
 Packages a Xamarin.Android app, returning a FileInfo object for the unsigned APK file
 ## Parameters
  - `setParams` - Function used to override the default build parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.AndroidBuildPackages(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.AndroidPackageParams,Fake.XamarinHelper.AndroidPackageParams})">
<summary>
 Packages a Xamarin.Android app, returning a multiple FileInfo objects for the unsigned APK files
 ## Parameters
  - `setParams` - Function used to override the default build parameters
</summary>
</member>
<member name="P:Fake.XamarinHelper.AndroidPackageDefaults">
<summary>
 The default Android packaging parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.iOSBuild(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.iOSBuildParams,Fake.XamarinHelper.iOSBuildParams})">
<summary>
 Builds a project or solution using Xamarin&apos;s iOS build tools
 ## Parameters
  - `setParams` - Function used to override the default build parameters
</summary>
</member>
<member name="P:Fake.XamarinHelper.iOSBuildDefaults">
<summary>
 The default iOS build parameters
</summary>
</member>
<member name="M:Fake.XamarinHelper.RestoreComponents(Microsoft.FSharp.Core.FSharpFunc{Fake.XamarinHelper.XamarinComponentRestoreParams,Fake.XamarinHelper.XamarinComponentRestoreParams},System.String)">
<summary>
 Restores NuGet packages and Xamarin Components for a project or solution
 ## Parameters
  - `setParams` - Function used to override the default package restore parameters
</summary>
</member>
<member name="P:Fake.XamarinHelper.XamarinComponentRestoreDefaults">
<summary>
 The default package restore parameters
</summary>
</member>
<member name="T:Fake.XamarinHelper">
<summary>
 Contains tasks for building Xamarin.iOS and Xamarin.Android apps
</summary>
</member>
<member name="T:Fake.XDTHelper.FakeXmlTransformationLogger">
<summary>
 Integrates XDT logging into FAKE logging.
</summary>
</member>
<member name="M:Fake.XDTHelper.TransformFilesWithConfigName(System.String,Fake.FileSystem.FileIncludes)">
<summary>
 Modifies XML files in place using an XDT file named by inserting a .configName in between each filename and .extension.
</summary>
</member>
<member name="M:Fake.XDTHelper.TransformFileWithConfigName(System.String,System.String)">
<summary>
 Modifies an XML file in place using an XDT file named by inserting a .configName in between the filename and .extension.
</summary>
</member>
<member name="M:Fake.XDTHelper.TransformFile(System.String,System.String,System.String)">
<summary>
 Reads XML file (typically a config file), makes changes according to XDT transform syntax, saves result.
</summary>
</member>
<member name="T:Fake.XDTHelper">
<summary>
 Contains functions used to transform config (or any XML) files using Microsoft&apos;s XML Document Transformations.
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.VersionId">
<summary>
 When uploading a build, specify to which version (hockeyapp version id)
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.AppId">
<summary>
 Set to your App Id (required for UWP apps targeting windows phone)
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.UploadTimeout">
<summary>
 Set maximum upload delay
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.Teams">
<summary>
 Restrict download to specific teams
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.DownloadStatus">
<summary>
 Release download status (can only be set with full-access tokens)
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.RepositoryUrl">
<summary>
 Set to your source repository
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.BuildServerUrl">
<summary>
 Set to the URL of the build job on your build server
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.CommitSHA">
<summary>
 Set to the git commit sha for this build
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.Private">
<summary>
 Set to true to enable the private download page (default is false)
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.Mandatory">
<summary>
 Set version as mandatory
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.Notify">
<summary>
 Set the notify option
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.OwnerId">
<summary>
 Set the owner of the app
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.ReleaseType">
<summary>
 Set the release type of the app
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.NotesType">
<summary>
 Release notes type for the build
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.Notes">
<summary>
 Release notes for the build
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.Dsym">
<summary>
 file data for dsym (IOS: *.dysm.zip or Android: mapping.txt)
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.File">
<summary>
 (Required) file data for the build (.ipa or .apk)
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadParams.ApiToken">
<summary>
 (Required) API token
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.HockeyAppUploadParams">
<summary>
 The HockeyApp parameter type
 Based on http://support.hockeyapp.net/kb/api/api-apps#upload-app
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppVersionParams.UploadTimeout">
<summary>
 Set maximum upload delay
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppVersionParams.Version">
<summary>
 Human readable version
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppVersionParams.AppId">
<summary>
 Set to your App Id (required for UWP apps targeting windows phone)
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppVersionParams.ApiToken">
<summary>
 (Required) API token
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.HockeyAppVersionParams">
<summary>
 The HockeyAppVersion parameter type
 Based on https://support.hockeyapp.net/kb/api/api-versions#create-version
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.BaseHockeyAppParams.UploadTimeout">
<summary>
 Set maximum upload delay
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.BaseHockeyAppParams.AppId">
<summary>
 Set to your App Id (required for UWP apps targeting windows phone)
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.BaseHockeyAppParams.ApiToken">
<summary>
 (Required) API token
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.HockeyVersionResponse">
<summary>
 HockeyAppVersion&apos;s success response
 https://support.hockeyapp.net/kb/api/api-versions#create-version
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.HockeyResponse">
<summary>
 HockeyApp&apos;s success response
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.DownloadStatusOption">
<summary>
 The release download status
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.MandatoryOption">
<summary>
 The mandatory options
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.NoteType">
<summary>
 The note types
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.NotifyOption">
<summary>
 The notification options
</summary>
</member>
<member name="T:Fake.HockeyAppHelper.ReleaseType">
<summary>
 The release type of the app
</summary>
</member>
<member name="M:Fake.HockeyAppHelper.HockeyAppVersion(Microsoft.FSharp.Core.FSharpFunc{Fake.HockeyAppHelper.HockeyAppVersionParams,Fake.HockeyAppHelper.HockeyAppVersionParams})">
<summary>
 Create a new version of an app on HockeyApp
 ## Parameters
  - `setParams` - Function used to override the default parameters

 ## Sample

     HockeyAppVersions (fun defaults -&gt;
         {defaults with
             AppId = ...
             ApiToken = ...
             Version = ...
             ...
         })
</summary>
</member>
<member name="M:Fake.HockeyAppHelper.HockeyApp(Microsoft.FSharp.Core.FSharpFunc{Fake.HockeyAppHelper.HockeyAppUploadParams,Fake.HockeyAppHelper.HockeyAppUploadParams})">
<summary>
 Uploads an app to HockeyApp
 ## Parameters
  - `setParams` - Function used to override the default parameters

 ## Sample

     HockeyApp (fun defaults -&gt;
         {defaults with
             AppId = ...
             ApiToken = ...
             ...
         })
</summary>
</member>
<member name="M:Fake.HockeyAppHelper.processHockeyAppCmd``2(``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0},Microsoft.FSharp.Core.FSharpFunc{``0,``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Collections.Generic.IEnumerable{System.String}})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.HockeyAppHelper.toVersionCurlArgs(Fake.HockeyAppHelper.HockeyAppVersionParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.HockeyAppHelper.toCurlArgs(Fake.HockeyAppHelper.HockeyAppUploadParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.HockeyAppHelper.validateVersionParams(Fake.HockeyAppHelper.HockeyAppVersionParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.HockeyAppHelper.validateParams(Fake.HockeyAppHelper.HockeyAppUploadParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.nl">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppVersionDefaults">
<summary>
 The default HockeyAppVersion parameters to create a version
</summary>
</member>
<member name="P:Fake.HockeyAppHelper.HockeyAppUploadDefaults">
<summary>
 The default HockeyApp parameters to upload a build
</summary>
</member>
<member name="T:Fake.HockeyAppHelper">
<summary>
 Contains tasks to interact with [HockeyApp](http://hockeyapp.com)
</summary>
</member>
<member name="T:Fake.SxsHelper.ILparsingResult.Failed">
<summary>
 Failed to find all reguired data
 Includes an error message
</summary>
</member>
<member name="T:Fake.SxsHelper.ILparsingResult.Success">
<summary>
 Found all required data
 Includes structured assembly data
</summary>
</member>
<member name="T:Fake.SxsHelper.ILparsingResult">
<summary>
 Represents status of attempted parsing
 of IL file created from executing `ildasm.exe`
 on a binary
</summary>
</member>
<member name="P:Fake.SxsHelper.InteropApplicationData.Dependencies">
<summary>
 Dependent `.NET` assemblies of the executable
</summary>
</member>
<member name="P:Fake.SxsHelper.InteropApplicationData.Version">
<summary>
 Version of the executable
</summary>
</member>
<member name="P:Fake.SxsHelper.InteropApplicationData.ExecutablePath">
<summary>
 Path of the executable binary file
</summary>
</member>
<member name="T:Fake.SxsHelper.InteropApplicationData">
<summary>
 Represents an executable to create an _application manifest_ for
</summary>
</member>
<member name="P:Fake.SxsHelper.InteropAssemblyData.Guid">
<summary>
 Guid from the `System.Runtime.Interopservice.GuidAttribute` of the assembly
</summary>
</member>
<member name="P:Fake.SxsHelper.InteropAssemblyData.Version">
<summary>
 Assembly version
</summary>
</member>
<member name="P:Fake.SxsHelper.InteropAssemblyData.Path">
<summary>
 Path to the assembly file
</summary>
</member>
<member name="P:Fake.SxsHelper.InteropAssemblyData.Name">
<summary>
 Assembly name
</summary>
</member>
<member name="T:Fake.SxsHelper.InteropAssemblyData">
<summary>
 Represents a `.NET` assembly that may be used in COM interop projects
</summary>
</member>
<member name="M:Fake.SxsHelper.AddEmbeddedApplicationManifest(System.String,System.Collections.Generic.IEnumerable{Fake.SxsHelper.InteropApplicationData})">
<summary>
 Creates and adds _application interop side-by-side manifests_ to provided executables

 ## Parameters
  - `workingdir` - somewhere to put any temporary files
  - `applications` - Metadata about executables to create manifests for.
</summary>
</member>
<member name="M:Fake.SxsHelper.GetInteropAssemblyData(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Gets `name`, `path&apos;, `version` and interop `Guid` for those of the provided assemblies that have 
 all of the required information.

 ## Parameters
  - `workingDir` - Somewhere to put temporary files
  - `assemblies` - assemblies to get data from

 ## Purpose
 
 In order to create _application_ interop side-by-side manifests we need to know some metadata
 about the assemblies that may be referenced from COM executables.
 For the manifest we need the _assembly version_ and _ assembly name_. And in addition to that
 the interop _guid_ is collected so we can determine if the assembly is referenced by _vb6 projects_

 ## Process

 This function is a _hack_. To avoid using reflection and loading all potential assemblies into the
 appdomain (with all the possible problems that may cause). I wanted to get this metadata by other means.
 I ended up using the windows sdk dissasembler `ildasm.exe` (ref: https://msdn.microsoft.com/en-us/library/f7dy01k1(v=vs.110).aspx)
 to create the smallest dissasembly I could (Really only need the manifest part), and the parse the IL file to get the metadata
 (If anyone knows a cleaner / better way, pls improve on the code)
</summary>
</member>
<member name="M:Fake.SxsHelper.AddEmbeddedAssemblyManifest(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Created and embeds assembly Side-by-side interop manifests for provided assemblies
 
 ## Parameters
  - `workingDir` - somewhere to put any temp files created
  - `assemblies` - .net assemblies to create manifests for

 ## Process

 This function will use `mt.exe` (ref: https://msdn.microsoft.com/en-us/library/aa375649(v=vs.85).aspx)
 to create a manifest for each assembly. This created manifest is unfortunately _not_ a valid 
 interop Side-by-Side manifest, but it has the important `clrClass` elements, + `version` and `name`info that would be the most
 difficult to create through other means.
 The important info is then put into a valid base manifest and embedded into the assembly as a resource.
</summary>
</member>
<member name="M:Fake.SxsHelper.embedManiFestAsync(System.String,Microsoft.FSharp.Control.FSharpAsync{System.Tuple{System.String,System.String}})">
<summary>
 Embeds a manifest file in a binary using `mt.exe`
</summary>
</member>
<member name="M:Fake.SxsHelper.xn(System.String)">
<summary>
 create XName from string __without__ manifest namespace
</summary>
</member>
<member name="M:Fake.SxsHelper.nsXn(System.String)">
<summary>
 create XName from string with manifest namepace
</summary>
</member>
<member name="P:Fake.SxsHelper.manifestNamespace">
<summary>
 XLM namespace of manifest files
</summary>
</member>
<member name="P:Fake.SxsHelper.ildasmPath">
<summary>
 Path to `ildasm.exe
 .net fx dissasembly tool
 ref: https://msdn.microsoft.com/en-us/library/f7dy01k1(v=vs.110).aspx
</summary>
</member>
<member name="P:Fake.SxsHelper.mtToolPath">
<summary>
 Path to `mt.exe`
 ref: https://msdn.microsoft.com/en-us/library/aa375649(v=vs.85).aspx
</summary>
</member>
<member name="T:Fake.SxsHelper">
<summary>
 Module that enables creating and embedding Side-by-Side interop
 manifests for registration free deployment of Com-.net interop projects
</summary>
</member>
<member name="P:Fake.Vb6Helper.Vb6Project.References">
<summary>
 All references and components used
 in this VBV6 project
</summary>
</member>
<member name="P:Fake.Vb6Helper.Vb6Project.Version">
<summary>
 Version of the project
 in Major.Minor.Revision.Patch format
</summary>
</member>
<member name="P:Fake.Vb6Helper.Vb6Project.BinaryName">
<summary>
 Name of binary that will
 be generated from this project
</summary>
</member>
<member name="P:Fake.Vb6Helper.Vb6Project.ProjectFile">
<summary>
 Path to the Propject file representing 
 Representing this project
</summary>
</member>
<member name="T:Fake.Vb6Helper.Vb6Project">
<summary>
 Represents a VB6 project
</summary>
</member>
<member name="T:Fake.Vb6Helper.Vb6Reference">
<summary>
 Represents a VB6 Reference
</summary>
</member>
<member name="T:Fake.Vb6Helper.Vb6ReferenceVersion">
<summary>
 Represents the version of a VB6 reference
 References from VB6 projects only care about Major.Minor versions
</summary>
</member>
<member name="T:Fake.Vb6Helper.Vb6Version">
<summary>
 Represents the version of a VB6 project
 `ToString ()` will return a Maj.Min.Rev.Patch version string
</summary>
</member>
<member name="P:Fake.Vb6Helper.Vb6BuildParams.Timeout">
<summary>
 Maximum amount of time the entire build is allowed to take
</summary>
</member>
<member name="P:Fake.Vb6Helper.Vb6BuildParams.Logdir">
<summary>
 Directory to put logs and other temporary files
 created during the build process
</summary>
</member>
<member name="P:Fake.Vb6Helper.Vb6BuildParams.Outdir">
<summary>
 Directory to put generated binaries 
</summary>
</member>
<member name="P:Fake.Vb6Helper.Vb6BuildParams.Toolpath">
<summary>
 Path to the VB6 executable
</summary>
</member>
<member name="T:Fake.Vb6Helper.Vb6BuildParams">
<summary>
 Parameters for running a VB6 build
</summary>
</member>
<member name="M:Fake.Vb6Helper.UpdateDependencyVersions(Microsoft.FSharp.Core.FSharpFunc{Fake.Vb6Helper.Vb6BuildParams,Fake.Vb6Helper.Vb6BuildParams},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Fixes dependency versions in VB6 project files 

 ## Paramteters
  - `getConfig`- function to alter default VB6 build parameters
  - `vb6Projects` - Paths to all `.vbp` to update references in
  - `possibleAssemblies` - Paths to assemblies that may be referenced by the VB6 projects

 Running this task will:

 1. In all VB6 projects provided: Get all references that intersects with the provided assemblies arg
 2. Check if there is a version difference
 3. Update the VB6 project file to reflect the actual version used.

 Note: Vb6 Reference versions are __hex numbers__ not decimals like .net verions. This task handles
       this difference automatically.
</summary>
</member>
<member name="M:Fake.Vb6Helper.BuildAndEmbedInteropManifests(Microsoft.FSharp.Core.FSharpFunc{Fake.Vb6Helper.Vb6BuildParams,Fake.Vb6Helper.Vb6BuildParams},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 All-In-one build and manifest function for VB6 __applications__ referencing .net __libraries__

 ## Paramteters
  - `getConfig`- function to alter default VB6 build parameters
  - `vb6Projects` - Paths to all `.vbp` files to build
  - `possibleAssemblies` - Paths to assemblies that may be referenced by the VB6 projects

 ## Process

 This function will:

 1. Determine which of the `possibleAssemnblies` are referenced by any of the provided `.vbp` files
 2. Temporarily register any referenced assemblies using `RegAsm /codebase /tlb`
 3. Run VB6 command line make on all provided `.vbp` projects
 4. Unregister all registered assemblies
 5. Generate and embed Side-By-Side interop appplication manifests in all generated VB6 executables
 6. Generate and embed Side-By-Side interop assembly manifest in all referenced assemblies 
</summary>
</member>
<member name="M:Fake.Vb6Helper.UnRegisterDependenciesForDevelopment(Microsoft.FSharp.Core.FSharpFunc{Fake.Vb6Helper.Vb6BuildParams,Fake.Vb6Helper.Vb6BuildParams},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Determins which of the provided assemblies are referenced by the 
 provided VB6 projects, and __un-registers__ them

 ## Paramteters
  - `getConfig`- function to alter default VB6 build parameters
  - `vb6Projects` - Paths to all `.vbp` files to build
  - `possibleAssemblies` - Paths to assemblies that may be referenced by the VB6 projects
</summary>
</member>
<member name="M:Fake.Vb6Helper.RegisterDependenciesForDevelopment(Microsoft.FSharp.Core.FSharpFunc{Fake.Vb6Helper.Vb6BuildParams,Fake.Vb6Helper.Vb6BuildParams},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Determines which of the provided assemblies are referenced by the
 provided VB6 projects, and registers them so the VB6 ide can
 find them.

 ## Paramteters
  - `getConfig`- function to alter default VB6 build parameters
  - `vb6Projects` - Paths to all `.vbp` files to build
  - `possibleAssemblies` - Paths to assemblies that may be referenced by the VB6 projects
</summary>
</member>
<member name="M:Fake.Vb6Helper.GetVb6ApplicationProjDetails(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Returns application details for provided `.vbp` files.
 
 ## Information returned
  - Name of created binary file
  - Version as saved in `.vbp`file
  - GUIDs of all referenced libraries and components

 ## Usage
 
 This is used for creating Side-By-Side interop manifests.
</summary>
</member>
<member name="M:Fake.Vb6Helper.Vb6Make(Microsoft.FSharp.Core.FSharpFunc{Fake.Vb6Helper.Vb6BuildParams,Fake.Vb6Helper.Vb6BuildParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Executes a VB6 command line make on all provided VB6 projects

 Builds will be executed in paralell

 ## Parameters
  - `getConfig` - function to modify the build params record from default values
  - `vb6Projects`- `Seq` of paths to `.vbp` files to build
</summary>
</member>
<member name="M:Fake.Vb6Helper.readProjectFileLines(System.String)">
<summary>
 Helper methods for working with Vb6 project files 
</summary>
</member>
<member name="T:Fake.Vb6Helper">
<summary>
 Enables building of Visual Basic 6 projects
 Also includes a do-it-all function that will embed interop
 side-by-side manifest to executables from Vb6 using
 functions from the Side-by-side helper module
</summary>
</member>
<member name="M:Fake.ChangeWatcher.WatchChangesWithOptions(Fake.ChangeWatcher.WatchChangesOption,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{Fake.ChangeWatcher.FileChange},Microsoft.FSharp.Core.Unit},Fake.FileSystem.FileIncludes)">
<summary>
 Watches the for changes in the matching files.
 Returns an IDisposable which allows to dispose all FileSystemWatchers.

 ## Parameters
  - `onChange` - function to call when a change is detected.
  - `fileIncludes` - The glob pattern for files to watch for changes.

 ## Sample

     Target &quot;Watch&quot; (fun _ -&gt;
         use watcher = !! &quot;c:/projects/watchDir/*.txt&quot; |&gt; WatchChanges (fun changes -&gt;
             // do something
         )

         System.Console.ReadLine() |&gt; ignore

         watcher.Dispose() // if you need to cleanup the watches.
     )

</summary>
</member>
<member name="T:Fake.ChangeWatcher">
<summary>
 This module contains helpers to react to file system events.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeBuildParams.AdditionalArgs">
<summary>
 A character string containing additional arguments to give to CMake.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeBuildParams.Timeout">
<summary>
 The CMake execution timeout.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeBuildParams.Config">
<summary>
 The build configuration to use (e.g. `Release`).
 Equivalent to the `--config &lt;cfg&gt;` option.
 Not supported by every generator.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeBuildParams.Target">
<summary>
 The CMake target to build instead of the default one.
 Equivalent to the `--target &lt;target&gt;` option.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeBuildParams.BinaryDirectory">
<summary>
 The binary build directory where CMake will generate the files.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeBuildParams.ToolPath">
<summary>
 The location of the CMake executable. Automatically found if null or empty.
</summary>
</member>
<member name="T:Fake.CMakeSupport.CMakeBuildParams">
<summary>
 The CMakeBuild parameter type.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.AdditionalArgs">
<summary>
 A character string containing additional arguments to give to CMake.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.Timeout">
<summary>
 The CMake execution timeout.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.CacheEntriesToRemove">
<summary>
 Remove matching entries from CMake cache.
 Equivalent to the `-U &lt;globbing_expr&gt;` options.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.Variables">
<summary>
 A list of every variable to pass as a CMake argument.
 Equivalent to the `-D &lt;var&gt;:&lt;type&gt;=&lt;value&gt;` options.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.InstallDirectory">
<summary>
 The directory where CMake will install the generated files.
 Equivalent to the `-D CMAKE_INSTALL_PREFIX:DIRPATH=&quot;&lt;install-directory&gt;&quot;` CMake option.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.Caches">
<summary>
 A list of the optional CMake cache files to load.
 Equivalent to the `-C &lt;initial-cache&gt;` options.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.Platform">
<summary>
 An optional CMake platform.
 Equivalent to the `-A &lt;platform-name&gt;` option.
 Not supported by every generator.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.Toolset">
<summary>
 An optional toolset (!= toolchain) to use.
 Equivalent to the `-T &lt;toolset-name&gt;` option.
 Not supported by every generator.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.Generator">
<summary>
 The native build system generator to use for writing the files.
 See `cmake --help` for a list of the available entries.
 *To avoid unpredictable generator usage, it is recommended to define it.*
 Equivalent to the `-G &lt;generator-name&gt;` option.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.Toolchain">
<summary>
 An optional toolchain file to load.
 Equivalent to the `-D CMAKE_TOOLCHAIN_FILE:FILEPATH=&quot;&lt;toolchain-file&gt;&quot;` CMake option.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.BinaryDirectory">
<summary>
 The binary build directory where CMake will generate the files.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.SourceDirectory">
<summary>
 The source directory which should include a `CMakeLists.txt` file.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeGenerateParams.ToolPath">
<summary>
 The location of the CMake executable. Automatically found if null or empty.
</summary>
</member>
<member name="T:Fake.CMakeSupport.CMakeGenerateParams">
<summary>
 The CMakeGenerate parameter type.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeVariable.Value">
<summary>
 The value of the variable.
 Will be automatically converted to the CMake format when required.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMakeVariable.Name">
<summary>
 The name of the variable.
 It cannot contains spaces and special characters.
</summary>
</member>
<member name="T:Fake.CMakeSupport.CMakeVariable">
<summary>
 A CMake variable.
</summary>
</member>
<member name="T:Fake.CMakeSupport.CMakeValue">
<summary>
 The possible variable value types for CMake variables.
</summary>
</member>
<member name="M:Fake.CMakeSupport.CMake.Build(Microsoft.FSharp.Core.FSharpFunc{Fake.CMakeSupport.CMakeBuildParams,Fake.CMakeSupport.CMakeBuildParams})">
<summary>
 Calls `cmake --build` to build a project.
 ## Parameters
  - `setParams` - Function used to manipulate the default CMake parameters. See `CMakeBuildParams`.
</summary>
</member>
<member name="M:Fake.CMakeSupport.CMake.Generate(Microsoft.FSharp.Core.FSharpFunc{Fake.CMakeSupport.CMakeGenerateParams,Fake.CMakeSupport.CMakeGenerateParams})">
<summary>
 Calls `cmake` to generate a project.
 ## Parameters
  - `setParams` - Function used to manipulate the default CMake parameters. See `CMakeGenerateParams`.
</summary>
</member>
<member name="M:Fake.CMakeSupport.CMake.CallCMake(System.String,System.String,System.String,System.TimeSpan)">
<summary>
 [omit]
 Invokes the CMake executable with the specified arguments.
 ## Parameters
  - `toolPath` - The location of the executable. Automatically found if null or empty.
  - `binaryDir` - The location of the binary directory.
  - `args` - The arguments given to the executable.
  - `timeout` - The CMake execution timeout
</summary>
</member>
<member name="M:Fake.CMakeSupport.CMake.FormatCMakePath(System.String)">
<summary>
 [omit]
 Converts a file path to a valid CMake format.
 ## Parameters
  - `path` - The path to reformat.
</summary>
</member>
<member name="M:Fake.CMakeSupport.CMake.FindExe(System.String)">
<summary>
 [omit]
 Tries to find the specified CMake executable:

 1. Locally in `./&lt;tools|packages&gt;/&lt;cmake.portable&gt;|&lt;cmake&gt;/bin`
 3. In the `PATH` environment variable.
 4. In the `&lt;ProgramFilesx86&gt;\CMake\bin` directory.
 ## Parameters
  - `exeName` - The name of the CMake executable (e.g. `cmake`, `ctest`, etc.) to find.
    The `.exe` suffix will be automatically appended on Windows.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMake.CMakeBuildDefaults">
<summary>
 The default option set given to CMakeBuild.
</summary>
</member>
<member name="P:Fake.CMakeSupport.CMake.CMakeGenerateDefaults">
<summary>
 The default option set given to CMakeGenerate.
</summary>
</member>
<member name="T:Fake.CMakeSupport.CMake">
<summary>
 Contains tasks which allow to use CMake to build CMakeLists files.
 See `Samples/CMakeSupport` for usage examples.
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.Variables">
<summary>
 SQLCMD variables
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.AdditionalSqlPackageProperties">
<summary>
 Additional configuration parameters required by sqlpackage.exe
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.RecreateDb">
<summary>
 Recreates the database from scratch on publish (rather than an in-place update). Defaults to false.
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.DropObjectsNotInSource">
<summary>
 Drops objects in the destination that do not exist in the source. Defaults to false.
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.BlockOnPossibleDataLoss">
<summary>
 Block deployment if data loss can occur. Defaults to true.
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.Timeout">
<summary>
 Timeout for deploy (defaults to 120 seconds).
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.Destination">
<summary>
 Path to destination (path to DACPAC or Connection String).
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.Source">
<summary>
 Path to source (path to DACPAC or Connection String).
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.Action">
<summary>
 Type of action to execute. Defaults to Deploy.
</summary>
</member>
<member name="P:Fake.Sql.DacPac.DeployDbArgs.SqlPackageToolPath">
<summary>
 The path to SqlPackage.exe.
</summary>
</member>
<member name="T:Fake.Sql.DacPac.DeployDbArgs">
<summary>
 Configuration arguments for DacPac deploy
</summary>
</member>
<member name="T:Fake.Sql.DacPac.DeployAction.Report">
<summary>
 Generate an XML report for the differences between two databases.
</summary>
</member>
<member name="T:Fake.Sql.DacPac.DeployAction.Script">
<summary>
 Generate a SQL script to sync two databases.
</summary>
</member>
<member name="T:Fake.Sql.DacPac.DeployAction.Deploy">
<summary>
 Generate and apply a synchronisation script between two databases.
</summary>
</member>
<member name="T:Fake.Sql.DacPac.DeployAction">
<summary>
 The type of action to execute.
</summary>
</member>
<member name="M:Fake.Sql.DacPac.deployDb(Microsoft.FSharp.Core.FSharpFunc{Fake.Sql.DacPac.DeployDbArgs,Fake.Sql.DacPac.DeployDbArgs})">
<summary>
 Deploys a SQL DacPac or database to another database or DacPac.
</summary>
</member>
<member name="P:Fake.Sql.DacPac.defaultDeploymentArgs">
<summary>
 The default DacPac deployment arguments.
</summary>
</member>
<member name="P:Fake.Sql.DacPac.PropertyKeys.sqlAzureDbSize">
<summary>
 When creating a new SQL Azure database, specifies the database service tier to use e.g. S2, P1
</summary>
</member>
<member name="T:Fake.Sql.DacPac">
<summary>
 Contains helpers around deploying databases.
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunConnectionSettings.externalToken">
<summary>
 Raygun user access token for allowing API
 access. (Creatd under User -&gt; My settings in the web application)
 Required, no sensible default
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunConnectionSettings.endPoint">
<summary>
 Endpoint to connect to
 Required, Defaults to: https://app.raygun.io/deployments
</summary>
</member>
<member name="T:Fake.RaygunHelper.RaygunConnectionSettings">
<summary>
 Connection configuration
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunDeploymentData.createdAt">
<summary>
 Datetime of the deployment
 Optional, Defaults to System.DateTime.UtcNow
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunDeploymentData.scmIdentifier">
<summary>
 Hash code (or other commit identifier) from
 source control system
 Optional, Defaults to current git hash if executed from a git repository
           else defaults to empty string
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunDeploymentData.comment">
<summary>
 Release notes
 Optional, defaults to empty string
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunDeploymentData.emailAddress">
<summary>
 Email address of person responsible for deployment
 Optional, defaults to empty string
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunDeploymentData.ownerName">
<summary>
 Name of person responsible for deployment
 Optional, defaults to empty string
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunDeploymentData.version">
<summary>
 Version string describing deployed version
 Should be the same as reported by the application
 to raygun when posting an error
 Required, no sensible default
</summary>
</member>
<member name="P:Fake.RaygunHelper.RaygunDeploymentData.apiKey">
<summary>
 Application API key
 Required, no sensible default
</summary>
</member>
<member name="T:Fake.RaygunHelper.RaygunDeploymentData">
<summary>
 Data describing a deployment to Raygun
</summary>
</member>
<member name="M:Fake.RaygunHelper.ReportDeployment(Microsoft.FSharp.Core.FSharpFunc{Fake.RaygunHelper.RaygunConnectionSettings,Fake.RaygunHelper.RaygunConnectionSettings},Microsoft.FSharp.Core.FSharpFunc{Fake.RaygunHelper.RaygunDeploymentData,Fake.RaygunHelper.RaygunDeploymentData})">
<summary>
 ### Report a deployment to raygun

 Reports a deployment to raygun so reported errors can be
 correlated with deployments

 ### Paramteres

 * settings : Function that sets the raygun connection settings.
 * data : Function that sets the deployment data
</summary>
</member>
<member name="T:Fake.RaygunHelper">
<summary>
 Enables deployment tracking using Raygun.io

 Thin wrapper around [the Raygun HTTP deployment API](https://raygun.io/docs/deployments/api)
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.SigningSecret">
<summary>
 The secret key for the code signing certificate
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.SigningKeyFile">
<summary>
 The code signing certificate to be used for signing
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.SignExecutable">
<summary>
 Sign the installer with signtool.exe
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.TimeOut">
<summary>
 Maximum time to allow Squirrel to run before being killed.
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.ToolPath">
<summary>
 The path to Squirrel: `squirrel.exe`
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.NoMsi">
<summary>
 Do not create an MSI file
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.SetupIcon">
<summary>
 The full path to an optional icon, which will be used for the generated installer.
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.LoadingGif">
<summary>
 The full path to an optional animated gif to be displayed during installation
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.BootstrapperExe">
<summary>
 The full path to an optional setup.exe template
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.WorkingDir">
<summary>
 The working directory.
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelParams.ReleaseDir">
<summary>
 The output directory for the generated installer
</summary>
</member>
<member name="T:Fake.Squirrel.SquirrelParams">
<summary>
 The [Squirrel](https://github.com/Squirrel/Squirrel.Windows) Console Parameters type.
 FAKE will use [SquirrelDefaults](fake-squirrel.html) for values not provided.

 For reference, see: [Squirrel Command Line Options](https://github.com/Squirrel/Squirrel.Windows/blob/master/docs/advanced-releasify.md)
</summary>
</member>
<member name="M:Fake.Squirrel.SquirrelPack(Microsoft.FSharp.Core.FSharpFunc{Fake.Squirrel.SquirrelParams,Fake.Squirrel.SquirrelParams},System.String)">
<summary>
 Creates a Squirrel installer for given NuGet package
 Will fail if Squirrel terminates with non-zero exit code.

 ## Parameters

  - `setParams` - Function used to manipulate the default `SquirrelParams` value.
  - `nugetPackage` - The package to create an installer for

 ## Sample usage

     Target &quot;CreatePackage&quot; (fun _ -&gt;
         SquirrelPack (fun p -&gt; { p with WorkingDir = Some &quot;./tmp&quot; }) &quot;./my.nupkg&quot;
     )
</summary>
</member>
<member name="P:Fake.Squirrel.SquirrelDefaults">
<summary>
 The Squirrel default parameters.

 ## Defaults

 - `ReleaseDir` - `&quot;&quot;`
 - `WorkingDir` - `None`
 - `BootstrapperExe` - `None`
 - `LoadingGif` - `None`
 - `SetupIcon` - `None`
 - `NoMsi` - `false`
 - `ToolPath` - The `squirrel.exe` path if it exists in a subdirectory of the current directory.
 - `TimeOut` - 10 minutes
 - `SignExecutable` - `None`
 - `SigningKeyFile` - `None`
 - `SigningSecret` - `None`
</summary>
</member>
<member name="T:Fake.Squirrel">
<summary>
 Contains types and utility functions related to creating [Squirrel](https://github.com/Squirrel/Squirrel.Windows) installer.
</summary>
</member>
<member name="M:Fake.XCopyHelper.XCopy(System.String,System.String)">
<summary>
 Executes a XCopy command
 ## Parameters
  - `source` - The source directory
  - `destination` - The target directory
</summary>
</member>
<member name="T:Fake.XCopyHelper">
<summary>
 Contains a task to use [XCOPY](http://en.wikipedia.org/wiki/XCOPY) on Windows.
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.SolutionPackagerParams.Folder">
<summary>
 Folder for output of calls
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.SolutionPackagerParams.TimeOut">
<summary>
 Timeout for calls
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.SolutionPackagerParams.WorkingDirectory">
<summary>
 Working Directory for calls
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.SolutionPackagerParams.ToolDirectory">
<summary>
 Directory where SolutionPackager can be found
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.SolutionPackagerParams.PackageType">
<summary>
 PackageType for packing solution, either managed, unmanaged or both
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.SolutionPackagerParams.ZipFile">
<summary>
 Path to solution that should be packed or extracted
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.SolutionPackagerParams.Action">
<summary>
 Action to start, either pack or extract
</summary>
</member>
<member name="T:Fake.DynamicsCRMHelper.SolutionPackagerParams">
<summary>
 Parameters for invoking Solution Packager
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.AllOrganizations">
<summary>
 Export all solutions for all organizations that the current user has access to. Be sure to pass discovery service url for URL parameter
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.AllSolutions">
<summary>
 Export all solutions for given organization
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.Managed">
<summary>
 Specify, whether solution should be exported as managed or unmanaged
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.Solution">
<summary>
 Set for specifying unique name of solution when exporting single solution
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.FileName">
<summary>
 Set for specifying output file name when exporting solution or input solution name when importing
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.WorkingDirectory">
<summary>
 Working Directory for actions, can be used to influence storage locations of files
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.ToolDirectory">
<summary>
 Tool Directory where Solution Exchanger is stored
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.TimeOut">
<summary>
 TimeOut for each function. Set to a higher value, i.e. 60 minutes if using AllOrganizations
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.Password">
<summary>
 Password of user that should be used to connect to the CRM Organization. Leave blank to use default credentials
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.User">
<summary>
 Username of user that should be used to connect to the CRM Organization. Leave blank to use default credentials
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams.Url">
<summary>
 Url of CRM Organization / Discovery Service URL if using AllOrganizations
</summary>
</member>
<member name="T:Fake.DynamicsCRMHelper.DynamicsCrmHelperParams">
<summary>
 Parameters for executing Dynamics CRM Helper functions
</summary>
</member>
<member name="T:Fake.DynamicsCRMHelper.PackageType">
<summary>
 Specify Package Type for usage with Solution Packager
</summary>
</member>
<member name="T:Fake.DynamicsCRMHelper.SolutionPackagerAction">
<summary>
 Specify which action Solution Packager should be invoked with
</summary>
</member>
<member name="M:Fake.DynamicsCRMHelper.SolutionPackager(Microsoft.FSharp.Core.FSharpFunc{Fake.DynamicsCRMHelper.SolutionPackagerParams,Fake.DynamicsCRMHelper.SolutionPackagerParams})">
<summary>
 Runs the solution packager tool on the given file for extracting the zip file or packing the extracted XML representation of a solution to a zip file again
 ## Parameters

  - `setParams` - Parameters for invoking solution packager
</summary>
</member>
<member name="M:Fake.DynamicsCRMHelper.ImportSolution(Microsoft.FSharp.Core.FSharpFunc{Fake.DynamicsCRMHelper.DynamicsCrmHelperParams,Fake.DynamicsCRMHelper.DynamicsCrmHelperParams})">
<summary>
 Imports zipped solution file to Dynamics CRM
 ## Parameters

  - `setParams` - Parameters for invoking solution exchanger
</summary>
</member>
<member name="M:Fake.DynamicsCRMHelper.ExportSolution(Microsoft.FSharp.Core.FSharpFunc{Fake.DynamicsCRMHelper.DynamicsCrmHelperParams,Fake.DynamicsCRMHelper.DynamicsCrmHelperParams})">
<summary>
 Exports solution from Dynamics CRM and save it to file
 ## Parameters

  - `setParams` - Parameters for invoking solution exchanger
 ## Sample
     // This Target will get all solutions of all organizations that the executing user has access to, export them as unmanaged and extract them using Solution Packager.
     // Extracted solutions are stored in a folder named according to the name of the organization they were exported from.
     Target &quot;SaveAndUnzipAllSolutions&quot; (fun _ -&gt;
             CreateDir solutions
      
             ExportSolution(fun f -&gt; 
                             {f with 
                                 Url = &quot;http://YourOrganizationDiscoveryService&quot;
                                 Managed = false
                                 AllOrganizations = true
                                 WorkingDirectory = solutions
                                 TimeOut = TimeSpan.FromMinutes 60.0
                             })
         
             !!(solutions @@ @&quot;\**\*.zip&quot;)
               |&gt; Seq.iter(fun solution -&gt; 
                             let dir = DirectoryInfo(solution)                    
       
                             SolutionPackager (fun f -&gt;
                                 {f with 
                                     Action = Extract
                                     ZipFile = solution
                                     PackageType = Unmanaged
                                     Folder = extractedDir @@ dir.Parent.Name @@ (Path.GetFileName solution).Replace(&quot;.zip&quot;, &quot;&quot;)
                                     ToolDirectory = @&quot;.\tools\SolutionPackager\&quot;
                                 }))
     )
</summary>
</member>
<member name="M:Fake.DynamicsCRMHelper.PublishAll(Microsoft.FSharp.Core.FSharpFunc{Fake.DynamicsCRMHelper.DynamicsCrmHelperParams,Fake.DynamicsCRMHelper.DynamicsCrmHelperParams})">
<summary>
 Publishes all solution component changes.
 ## Parameters

  - `setParams` - Parameters for invoking solution exchanger
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.SolutionPackagerDefaults">
<summary>
 Default values for invoking Solution Packager
</summary>
</member>
<member name="P:Fake.DynamicsCRMHelper.DynamicsCrmHelperDefaults">
<summary>
 Default values for Dynamics CRM Helper
 You can obtain the solution exchanger as NuGet Package &quot;Dynamics.CRM.SolutionExchanger&quot;
</summary>
</member>
<member name="T:Fake.DynamicsCRMHelper">
<summary>
 Contains various functions for interacting with Dynamics CRM. So far there is support for exporting and importing solutions, zipping and unzipping using the Solution Packager, as well as publishing customizations.
</summary>
</member>
<member name="P:Fake.Appcast.Appcast.items">
<summary>
 Updates published to client, can habe multiple updates e.g. for different OS versions
</summary>
</member>
<member name="P:Fake.Appcast.Appcast.language">
<summary>
 Language of your app
</summary>
</member>
<member name="P:Fake.Appcast.Appcast.description">
<summary>
 Short description
</summary>
</member>
<member name="P:Fake.Appcast.Appcast.title">
<summary>
 A titel, usually the app name
</summary>
</member>
<member name="T:Fake.Appcast.Appcast">
<summary>
 Configuration data for the appcast
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.length">
<summary>
 Length of the file in bytes
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.minimumSystemVersion">
<summary>
 Optional miminal system version for the update
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.dsaSignature">
<summary>
 Optional DSA signature for the archive. It is recommended to use this if the app itself is not signed
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.mimetype">
<summary>
 Mime type of the update file, usualy octetstream
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.shortVersion">
<summary>
 Optional human readable version number. This will be shown to the user if present otherwise
 the technical version number will be used
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.version">
<summary>
 Machine readable version number used to determine if an update is available by the client (should follow semver)
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.url">
<summary>
 URI where the update files are found
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.pubdate">
<summary>
 Date when update is published
</summary>
</member>
<member name="P:Fake.Appcast.AppcastItem.title">
<summary>
 The name of the update
</summary>
</member>
<member name="T:Fake.Appcast.AppcastItem">
<summary>
 Download details for the appcast
</summary>
</member>
<member name="T:Fake.Appcast.MimeType.Custom">
<summary>
 Custom mimetype
</summary>
</member>
<member name="T:Fake.Appcast.MimeType.OctetStream">
<summary>
 Octetstream use for exe or zip files
</summary>
</member>
<member name="T:Fake.Appcast.MimeType">
<summary>
 Mime type of the download file
</summary>
</member>
<member name="M:Fake.Appcast.writeAppcast(System.String,Fake.Appcast.Appcast)">
<summary>
 writes an appcast to a file
 ##Parameters

  - `path` - The file where the appcast should be written
  - `cast` - The appcast to write
 ##Sample
  // This target creates the app cast for our app. I contains two version 1.X and 2.X while 2.X requires at least OS X 10.10 Yosemite.
  Target &quot;CreateAppcast&quot; (fun _ -&gt;
      let server = &quot;https://example.com/files/&quot;
      let fileLength file =
           let info = new System.IO.FileInfo(file)
           info.Length
           
      let latestSize = fileLength &quot;build/download-2.0.1.zip&quot;
      let legacySize = fileLength &quot;build/download-1.1.4.zip&quot;
      
      { 
          title = &quot;My Awesome App&quot;
          description = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus.&quot;
          language = &quot;en&quot;
          items = [
                      {
                          title = &quot;Hawk Nickel Greyhound&quot;
                          pubdate = System.DateTime.Now
                          url = new System.Uri(server + &quot;download-2.0.1.zip&quot;)
                          version = &quot;2014&quot; // This our internal build number
                          shortVersion = Some(&quot;2.0.1&quot;) //This is what we show to the user
                          mimetype = OctetStream
                          minimumSystemVersion = Some(&quot;10.10&quot;)
                          length = latestSize
                          dsaSignature = None
                      };
                      {
                          title = &quot;Sparrow Platinum Beagle&quot;
                          pubdate = System.DateTime.Now
                          url = new System.Uri(server + &quot;download-1.1.4.zip&quot;)
                          version = &quot;1142&quot; // This our internal build number
                          shortVersion = Some(&quot;1.1.4&quot;) //This is what we show to the user
                          mimetype = OctetStream
                          length = legacySize
                          minimumSystemVersion = None
                          dsaSignature = None
                      }
          ]
      } |&gt; writeAppcast &quot;build/updates.xml&quot;
  )
</summary>
</member>
<member name="P:Fake.Appcast.sparkle">
<summary>
 Sparkel namespace used for RSS extension
</summary>
</member>
<member name="T:Fake.Appcast">
<summary>
 Contains code to configure FAKE for Appcast handling
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.IncludeExperimentalFeatures">
<summary>
 Option which allows to enable some experimental features
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.ErrorLevel">
<summary>
 Option which allows to specify if failure of pickles should break the build.
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.TimeOut">
<summary>
 Maximum time to allow xUnit to run before being killed.
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.SystemUnderTestVersion">
<summary>
 The version of the system under test
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.SystemUnderTestName">
<summary>
 The name of the system under test
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.LinkedTestResultFiles">
<summary>
 the paths to the linked test results files
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.TestResultsFormat">
<summary>
 the format of the linked test results
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.OutputFileFormat">
<summary>
 The format of the output documentation 
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.OutputDirectory">
<summary>
 The directory where output files will be placed
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.FeatureFileLanguage">
<summary>
 The language of the feature files
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.FeatureDirectory">
<summary>
 The directory to start scanning recursively for features
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesParams.ToolPath">
<summary>
 The path to the Pickles console tool: &apos;pickles.exe&apos;      
</summary>
</member>
<member name="T:Fake.PicklesHelper.PicklesParams">
<summary>
 The Pickles parameter type
</summary>
</member>
<member name="T:Fake.PicklesHelper.TestResultsFormat">
<summary>
 The format of the test results
</summary>
</member>
<member name="T:Fake.PicklesHelper.PicklesErrorLevel.DontFailBuild">
<summary>
 With this option set, no exception is thrown if pickles fails to execute
</summary>
</member>
<member name="T:Fake.PicklesHelper.PicklesErrorLevel.Error">
<summary>
 This option instructs FAKE to break the build if pickles fails to execute
</summary>
</member>
<member name="T:Fake.PicklesHelper.PicklesErrorLevel">
<summary>
 Option which allows to specify if failure of pickles should break the build.
</summary>
</member>
<member name="M:Fake.PicklesHelper.Pickles(Microsoft.FSharp.Core.FSharpFunc{Fake.PicklesHelper.PicklesParams,Fake.PicklesHelper.PicklesParams})">
<summary>
 Runs pickles living documentation generator via the given tool
 Will fail if the pickles command line tool terminates with a non zero exit code.

 The pickles command line tool terminates with a non-zero exit code if there
 is any error.

 ## Parameters
  - `setParams` - Function used to manipulate the default `PicklesParams` value

 ## Sample usage

     Target &quot;BuildDoc&quot; (fun _ -&gt;
        Pickles (fun p -&gt; { p with
                            FeatureDirectory = currentDirectory @@ &quot;Specs&quot;
                            OutputDirectory = currentDirectory @@ &quot;SpecDocs&quot; })
     )
</summary>
</member>
<member name="P:Fake.PicklesHelper.PicklesDefaults">
<summary>
 The Pickles default parameters

 ## Defaults 

 - `ToolPath` - The `pickles.exe` if it exists in a subdirectory of the current directory
 - `FeatureDirectory` - &apos;currentDirectory&apos;
 - `FeatureFileLanguage` - &apos;None&apos; (defaults to `en`)
 - `OutputDirectory` - `currentDirectory @@ &quot;Documentation&quot;`
 - `OutputFileFormat` - `DHTML`
 - `TestResultsFormat` - `Nunit`
 - `LinkedTestResultFiles` - []
 - `SystemUnderTestName` - `None`
 - `SystemUnderTestVersion` - `None`
 - `TimeOut` - 5 minutes
 - `ErrorLevel` - `Error`
 - `IncludeExperimentalFeatures` - `None` 
</summary>
</member>
<member name="T:Fake.PicklesHelper">
<summary>
 Contains tasks to run the [Pickles](http://www.picklesdoc.com/) living documentation generator
</summary>
</member>
<member name="P:Fake.Choco.ChocoPushParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default `true`.
 Equivalent to the `-y` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPushParams.AdditionalArgs">
<summary>
 A character string containing additional arguments to give to choco.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPushParams.ToolPath">
<summary>
 The location of the choco executable. Automatically found if null or empty.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPushParams.Timeout">
<summary>
 The choco execution timeout.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPushParams.ApiKey">
<summary>
 The api key for the source. If not specified (and not local file source), does a lookup. 
 If not specified and one is not found for an https source, push will fail.
 Equivalent to the `--apikey &lt;apikey&gt;` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPushParams.Source">
<summary>
 The source we are pushing the package to. Default: &quot;https://chocolatey.org/&quot;
 Equivalent to the `--source &lt;source&gt;` option.
</summary>
</member>
<member name="T:Fake.Choco.ChocoPushParams">
<summary>
 The choco push parameter type.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Checksum64Type">
<summary>
 The type of checksum that the file is validated with. Default: Sha256
 Used to create chocolateyInstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.ChecksumType">
<summary>
 The type of checksum that the file is validated with. Default: Sha256
 Used to create chocolateyInstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Checksum64">
<summary>
 The checksum hash value of the PackageDownload64Url resource
 This allows a checksum to be validated for files that are not local. The checksum type is covered by ChecksumType64.
 Equivalent to the `--checksum &lt;string&gt;` option of Install-Chocolatey[Zip]Package functions.
 Used to create chocolateyInstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Checksum">
<summary>
 The checksum hash value of the PackageDownloadUrl resource
 This allows a checksum to be validated for files that are not local. The checksum type is covered by ChecksumType.
 Equivalent to the `--checksum &lt;string&gt;` option of Install-Chocolatey[Zip]Package functions.
 Used to create chocolateyInstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.UninstallPath">
<summary>
 Either:

 - For zip: the zip filename originally installed
 - For exe or msi: the full path to the native uninstaller to run
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.InstallerType">
<summary>
 Installer type. Default: Zip.
 Used to create chocolateyInstall.ps1 and/or chocolateyUninstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.UnzipLocation">
<summary>
 Unzip location for zip package. Default: Chocolatey install folder.
 Used to create chocolateyInstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.SilentArgs">
<summary>
 Silent args for the installer.
 Used to create chocolateyInstall.ps1 and/or chocolateyUninstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.PackageDownload64Url">
<summary>
 Url pointing to the installer (exe, msi, zip) of the 64 bits version of the package.
 Used to create chocolateyInstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.PackageDownloadUrl">
<summary>
 Url pointing to the installer (exe, msi, zip) of the package.
 Used to create chocolateyInstall.ps1 if it doesn&apos;t exists.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.DevelopmentDependency">
<summary>
 Boolean specifying whether the package will be marked as a [development-only dependency](https://docs.nuget.org/Release-Notes/NuGet-2.7#development-only-dependencies). Default: false.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.ProjectSourceUrl">
<summary>
 Url pointing to the location of the underlying software source.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.BugTrackerUrl">
<summary>
 Url pointing to the location where issues and tickets can be accessed.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.MailingListUrl">
<summary>
 Url pointing to the forum or email list group for the software.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.DocsUrl">
<summary>
 Url pointing to the location of the wiki or docs of the software.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.PackageSourceUrl">
<summary>
 Url to the chocolatey package repository, not the software (unless they are the same).
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.RequireLicenseAcceptance">
<summary>
 True if the software needs license acceptance. Default: false.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.LicenseUrl">
<summary>
 Url to the license of the software.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.IconUrl">
<summary>
 Url to the icon of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.ProjectUrl">
<summary>
 Url to the software.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Files">
<summary>
 Files of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.FrameworkAssemblies">
<summary>
 Framework assemblies of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.ReferencesByFramework">
<summary>
 References by framework of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.References">
<summary>
 References of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.DependenciesByFramework">
<summary>
 Dependencies by framework of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Dependencies">
<summary>
 Dependencies of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.OutputDir">
<summary>
 Output directory for the files (nuspec, chocolateyInstall.ps1 and chocolateyUninstall.ps1) creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Copyright">
<summary>
 Copyright of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.ReleaseNotes">
<summary>
 Release notes of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Tags">
<summary>
 Tags of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Description">
<summary>
 Description of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Summary">
<summary>
 Summary of the package.
 Used for the nuspec, chocolateyInstall.ps1 and chocolateyUninstall.ps1 creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Title">
<summary>
 Title of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.PackageId">
<summary>
 Id of the package. Should be lowercase, not contains weird chars and use dash (-) instead of spaces.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Owners">
<summary>
 Owners of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Authors">
<summary>
 Authors of the package.
 Used for the nuspec creation.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default `true`.
 Equivalent to the `-y` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.AdditionalArgs">
<summary>
 A character string containing additional arguments to give to choco.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.ToolPath">
<summary>
 The location of the choco executable. Automatically found if null or empty.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Timeout">
<summary>
 The choco execution timeout.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackParams.Version">
<summary>
 The version you would like to insert into the package.
 Equivalent to the `--version &lt;version&gt;` option.
</summary>
</member>
<member name="T:Fake.Choco.ChocoPackParams">
<summary>
 The choco pack parameter type.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default `true`.
 Equivalent to the `-y` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.AdditionalArgs">
<summary>
 A character string containing additional arguments to give to choco.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.ToolPath">
<summary>
 The location of the choco executable. Automatically found if null or empty.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.Timeout">
<summary>
 The choco execution timeout.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.Password">
<summary>
 Password - the user&apos;s password to the source.
 Equivalent to the `--password &lt;password&gt;` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.User">
<summary>
 User - used with authenticated feeds.
 Equivalent to the `--user &lt;user&gt;` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.SkipPowershell">
<summary>
 Skip Powershell - Do not run chocolateyInstall.ps1. Default `false`.
 Equivalent to the `--skippowershell` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.OverrideArgs">
<summary>
 Should install arguments be used exclusively without appending to current package passed arguments? Default `false`.
 Equivalent to the `--overrideargs` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.InstallArgs">
<summary>
 Install Arguments to pass to the native installer in the package.
 Equivalent to the `--installargs &lt;args&gt;` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.ForceX86">
<summary>
 Force x86 (32bit) installation on 64 bit systems. Default `false`.
 Equivalent to the `--forcex86` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.Source">
<summary>
 The source to find the package(s) to install.
 Equivalent to the `--source &lt;source&gt;` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.PackageParameters">
<summary>
 Parameters to pass to the package.
 Equivalent to the `--params &lt;params&gt;` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.Prerelease">
<summary>
 Include prerelease. Default `false`.
 Equivalent to the `--pre` option.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallParams.Version">
<summary>
 Version of the package
 Equivalent to the `--version &lt;version&gt;` option.
</summary>
</member>
<member name="T:Fake.Choco.ChocoInstallParams">
<summary>
 The choco install parameter type.
</summary>
</member>
<member name="M:Fake.Choco.Push(Microsoft.FSharp.Core.FSharpFunc{Fake.Choco.ChocoPushParams,Fake.Choco.ChocoPushParams},System.String)">
<summary>
 Call choco to [push](https://github.com/chocolatey/choco/wiki/CommandsPush) a package
 ## Parameters
  - `setParams` - Function used to manipulate the default choco parameters. See `ChocoPushParams`
  - `nupkgPath` - path to the .nupkg to push
 ## Sample usage
     
     Target &quot;ChocoPush&quot; (fun _ -&gt;
         &quot;pretzel.0.5.0.nupkg&quot; |&gt; Choco.Push (fun p -&gt; { p with ApiKey = &quot;123-123123-123&quot; })
     )
</summary>
</member>
<member name="M:Fake.Choco.PackFromTemplate(Microsoft.FSharp.Core.FSharpFunc{Fake.Choco.ChocoPackParams,Fake.Choco.ChocoPackParams},System.String)">
<summary>
 Call choco to [pack](https://github.com/chocolatey/choco/wiki/CommandsPack) a package
 ## Parameters
  - `setParams` - Function used to manipulate the default choco parameters. See `ChocoPackParams`
  - `nuspecPath` - path to the .nuspec to pack
 ## Sample usage
     
     Target &quot;ChocoPack&quot; (fun _ -&gt;
         &quot;pretzel.nuspec&quot; |&gt; Choco.Pack (fun p -&gt; { p with Version = &quot;0.5.0&quot; })
     )
</summary>
</member>
<member name="M:Fake.Choco.Pack(Microsoft.FSharp.Core.FSharpFunc{Fake.Choco.ChocoPackParams,Fake.Choco.ChocoPackParams})">
<summary>
 Call choco to [pack](https://github.com/chocolatey/choco/wiki/CommandsPack) a package and create .nuspec, chocolateyInstall.ps1 and chocolateyUninstall.ps1 if informations are specified
 ## Parameters
  - `setParams` - Function used to manipulate the default choco parameters. See `ChocoPackParams`
 ## Sample usage
     
     Target &quot;ChocoPack&quot; (fun _ -&gt;
         Choco.Pack (fun p -&gt; { p with Version = &quot;0.5.0&quot;; ... })
     )
</summary>
</member>
<member name="M:Fake.Choco.Install(Microsoft.FSharp.Core.FSharpFunc{Fake.Choco.ChocoInstallParams,Fake.Choco.ChocoInstallParams},System.String)">
<summary>
 Call choco to [install](https://github.com/chocolatey/choco/wiki/CommandsInstall) a package
 ## Parameters
  - `setParams` - Function used to manipulate the default choco parameters. See `ChocoInstallParams`
  - `packages` - Names of packages, path to packages.config, .nuspec or .nupkg to install
 ## Sample usage
     
     Target &quot;ChocoInstall&quot; (fun _ -&gt;
         &quot;pretzel&quot; |&gt; Choco.Install (fun p -&gt; { p with Version = &quot;0.4.0&quot; })
     )
</summary>
</member>
<member name="P:Fake.Choco.IsAvailable">
<summary>
 True if choco is available (only on windows)
 ## Sample usage
     &quot;Build&quot; =?&gt; (&quot;ChocoInstall&quot;, Choco.IsAvailable)
</summary>
</member>
<member name="M:Fake.Choco.createNuSpec(Fake.Choco.ChocoPackParams,System.String)">
<summary>
 [omit]
 Create nuspec from data
</summary>
</member>
<member name="M:Fake.Choco.createNuSpecFromTemplate(Fake.Choco.ChocoPackParams,System.IO.FileInfo,System.String)">
<summary>
 [omit]
 Create nuspec from template
</summary>
</member>
<member name="M:Fake.Choco.callChoco(System.String,System.String,System.TimeSpan)">
<summary>
 [omit]
 Invokes chocolatey with the specified arguments
 ## Parameters
  - `exePath` - The location of choco executable. Automatically found if null or empty.
  - `args` - The arguments given to the executable.
  - `timeout` - The choco execution timeout
</summary>
</member>
<member name="P:Fake.Choco.FindExe">
<summary>
 [omit]
 Tries to find the specified choco executable:

 1. In the `&lt;ProgramData&gt;\chocolatey\bin` directory
 2. In the `PATH` environment variable.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPushDefaults">
<summary>
 The default option set given to choco push.
</summary>
</member>
<member name="P:Fake.Choco.ChocoPackDefaults">
<summary>
 The default option set given to choco pack.
</summary>
</member>
<member name="P:Fake.Choco.ChocoInstallDefaults">
<summary>
 The default option set given to choco install.
</summary>
</member>
<member name="T:Fake.Choco">
<summary>
 Contains tasks which allow to call [Chocolatey](https://chocolatey.org)
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationParams.Unfurl_Links">
<summary>
 Whether to force inline unfurling of attached links. Default value: false.
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationParams.Icon_Emoji">
<summary>
 The emoji to be displayed with the message. Default value: Specified in your slack Webhook configuration.
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationParams.Icon_URL">
<summary>
 The icon to be displayed with the message. Default value: Specified in your slack Webhook configuration.
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationParams.Channel">
<summary>
 Channel to which the message will be posted. Default value: Specified in your Slack Webhook configuration.
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationParams.From">
<summary>
 Name the message will appear to be sent from. Default value: Specified in your Slack Webhook configuration.
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationParams.Text">
<summary>
 (Required) The message body
</summary>
</member>
<member name="T:Fake.SlackNotificationHelper.SlackNotificationParams">
<summary>
 The Slack notification parameter type
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentParams.Fields">
<summary>
 Text to be displayed as a table below the message
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentParams.Color">
<summary>
 Color of the attachment text. Can be hex-value(e.g. &quot;#AABBCC&quot;) or one of &quot;&apos;good&apos;, &apos;warning&apos;, &apos;danger&apos;.
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentParams.Pretext">
<summary>
 Text that should appear above the formatted data
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentParams.Text">
<summary>
 Text that should appear within the attachment
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentParams.Title_Link">
<summary>
 Content to which the title should link
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentParams.Title">
<summary>
 The title of the attachment
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentParams.Fallback">
<summary>
 (Required) Text summary of the attachment that is shown by clients that understand attachments but choose not to show them
</summary>
</member>
<member name="T:Fake.SlackNotificationHelper.SlackNotificationAttachmentParams">
<summary>
 The Slack notification attachment parameter type
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentFieldParams.Short">
<summary>
 Whether the value is short enough to be displayed side-by-side with other values
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentFieldParams.Value">
<summary>
 (Required) Text value of the field
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentFieldParams.Title">
<summary>
 (Required) The field title
</summary>
</member>
<member name="T:Fake.SlackNotificationHelper.SlackNotificationAttachmentFieldParams">
<summary>
 The Slack notification attachment field parameter type
</summary>
</member>
<member name="M:Fake.SlackNotificationHelper.SlackNotification(System.String,Microsoft.FSharp.Core.FSharpFunc{Fake.SlackNotificationHelper.SlackNotificationParams,Fake.SlackNotificationHelper.SlackNotificationParams})">
<summary>
 Sends a notification to a Slack Channel
 ## Parameters
  - `webhookURL` - The Slack webhook URL
  - `setParams` - Function used to override the default notification parameters
</summary>
</member>
<member name="M:Fake.SlackNotificationHelper.SerializeData``1(``0)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.SlackNotificationHelper.ValidateParams(System.String,Fake.SlackNotificationHelper.SlackNotificationParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.lowerCaseContractResolver">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentFieldDefaults">
<summary>
 The default parameters for Slack notification attachment fields
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationAttachmentDefaults">
<summary>
 The default parameters for Slack notification attachments
</summary>
</member>
<member name="P:Fake.SlackNotificationHelper.SlackNotificationDefaults">
<summary>
 The default Slack notification parameters
</summary>
</member>
<member name="T:Fake.SlackNotificationHelper">
<summary>
 Contains a task to send notification messages to a [Slack](https://slack.com/) webhook
</summary>
</member>
<member name="P:Fake.SonarQubeHelper.SonarQubeParams.Config">
<summary>
 Read settings from configuration file
</summary>
</member>
<member name="P:Fake.SonarQubeHelper.SonarQubeParams.Settings">
<summary>
 Individual global settings for SonarQube
</summary>
</member>
<member name="P:Fake.SonarQubeHelper.SonarQubeParams.Version">
<summary>
 Version number of the project
</summary>
</member>
<member name="P:Fake.SonarQubeHelper.SonarQubeParams.Name">
<summary>
 Name of the project
</summary>
</member>
<member name="P:Fake.SonarQubeHelper.SonarQubeParams.Key">
<summary>
 Key to identify the sonar qube project
</summary>
</member>
<member name="P:Fake.SonarQubeHelper.SonarQubeParams.ToolsPath">
<summary>
 FileName of the sonar qube runner exe. 
</summary>
</member>
<member name="T:Fake.SonarQubeHelper.SonarQubeParams">
<summary>
 Parameter type to configure the sonar qube runner.
</summary>
</member>
<member name="T:Fake.SonarQubeHelper.SonarQubeCall">
<summary>
 The supported commands of Sonar Qube. It is called with Begin before compilation, and End after compilation.
</summary>
</member>
<member name="M:Fake.SonarQubeHelper.SonarQubeEnd">
<summary>
 This task can be used to run the end command of [Sonar Qube](http://sonarqube.org/) on a project.

 ## Sample
   SonarQubeEnd

</summary>
</member>
<member name="M:Fake.SonarQubeHelper.SonarQube(Fake.SonarQubeHelper.SonarQubeCall,Microsoft.FSharp.Core.FSharpFunc{Fake.SonarQubeHelper.SonarQubeParams,Fake.SonarQubeHelper.SonarQubeParams})">
<summary>
 This task to can be used to run [Sonar Qube](http://sonarqube.org/) on a project.
 ## Parameters

  - `call` - Begin or End, to start analysis or finish it
  - `setParams` - Function used to overwrite the SonarQube default parameters.

 ## Sample
   SonarQube Begin (fun p -&gt;
    {p with
      Key = &quot;MyProject&quot;
      Name = &quot;MainTool&quot;
      Version = &quot;1.0 })

</summary>
</member>
<member name="M:Fake.SonarQubeHelper.SonarQubeCall(Fake.SonarQubeHelper.SonarQubeCall,Fake.SonarQubeHelper.SonarQubeParams)">
<summary>
 Execute the external msbuild runner of Sonar Qube. Parameters are fiven to the command line tool as required.
</summary>
</member>
<member name="P:Fake.SonarQubeHelper.SonarQubeDefaults">
<summary>
 SonarQube default parameters - tries to locate MSBuild.SonarQube.exe in any subfolder.
</summary>
</member>
<member name="T:Fake.SonarQubeHelper">
<summary>
 Contains a task to run the msbuild runner of [Sonar Qube analyzer](http://sonarqube.org).
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebSite.WebJobs">
<summary>
 The webjobs to deploy to this web site
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebSite.Password">
<summary>
 The FTP Password
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebSite.UserName">
<summary>
 The FTP username, usually the $username from the site&apos;s publish profile
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebSite.Url">
<summary>
 The url of the website, usually in the format of https://&lt;yourwebsite&gt;.scm.azurewebsites.net
</summary>
</member>
<member name="T:Fake.Azure.WebJobs.WebSite">
<summary>
 The website that webjobs are deployed to
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebJob.PackageLocation">
<summary>
 The package path to once zipped
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebJob.DirectoryToPackage">
<summary>
 The directory path of the webjob to zip
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebJob.Project">
<summary>
 The project to be zipped and deployed as a webjob
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebJob.JobType">
<summary>
 Specifies what type of webjob this is. Note that this also determines it&apos;s deployment location on Azure
</summary>
</member>
<member name="P:Fake.Azure.WebJobs.WebJob.Name">
<summary>
 The name of the web job, this will also be the name out of zip file.
</summary>
</member>
<member name="T:Fake.Azure.WebJobs.WebJob">
<summary>
 WebJob type
</summary>
</member>
<member name="T:Fake.Azure.WebJobs.WebJobType">
<summary>
 The running modes of webjobs
</summary>
</member>
<member name="M:Fake.Azure.WebJobs.DeployWebJobs(Microsoft.FSharp.Collections.FSharpList{Fake.Azure.WebJobs.WebSite})">
<summary>
 This task to can be used deploy a prebuilt webjob zip to a website
 ## Parameters

  - `webSites` - The websites and webjobs to deploy.
</summary>
</member>
<member name="M:Fake.Azure.WebJobs.PackageWebJobs(Microsoft.FSharp.Collections.FSharpList{Fake.Azure.WebJobs.WebSite})">
<summary>
 This task to can be used create a zip for each webjob to deploy to a website
 The output structure is: `outputpath/{websitename}/webjobs/{continuous/triggered}/{webjobname}.zip`
 ## Parameters

  - `webSites` - The websites and webjobs to build zips from.
</summary>
</member>
<member name="T:Fake.Azure.WebJobs">
<summary>
 Contains tasks to package and deploy [Azure Web Jobs](http://azure.microsoft.com/en-gb/documentation/articles/web-sites-create-web-jobs/) via the [Kudu](https://github.com/projectkudu/kudu) Zip controller
</summary>
</member>
<member name="P:Fake.Azure.CloudServices.PackageCloudServiceParams.OutputPath">
<summary>
 The output path for the .cspkg.
</summary>
</member>
<member name="P:Fake.Azure.CloudServices.PackageCloudServiceParams.SdkVersion">
<summary>
 The SDK version to use e.g. 2.2. If None, the latest available version is used.
</summary>
</member>
<member name="P:Fake.Azure.CloudServices.PackageCloudServiceParams.WorkerRole">
<summary>
 The name of the role in the service.
</summary>
</member>
<member name="P:Fake.Azure.CloudServices.PackageCloudServiceParams.CloudService">
<summary>
 The name of the Cloud Service.
</summary>
</member>
<member name="T:Fake.Azure.CloudServices.PackageCloudServiceParams">
<summary>
 Configuration details for packaging cloud services.
</summary>
</member>
<member name="M:Fake.Azure.CloudServices.PackageRole(Fake.Azure.CloudServices.PackageCloudServiceParams)">
<summary>
 Packages a cloud service role into a .cspkg, ready for deployment.
</summary>
</member>
<member name="M:Fake.Azure.CloudServices.ModifyVMSize(Fake.Azure.CloudServices.VmSizes.VmSize,System.String)">
<summary>
 Modifies the size of the Worker Role in the csdef.
</summary>
</member>
<member name="T:Fake.Azure.CloudServices">
<summary>
 Contains tasks to package Azure Cloud Services.
</summary>
</member>
<member name="T:Fake.Azure.Kudu.WebJobType">
<summary>
 The different types of web jobs.
</summary>
</member>
<member name="M:Fake.Azure.Kudu.kuduSync">
<summary>
 Synchronises all staged files from the temporary deployment to the actual deployment, removing
 any obsolete files, updating changed files and adding new files.
</summary>
</member>
<member name="M:Fake.Azure.Kudu.stageWebJob(Fake.Azure.Kudu.WebJobType,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Stages a set of files into a WebJob folder in the temp deployment area, ready for deployment into the website as a webjob.
</summary>
</member>
<member name="M:Fake.Azure.Kudu.getWebJobPath(Fake.Azure.Kudu.WebJobType,System.String)">
<summary>
 Gets the path for deploying a web job to.
</summary>
</member>
<member name="M:Fake.Azure.Kudu.stageFolder(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean})">
 <summary>
 Stages a folder and all subdirectories into the temp deployment area, ready for deployment into the website.
 </summary>
 <param name="source">The source folder to copy.</param>
 <param name="shouldInclude">A predicate which includes files from the folder. If the entire directory should be copied, this predicate should always return true.</param>
</member>
<member name="P:Fake.Azure.Kudu.kuduPath">
<summary>
 The path to the KuduSync application.
</summary>
</member>
<member name="P:Fake.Azure.Kudu.previousManifestPath">
<summary>
 Used by KuduSync for tracking and diffing deployments.
</summary>
</member>
<member name="P:Fake.Azure.Kudu.nextManifestPath">
<summary>
 Used by KuduSync for tracking and diffing deployments.
</summary>
</member>
<member name="P:Fake.Azure.Kudu.deploymentTarget">
<summary>
 Location where synced outputs should be deployed to.
</summary>
</member>
<member name="P:Fake.Azure.Kudu.deploymentTemp">
<summary>
 Location where staged outputs should go before synced up to the site.
</summary>
</member>
<member name="T:Fake.Azure.Kudu">
<summary>
 Contains tasks to stage and deploy Azure website and webjobs using source code deployment with Kudu Sync.
</summary>
</member>
<member name="P:Fake.DocFxHelper.DocFxParams.Serve">
<summary>
 Serves the generated documentation on localhost. Default: false
</summary>
</member>
<member name="P:Fake.DocFxHelper.DocFxParams.Timeout">
<summary>
 Allows to specify a timeout for DocFx. Default: 5 min
</summary>
</member>
<member name="P:Fake.DocFxHelper.DocFxParams.WorkingDirectory">
<summary>
 DocFx WorkingDirectory. Default: docs
</summary>
</member>
<member name="P:Fake.DocFxHelper.DocFxParams.DocFxJson">
<summary>
 the DocFxJson Config-File. Default: docs/docfx.json
</summary>
</member>
<member name="P:Fake.DocFxHelper.DocFxParams.ToolPath">
<summary>
 The tool path - FAKE tries to find docfx.exe automatically in any sub folder.
</summary>
</member>
<member name="T:Fake.DocFxHelper.DocFxParams">
<summary>
 The parameter type for DocFx.
</summary>
</member>
<member name="M:Fake.DocFxHelper.DocFx(Microsoft.FSharp.Core.FSharpFunc{Fake.DocFxHelper.DocFxParams,Fake.DocFxHelper.DocFxParams})">
<summary>
 Generates a DocFx documentation.
 ## Parameters
  - `setParams` - Function used to manipulate the default DocFx parameters. See `DocFxDefaults`
 ## Sample

     DocFx (fun p -&gt; 
      { p with 
          DocFxJson = &quot;foo&quot; @@ &quot;bar&quot; @@ &quot;docfx.json&quot;
          Timeout = TimeSpan.FromMinutes 10.
      })
</summary>
</member>
<member name="P:Fake.DocFxHelper.DocFxDefaults">
<summary>
 The default parameters
</summary>
</member>
<member name="T:Fake.DocFxHelper">
<summary>
 Contains helper functions to run the documentation tool &quot;docfx&quot;.
</summary>
</member>
<member name="M:Fake.GitVersionHelper.GitVersion(Microsoft.FSharp.Core.FSharpFunc{Fake.GitVersionHelper.GitversionParams,Fake.GitVersionHelper.GitversionParams})">
<summary>
 Runs [GitVersion](https://gitversion.readthedocs.io/en/latest/) on a .NET project file.
 ## Parameters

  - `setParams` - Function used to manipulate the GitversionDefaults value.

 ## Sample

      GitVersion id // Use Defaults
      GitVersion (fun p -&gt; { p with ToolPath = currentDirectory @@ &quot;tools&quot; }
</summary>
</member>
<member name="T:Fake.GitVersionHelper">
<summary>
 Containts helper function for GitVersion - a tool to help you achieve Semantic Versioning on your project.

 To install GitVersion.exe on Windows, start PowerShell as Administrator and run choco install gitversion.portable -s https://chocolatey.org/api/v2&quot;
 For Mac and Unix, install the NuGet version.
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLog.Entries">
<summary>
 The change log entries
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLog.Unreleased">
<summary>
 The Unreleased section
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLog.Description">
<summary>
 The description
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLog.Header">
<summary>
 the header line
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLog.LatestEntry">
<summary>
 the latest change log entry
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLogEntry.IsYanked">
<summary>
 True, if the entry was yanked 
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLogEntry.Changes">
<summary>
 The parsed list of changes
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLogEntry.Description">
<summary>
 a descriptive text (after the header)
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLogEntry.Date">
<summary>
 Release DateTime
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLogEntry.SemVer">
<summary>
 Semantic version
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLogEntry.NuGetVersion">
<summary>
 the NuGet package version
</summary>
</member>
<member name="P:Fake.ChangeLogHelper.ChangeLogEntry.AssemblyVersion">
<summary>
 the parsed Version
</summary>
</member>
<member name="T:Fake.ChangeLogHelper.Change.Custom">
<summary>
 Custom entry (Header, Description)
</summary>
</member>
<member name="T:Fake.ChangeLogHelper.Change.Security">
<summary>
 to invite users to upgrade in case of vulnerabilities
</summary>
</member>
<member name="T:Fake.ChangeLogHelper.Change.Fixed">
<summary>
 for any bug fixes
</summary>
</member>
<member name="T:Fake.ChangeLogHelper.Change.Removed">
<summary>
 for deprecated features removed in this release
</summary>
</member>
<member name="T:Fake.ChangeLogHelper.Change.Deprecated">
<summary>
 for once-stable features removed in upcoming releases
</summary>
</member>
<member name="T:Fake.ChangeLogHelper.Change.Changed">
<summary>
 for changes in existing functionality
</summary>
</member>
<member name="T:Fake.ChangeLogHelper.Change.Added">
<summary>
 for new features
</summary>
</member>
<member name="M:Fake.ChangeLogHelper.PromoteUnreleased(System.String,Fake.ChangeLogHelper.ChangeLog)">
<summary>
 Promotes the `Unreleased` section of a changelog
 to a new change log entry with the given version

 ## Parameters
 - `version` - The version (in NuGet-Version format, e.g. `3.13.4-alpha1.212`
 - `changeLog` - The change log to promote

 ## Returns
 The promoted change log
</summary>
</member>
<member name="M:Fake.ChangeLogHelper.SaveChangeLog(System.String,Fake.ChangeLogHelper.ChangeLog)">
<summary>
 Saves a Change log to a text file.

 ## Parameters
  - `fileName` - ChangeLog text file name
  - `changeLog` - the change log data
</summary>
</member>
<member name="M:Fake.ChangeLogHelper.LoadChangeLog(System.String)">
<summary>
 Parses a Change log text file and returns the lastest change log.

 ## Parameters
  - `fileName` - ChangeLog text file name
 
 ## Returns
 The loaded change log (or throws an exception, if the change log could not be parsed)
</summary>
</member>
<member name="M:Fake.ChangeLogHelper.parseChangeLog(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parses a change log text and returns the change log.

 ## Parameters
  - `data` - change log text
</summary>
</member>
<member name="T:Fake.ChangeLogHelper">
<summary>
 Contains helpers which allow to parse Change log text files.
 These files have to be in a format as described on http://keepachangelog.com/en/0.3.0/

 ## Sample

     let changeLogFile = &quot;CHANGELOG.md&quot;
     let newVersion = &quot;1.0.0&quot;
     
     Target &quot;AssemblyInfo&quot; (fun _ -&gt;
         let changeLog = changeLogFile |&gt; ChangeLogHelper.LoadChangeLog
         CreateFSharpAssemblyInfo &quot;src/Common/AssemblyInfo.fs&quot;
           [ Attribute.Title project
             Attribute.Product project
             Attribute.Description summary
             Attribute.Version changeLog.LatestEntry.AssemblyVersion
             Attribute.FileVersion changeLog.LatestEntry.AssemblyVersion]
     )

     Target &quot;Promote Unreleased to new version&quot; (fun _ -&gt;
         let newChangeLog = 
             changeLogFile 
             |&gt; ChangeLogHelper.LoadChangeLog
             |&gt; ChangeLogHelper.PromoteUnreleased newVersion
             |&gt; ChangeLogHelper.SavceChangeLog changeLogFile
     )
</summary>
</member>
</members>
</doc>
